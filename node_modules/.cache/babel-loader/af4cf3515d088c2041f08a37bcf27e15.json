{"ast":null,"code":"const txnBuilder = require('./transaction');\n/**\n * makePaymentTxnWithSuggestedParams takes payment arguments and returns a Transaction object\n * @param from - string representation of Algorand address of sender\n * @param to - string representation of Algorand address of recipient\n * @param amount - integer amount to send, in microAlgos\n * @param closeRemainderTo - optionally close out remaining account balance to this account, represented as string rep of Algorand address\n * @param note - uint8array of arbitrary data for sender to store\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *      If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param rekeyTo - rekeyTo address, optional\n * @returns {Transaction}\n */\n\n\nfunction makePaymentTxnWithSuggestedParams(from, to, amount, closeRemainderTo, note, suggestedParams, rekeyTo = undefined) {\n  const o = {\n    from,\n    to,\n    amount,\n    closeRemainderTo,\n    note,\n    suggestedParams,\n    type: 'pay',\n    reKeyTo: rekeyTo\n  };\n  return new txnBuilder.Transaction(o);\n}\n/**\n * makePaymentTxn takes payment arguments and returns a Transaction object\n * @param from - string representation of Algorand address of sender\n * @param to - string representation of Algorand address of recipient\n * @param fee - integer fee per byte, in microAlgos. for a flat fee, overwrite the fee property on the returned object\n * If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n * @param amount - integer amount to send, in microAlgos\n * @param closeRemainderTo - optionally close out remaining account balance to this account, represented as string rep of Algorand address\n * @param firstRound - integer first protocol round on which this txn is valid\n * @param lastRound - integer last protocol round on which this txn is valid\n * @param note - uint8array of arbitrary data for sender to store\n * @param genesisHash - string specifies hash genesis block of network in use\n * @param genesisID - string specifies genesis ID of network in use\n * @param rekeyTo - rekeyTo address, optional\n * @Deprecated in version 2.0 this will change to use the \"WithSuggestedParams\" signature.\n * @returns {Transaction}\n */\n\n\nfunction makePaymentTxn(from, to, fee, amount, closeRemainderTo, firstRound, lastRound, note, genesisHash, genesisID, rekeyTo = undefined) {\n  const suggestedParams = {\n    genesisHash,\n    genesisID,\n    firstRound,\n    lastRound,\n    fee\n  };\n  return makePaymentTxnWithSuggestedParams(from, to, amount, closeRemainderTo, note, suggestedParams, rekeyTo);\n} // helper for above makePaymentTxnWithSuggestedParams, instead accepting an arguments object\n\n\nfunction makePaymentTxnWithSuggestedParamsFromObject(o) {\n  return makePaymentTxnWithSuggestedParams(o.from, o.to, o.amount, o.closeRemainderTo, o.note, o.suggestedParams, o.rekeyTo);\n}\n/**\n * makeKeyRegistrationTxnWithSuggestedParams takes key registration arguments and returns a Transaction object for\n * that key registration operation\n *\n * @param from - string representation of Algorand address of sender\n * @param note - uint8array of arbitrary data for sender to store\n * @param voteKey - string representation of voting key. for key deregistration, leave undefined\n * @param selectionKey - string representation of selection key. for key deregistration, leave undefined\n * @param voteFirst - first round on which voteKey is valid\n * @param voteLast - last round on which voteKey is valid\n * @param voteKeyDilution - integer\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *  If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param rekeyTo - rekeyTo address, optional\n * @param nonParticipation - configure whether the address wants to stop participating. If true,\n *   voteKey, selectionKey, voteFirst, voteLast, and voteKeyDilution must be undefined.\n * @returns {Transaction}\n */\n\n\nfunction makeKeyRegistrationTxnWithSuggestedParams(from, note, voteKey, selectionKey, voteFirst, voteLast, voteKeyDilution, suggestedParams, rekeyTo = undefined, nonParticipation = false) {\n  const o = {\n    from,\n    note,\n    voteKey,\n    selectionKey,\n    voteFirst,\n    voteLast,\n    voteKeyDilution,\n    suggestedParams,\n    type: 'keyreg',\n    reKeyTo: rekeyTo,\n    nonParticipation\n  };\n  return new txnBuilder.Transaction(o);\n}\n/**\n * makeKeyRegistrationTxn takes key registration arguments and returns a Transaction object for\n * that key registration operation\n *\n * @param from - string representation of Algorand address of sender\n * @param fee - integer fee per byte, in microAlgos. for a flat fee, overwrite the fee property on the returned object\n *  If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n * @param firstRound - integer first protocol round on which this txn is valid\n * @param lastRound - integer last protocol round on which this txn is valid\n * @param note - uint8array of arbitrary data for sender to store\n * @param genesisHash - string specifies hash genesis block of network in use\n * @param genesisID - string specifies genesis ID of network in use\n * @param voteKey - string representation of voting key. for key deregistration, leave undefined\n * @param selectionKey - string representation of selection key. for key deregistration, leave undefined\n * @param voteFirst - first round on which voteKey is valid\n * @param voteLast - last round on which voteKey is valid\n * @param voteKeyDilution - integer\n * @param rekeyTo - rekeyTo address, optional\n * @param nonParticipation - configure whether the address wants to stop participating. If true,\n *   voteKey, selectionKey, voteFirst, voteLast, and voteKeyDilution must be undefined.\n * @Deprecated in version 2.0 this will change to use the \"WithSuggestedParams\" signature.\n * @returns {Transaction}\n */\n\n\nfunction makeKeyRegistrationTxn(from, fee, firstRound, lastRound, note, genesisHash, genesisID, voteKey, selectionKey, voteFirst, voteLast, voteKeyDilution, rekeyTo = undefined, nonParticipation = false) {\n  const suggestedParams = {\n    genesisHash,\n    genesisID,\n    firstRound,\n    lastRound,\n    fee\n  };\n  return makeKeyRegistrationTxnWithSuggestedParams(from, note, voteKey, selectionKey, voteFirst, voteLast, voteKeyDilution, suggestedParams, rekeyTo, nonParticipation);\n} // helper for above makeKeyRegistrationTxnWithSuggestedParams, instead accepting an arguments object\n\n\nfunction makeKeyRegistrationTxnWithSuggestedParamsFromObject(o) {\n  return makeKeyRegistrationTxnWithSuggestedParams(o.from, o.note, o.voteKey, o.selectionKey, o.voteFirst, o.voteLast, o.voteKeyDilution, o.suggestedParams, o.rekeyTo, o.nonParticipation);\n}\n/** makeAssetCreateTxnWithSuggestedParams takes asset creation arguments and returns a Transaction object\n * for creating that asset\n *\n * @param from - string representation of Algorand address of sender\n * @param note - uint8array of arbitrary data for sender to store\n * @param total - integer total supply of the asset\n * @param decimals - integer number of decimals for asset unit calculation\n * @param defaultFrozen - boolean whether asset accounts should default to being frozen\n * @param manager - string representation of Algorand address in charge of reserve, freeze, clawback, destruction, etc\n * @param reserve - string representation of Algorand address representing asset reserve\n * @param freeze - string representation of Algorand address with power to freeze/unfreeze asset holdings\n * @param clawback - string representation of Algorand address with power to revoke asset holdings\n * @param unitName - string units name for this asset\n * @param assetName - string name for this asset\n * @param assetURL - string URL relating to this asset\n * @param assetMetadataHash - Uint8Array or UTF-8 string representation of a hash commitment with respect to the asset. Must be exactly 32 bytes long.\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *  If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param rekeyTo - rekeyTo address, optional\n * @returns {Transaction}\n */\n\n\nfunction makeAssetCreateTxnWithSuggestedParams(from, note, total, decimals, defaultFrozen, manager, reserve, freeze, clawback, unitName, assetName, assetURL, assetMetadataHash, suggestedParams, rekeyTo = undefined) {\n  const o = {\n    from,\n    note,\n    suggestedParams,\n    assetTotal: total,\n    assetDecimals: decimals,\n    assetDefaultFrozen: defaultFrozen,\n    assetUnitName: unitName,\n    assetName,\n    assetURL,\n    assetMetadataHash,\n    assetManager: manager,\n    assetReserve: reserve,\n    assetFreeze: freeze,\n    assetClawback: clawback,\n    type: 'acfg',\n    reKeyTo: rekeyTo\n  };\n  return new txnBuilder.Transaction(o);\n}\n/** makeAssetCreateTxn takes asset creation arguments and returns a Transaction object\n * for creating that asset\n *\n * @param from - string representation of Algorand address of sender\n * @param fee - integer fee per byte, in microAlgos. for a flat fee, overwrite the fee property on the returned object\n *  If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n * @param firstRound - integer first protocol round on which this txn is valid\n * @param lastRound - integer last protocol round on which this txn is valid\n * @param note - uint8array of arbitrary data for sender to store\n * @param genesisHash - string specifies hash genesis block of network in use\n * @param genesisID - string specifies genesis ID of network in use\n * @param total - integer total supply of the asset\n * @param decimals - integer number of decimals for asset unit calculation\n * @param defaultFrozen - boolean whether asset accounts should default to being frozen\n * @param manager - string representation of Algorand address in charge of reserve, freeze, clawback, destruction, etc\n * @param reserve - string representation of Algorand address representing asset reserve\n * @param freeze - string representation of Algorand address with power to freeze/unfreeze asset holdings\n * @param clawback - string representation of Algorand address with power to revoke asset holdings\n * @param unitName - string units name for this asset\n * @param assetName - string name for this asset\n * @param assetURL - string URL relating to this asset\n * @param assetMetadataHash - Uint8Array or UTF-8 string representation of a hash commitment with respect to the asset. Must be exactly 32 bytes long.\n * @param rekeyTo - rekeyTo address, optional\n * @Deprecated in version 2.0 this will change to use the \"WithSuggestedParams\" signature.\n * @returns {Transaction}\n */\n\n\nfunction makeAssetCreateTxn(from, fee, firstRound, lastRound, note, genesisHash, genesisID, total, decimals, defaultFrozen, manager, reserve, freeze, clawback, unitName, assetName, assetURL, assetMetadataHash, rekeyTo = undefined) {\n  const suggestedParams = {\n    genesisHash,\n    genesisID,\n    firstRound,\n    lastRound,\n    fee\n  };\n  return makeAssetCreateTxnWithSuggestedParams(from, note, total, decimals, defaultFrozen, manager, reserve, freeze, clawback, unitName, assetName, assetURL, assetMetadataHash, suggestedParams, rekeyTo);\n} // helper for above makeAssetCreateTxnWithSuggestedParams, instead accepting an arguments object\n\n\nfunction makeAssetCreateTxnWithSuggestedParamsFromObject(o) {\n  return makeAssetCreateTxnWithSuggestedParams(o.from, o.note, o.total, o.decimals, o.defaultFrozen, o.manager, o.reserve, o.freeze, o.clawback, o.unitName, o.assetName, o.assetURL, o.assetMetadataHash, o.suggestedParams, o.rekeyTo);\n}\n/** makeAssetConfigTxnWithSuggestedParams can be issued by the asset manager to change the manager, reserve, freeze, or clawback\n * you must respecify existing addresses to keep them the same; leaving a field blank is the same as turning\n * that feature off for this asset\n *\n * @param from - string representation of Algorand address of sender\n * @param note - uint8array of arbitrary data for sender to store\n * @param assetIndex - int asset index uniquely specifying the asset\n * @param manager - string representation of new asset manager Algorand address\n * @param reserve - string representation of new reserve Algorand address\n * @param freeze - string representation of new freeze manager Algorand address\n * @param clawback - string representation of new revocation manager Algorand address\n * @param strictEmptyAddressChecking - boolean - throw an error if any of manager, reserve, freeze, or clawback are undefined. optional, defaults to true.\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *  If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param rekeyTo - rekeyTo address, optional\n * @returns {Transaction}\n */\n\n\nfunction makeAssetConfigTxnWithSuggestedParams(from, note, assetIndex, manager, reserve, freeze, clawback, suggestedParams, strictEmptyAddressChecking = true, rekeyTo = undefined) {\n  if (strictEmptyAddressChecking && (manager === undefined || reserve === undefined || freeze === undefined || clawback === undefined)) {\n    throw Error('strict empty address checking was turned on, but at least one empty address was provided');\n  }\n\n  const o = {\n    from,\n    suggestedParams,\n    assetIndex,\n    assetManager: manager,\n    assetReserve: reserve,\n    assetFreeze: freeze,\n    assetClawback: clawback,\n    type: 'acfg',\n    note,\n    reKeyTo: rekeyTo\n  };\n  return new txnBuilder.Transaction(o);\n}\n/** makeAssetConfigTxn can be issued by the asset manager to change the manager, reserve, freeze, or clawback\n * you must respecify existing addresses to keep them the same; leaving a field blank is the same as turning\n * that feature off for this asset\n *\n * @param from - string representation of Algorand address of sender\n * @param fee - integer fee per byte, in microAlgos. for a flat fee, overwrite the fee property on the returned object\n *  If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n * @param firstRound - integer first protocol round on which this txn is valid\n * @param lastRound - integer last protocol round on which this txn is valid\n * @param note - uint8array of arbitrary data for sender to store\n * @param genesisHash - string specifies hash genesis block of network in use\n * @param genesisID - string specifies genesis ID of network in use\n * @param assetIndex - int asset index uniquely specifying the asset\n * @param manager - string representation of new asset manager Algorand address\n * @param reserve - string representation of new reserve Algorand address\n * @param freeze - string representation of new freeze manager Algorand address\n * @param clawback - string representation of new revocation manager Algorand address\n * @param strictEmptyAddressChecking - boolean - throw an error if any of manager, reserve, freeze, or clawback are undefined. optional, defaults to true.\n * @param rekeyTo - rekeyTo address, optional\n * @Deprecated in version 2.0 this will change to use the \"WithSuggestedParams\" signature.\n * @returns {Transaction}\n */\n\n\nfunction makeAssetConfigTxn(from, fee, firstRound, lastRound, note, genesisHash, genesisID, assetIndex, manager, reserve, freeze, clawback, strictEmptyAddressChecking = true, rekeyTo = undefined) {\n  const suggestedParams = {\n    genesisHash,\n    genesisID,\n    firstRound,\n    lastRound,\n    fee\n  };\n  return makeAssetConfigTxnWithSuggestedParams(from, note, assetIndex, manager, reserve, freeze, clawback, suggestedParams, strictEmptyAddressChecking, rekeyTo);\n} // helper for above makeAssetConfigTxnWithSuggestedParams, instead accepting an arguments object\n\n\nfunction makeAssetConfigTxnWithSuggestedParamsFromObject(o) {\n  return makeAssetConfigTxnWithSuggestedParams(o.from, o.note, o.assetIndex, o.manager, o.reserve, o.freeze, o.clawback, o.suggestedParams, o.strictEmptyAddressChecking, o.rekeyTo);\n}\n/** makeAssetDestroyTxnWithSuggestedParams will allow the asset's manager to remove this asset from the ledger, so long\n * as all outstanding assets are held by the creator.\n *\n * @param from - string representation of Algorand address of sender\n * @param note - uint8array of arbitrary data for sender to store\n * @param assetIndex - int asset index uniquely specifying the asset\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *  If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param rekeyTo - rekeyTo address, optional\n * @returns {Transaction}\n */\n\n\nfunction makeAssetDestroyTxnWithSuggestedParams(from, note, assetIndex, suggestedParams, rekeyTo = undefined) {\n  const o = {\n    from,\n    suggestedParams,\n    assetIndex,\n    type: 'acfg',\n    note,\n    reKeyTo: rekeyTo\n  };\n  return new txnBuilder.Transaction(o);\n}\n/** makeAssetDestroyTxn will allow the asset's manager to remove this asset from the ledger, so long\n * as all outstanding assets are held by the creator.\n *\n * @param from - string representation of Algorand address of sender\n * @param fee - integer fee per byte, in microAlgos. for a flat fee, overwrite the fee property on the returned object\n *  If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n * @param firstRound - integer first protocol round on which this txn is valid\n * @param lastRound - integer last protocol round on which this txn is valid\n * @param note - uint8array of arbitrary data for sender to store\n * @param genesisHash - string specifies hash genesis block of network in use\n * @param genesisID - string specifies genesis ID of network in use\n * @param assetIndex - int asset index uniquely specifying the asset\n * @param rekeyTo - rekeyTo address, optional\n * @Deprecated in version 2.0 this will change to use the \"WithSuggestedParams\" signature.\n * @returns {Transaction}\n */\n\n\nfunction makeAssetDestroyTxn(from, fee, firstRound, lastRound, note, genesisHash, genesisID, assetIndex, rekeyTo = undefined) {\n  const suggestedParams = {\n    genesisHash,\n    genesisID,\n    firstRound,\n    lastRound,\n    fee\n  };\n  return makeAssetDestroyTxnWithSuggestedParams(from, note, assetIndex, suggestedParams, rekeyTo);\n} // helper for above makeAssetDestroyTxnWithSuggestedParams, instead accepting an arguments object\n\n\nfunction makeAssetDestroyTxnWithSuggestedParamsFromObject(o) {\n  return makeAssetDestroyTxnWithSuggestedParams(o.from, o.note, o.assetIndex, o.suggestedParams, o.rekeyTo);\n}\n/** makeAssetFreezeTxnWithSuggestedParams will allow the asset's freeze manager to freeze or un-freeze an account,\n * blocking or allowing asset transfers to and from the targeted account.\n *\n * @param from - string representation of Algorand address of sender\n * @param note - uint8array of arbitrary data for sender to store\n * @param assetIndex - int asset index uniquely specifying the asset\n * @param freezeTarget - string representation of Algorand address being frozen or unfrozen\n * @param freezeState - true if freezeTarget should be frozen, false if freezeTarget should be allowed to transact\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *  If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param rekeyTo - rekeyTo address, optional\n * @returns {Transaction}\n */\n\n\nfunction makeAssetFreezeTxnWithSuggestedParams(from, note, assetIndex, freezeTarget, freezeState, suggestedParams, rekeyTo = undefined) {\n  const o = {\n    from,\n    type: 'afrz',\n    freezeAccount: freezeTarget,\n    assetIndex,\n    freezeState,\n    note,\n    suggestedParams,\n    reKeyTo: rekeyTo\n  };\n  return new txnBuilder.Transaction(o);\n}\n/** makeAssetFreezeTxn will allow the asset's freeze manager to freeze or un-freeze an account,\n * blocking or allowing asset transfers to and from the targeted account.\n *\n * @param from - string representation of Algorand address of sender\n * @param fee - integer fee per byte, in microAlgos. for a flat fee, overwrite the fee property on the returned object\n *  If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n * @param firstRound - integer first protocol round on which this txn is valid\n * @param lastRound - integer last protocol round on which this txn is valid\n * @param note - uint8array of arbitrary data for sender to store\n * @param genesisHash - string specifies hash genesis block of network in use\n * @param genesisID - string specifies genesis ID of network in use\n * @param assetIndex - int asset index uniquely specifying the asset\n * @param freezeTarget - string representation of Algorand address being frozen or unfrozen\n * @param freezeState - true if freezeTarget should be frozen, false if freezeTarget should be allowed to transact\n * @param rekeyTo - rekeyTo address, optional\n * @Deprecated in version 2.0 this will change to use the \"WithSuggestedParams\" signature.\n * @returns {Transaction}\n */\n\n\nfunction makeAssetFreezeTxn(from, fee, firstRound, lastRound, note, genesisHash, genesisID, assetIndex, freezeTarget, freezeState, rekeyTo = undefined) {\n  const suggestedParams = {\n    genesisHash,\n    genesisID,\n    firstRound,\n    lastRound,\n    fee\n  };\n  return makeAssetFreezeTxnWithSuggestedParams(from, note, assetIndex, freezeTarget, freezeState, suggestedParams, rekeyTo);\n} // helper for above makeAssetFreezeTxnWithSuggestedParams, instead accepting an arguments object\n\n\nfunction makeAssetFreezeTxnWithSuggestedParamsFromObject(o) {\n  return makeAssetFreezeTxnWithSuggestedParams(o.from, o.note, o.assetIndex, o.freezeTarget, o.freezeState, o.suggestedParams, o.rekeyTo);\n}\n/** makeAssetTransferTxnWithSuggestedParams allows for the creation of an asset transfer transaction.\n * Special case: to begin accepting assets, set amount=0 and from=to.\n *\n * @param from - string representation of Algorand address of sender\n * @param to - string representation of Algorand address of asset recipient\n * @param closeRemainderTo - optional - string representation of Algorand address - if provided,\n * send all remaining assets after transfer to the \"closeRemainderTo\" address and close \"from\"'s asset holdings\n * @param revocationTarget - optional - string representation of Algorand address - if provided,\n * and if \"from\" is the asset's revocation manager, then deduct from \"revocationTarget\" rather than \"from\"\n * @param amount - integer amount of assets to send\n * @param note - uint8array of arbitrary data for sender to store\n * @param assetIndex - int asset index uniquely specifying the asset\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *  If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param rekeyTo - rekeyTo address, optional\n * @returns {Transaction}\n */\n\n\nfunction makeAssetTransferTxnWithSuggestedParams(from, to, closeRemainderTo, revocationTarget, amount, note, assetIndex, suggestedParams, rekeyTo = undefined) {\n  const o = {\n    type: 'axfer',\n    from,\n    to,\n    amount,\n    suggestedParams,\n    assetIndex,\n    note,\n    assetRevocationTarget: revocationTarget,\n    closeRemainderTo,\n    reKeyTo: rekeyTo\n  };\n  return new txnBuilder.Transaction(o);\n}\n/** makeAssetTransferTxn allows for the creation of an asset transfer transaction.\n * Special case: to begin accepting assets, set amount=0 and from=to.\n *\n * @param from - string representation of Algorand address of sender\n * @param to - string representation of Algorand address of asset recipient\n * @param closeRemainderTo - optional - string representation of Algorand address - if provided,\n * send all remaining assets after transfer to the \"closeRemainderTo\" address and close \"from\"'s asset holdings\n * @param revocationTarget - optional - string representation of Algorand address - if provided,\n * and if \"from\" is the asset's revocation manager, then deduct from \"revocationTarget\" rather than \"from\"\n * @param fee - integer fee per byte, in microAlgos. for a flat fee, overwrite the fee property on the returned object\n *  If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n * @param amount - integer amount of assets to send\n * @param firstRound - integer first protocol round on which this txn is valid\n * @param lastRound - integer last protocol round on which this txn is valid\n * @param note - uint8array of arbitrary data for sender to store\n * @param genesisHash - string specifies hash genesis block of network in use\n * @param genesisID - string specifies genesis ID of network in use\n * @param assetIndex - int asset index uniquely specifying the asset\n * @param rekeyTo - rekeyTo address, optional\n * @Deprecated in version 2.0 this will change to use the \"WithSuggestedParams\" signature.\n * @returns {Transaction}\n */\n\n\nfunction makeAssetTransferTxn(from, to, closeRemainderTo, revocationTarget, fee, amount, firstRound, lastRound, note, genesisHash, genesisID, assetIndex, rekeyTo = undefined) {\n  const suggestedParams = {\n    genesisHash,\n    genesisID,\n    firstRound,\n    lastRound,\n    fee\n  };\n  return makeAssetTransferTxnWithSuggestedParams(from, to, closeRemainderTo, revocationTarget, amount, note, assetIndex, suggestedParams, rekeyTo);\n} // helper for above makeAssetTransferTxnWithSuggestedParams, instead accepting an arguments object\n\n\nfunction makeAssetTransferTxnWithSuggestedParamsFromObject(o) {\n  return makeAssetTransferTxnWithSuggestedParams(o.from, o.to, o.closeRemainderTo, o.revocationTarget, o.amount, o.note, o.assetIndex, o.suggestedParams, o.rekeyTo);\n}\n/*\n * Enums for application transactions on-transaction-complete behavior\n */\n\n\nconst OnApplicationComplete = {\n  // NoOpOC indicates that an application transaction will simply call its\n  // ApprovalProgram\n  NoOpOC: 0,\n  // OptInOC indicates that an application transaction will allocate some\n  // LocalState for the application in the sender's account\n  OptInOC: 1,\n  // CloseOutOC indicates that an application transaction will deallocate\n  // some LocalState for the application from the user's account\n  CloseOutOC: 2,\n  // ClearStateOC is similar to CloseOutOC, but may never fail. This\n  // allows users to reclaim their minimum balance from an application\n  // they no longer wish to opt in to.\n  ClearStateOC: 3,\n  // UpdateApplicationOC indicates that an application transaction will\n  // update the ApprovalProgram and ClearStateProgram for the application\n  UpdateApplicationOC: 4,\n  // DeleteApplicationOC indicates that an application transaction will\n  // delete the AppParams for the application from the creator's balance\n  // record\n  DeleteApplicationOC: 5\n};\n/**\n * Make a transaction that will create an application.\n * @param from - address of sender\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *  If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param onComplete - algosdk.OnApplicationComplete, what application should do once the program is done being run\n * @param approvalProgram - Uint8Array, the compiled TEAL that approves a transaction\n * @param clearProgram - Uint8Array, the compiled TEAL that runs when clearing state\n * @param numLocalInts - restricts number of ints in per-user local state\n * @param numLocalByteSlices - restricts number of byte slices in per-user local state\n * @param numGlobalInts - restricts number of ints in global state\n * @param numGlobalByteSlices - restricts number of byte slices in global state\n * @param appArgs, optional - Array of Uint8Array, any additional arguments to the application\n * @param accounts, optional - Array of Address strings, any additional accounts to supply to the application\n * @param foreignApps, optional - Array of int, any other apps used by the application, identified by index\n * @param foreignAssets, optional - Array of int, any assets used by the application, identified by index\n * @param note, optional\n * @param lease, optional\n * @param rekeyTo, optional\n */\n\nfunction makeApplicationCreateTxn(from, suggestedParams, onComplete, approvalProgram, clearProgram, numLocalInts, numLocalByteSlices, numGlobalInts, numGlobalByteSlices, appArgs = undefined, accounts = undefined, foreignApps = undefined, foreignAssets = undefined, note = undefined, lease = undefined, rekeyTo = undefined) {\n  const o = {\n    type: 'appl',\n    from,\n    suggestedParams,\n    appIndex: 0,\n    appOnComplete: onComplete,\n    appLocalInts: numLocalInts,\n    appLocalByteSlices: numLocalByteSlices,\n    appGlobalInts: numGlobalInts,\n    appGlobalByteSlices: numGlobalByteSlices,\n    appApprovalProgram: approvalProgram,\n    appClearProgram: clearProgram,\n    appArgs,\n    appAccounts: accounts,\n    appForeignApps: foreignApps,\n    appForeignAssets: foreignAssets,\n    note,\n    lease,\n    reKeyTo: rekeyTo\n  };\n  return new txnBuilder.Transaction(o);\n} // helper for above makeApplicationCreateTxn, instead accepting an arguments object\n\n\nfunction makeApplicationCreateTxnFromObject(o) {\n  return makeApplicationCreateTxn(o.from, o.suggestedParams, o.onComplete, o.approvalProgram, o.clearProgram, o.numLocalInts, o.numLocalByteSlices, o.numGlobalInts, o.numGlobalByteSlices, o.appArgs, o.accounts, o.foreignApps, o.foreignAssets, o.note, o.lease, o.rekeyTo);\n}\n/**\n * Make a transaction that changes an application's approval and clear programs\n * @param from - address of sender\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *  If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param appIndex - the ID of the app to be updated\n * @param approvalProgram - Uint8Array, the compiled TEAL that approves a transaction\n * @param clearProgram - Uint8Array, the compiled TEAL that runs when clearing state\n * @param appArgs, optional - Array of Uint8Array, any additional arguments to the application\n * @param accounts, optional - Array of Address strings, any additional accounts to supply to the application\n * @param foreignApps, optional - Array of int, any other apps used by the application, identified by index\n * @param foreignAssets, optional - Array of int, any assets used by the application, identified by index\n * @param note, optional\n * @param lease, optional\n * @param rekeyTo, optional\n */\n\n\nfunction makeApplicationUpdateTxn(from, suggestedParams, appIndex, approvalProgram, clearProgram, appArgs = undefined, accounts = undefined, foreignApps = undefined, foreignAssets = undefined, note = undefined, lease = undefined, rekeyTo = undefined) {\n  const o = {\n    type: 'appl',\n    from,\n    suggestedParams,\n    appIndex,\n    appApprovalProgram: approvalProgram,\n    appOnComplete: OnApplicationComplete.UpdateApplicationOC,\n    appClearProgram: clearProgram,\n    appArgs,\n    appAccounts: accounts,\n    appForeignApps: foreignApps,\n    appForeignAssets: foreignAssets,\n    note,\n    lease,\n    reKeyTo: rekeyTo\n  };\n  return new txnBuilder.Transaction(o);\n} // helper for above makeApplicationUpdateTxn, instead accepting an arguments object\n\n\nfunction makeApplicationUpdateTxnFromObject(o) {\n  return makeApplicationUpdateTxn(o.from, o.suggestedParams, o.appIndex, o.approvalProgram, o.clearProgram, o.appArgs, o.accounts, o.foreignApps, o.foreignAssets, o.note, o.lease, o.rekeyTo);\n}\n/**\n * Make a transaction that deletes an application\n * @param from - address of sender\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *  If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param appIndex - the ID of the app to be deleted\n * @param appArgs, optional - Array of Uint8Array, any additional arguments to the application\n * @param accounts, optional - Array of Address strings, any additional accounts to supply to the application\n * @param foreignApps, optional - Array of int, any other apps used by the application, identified by index\n * @param foreignAssets, optional - Array of int, any assets used by the application, identified by index\n * @param note, optional\n * @param lease, optional\n * @param rekeyTo, optional\n */\n\n\nfunction makeApplicationDeleteTxn(from, suggestedParams, appIndex, appArgs = undefined, accounts = undefined, foreignApps = undefined, foreignAssets = undefined, note = undefined, lease = undefined, rekeyTo = undefined) {\n  const o = {\n    type: 'appl',\n    from,\n    suggestedParams,\n    appIndex,\n    appOnComplete: OnApplicationComplete.DeleteApplicationOC,\n    appArgs,\n    appAccounts: accounts,\n    appForeignApps: foreignApps,\n    appForeignAssets: foreignAssets,\n    note,\n    lease,\n    reKeyTo: rekeyTo\n  };\n  return new txnBuilder.Transaction(o);\n} // helper for above makeApplicationDeleteTxn, instead accepting an arguments object\n\n\nfunction makeApplicationDeleteTxnFromObject(o) {\n  return makeApplicationDeleteTxn(o.from, o.suggestedParams, o.appIndex, o.appArgs, o.accounts, o.foreignApps, o.foreignAssets, o.note, o.lease, o.rekeyTo);\n}\n/**\n * Make a transaction that opts in to use an application\n * @param from - address of sender\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *  If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param appIndex - the ID of the app to join\n * @param appArgs, optional - Array of Uint8Array, any additional arguments to the application\n * @param accounts, optional - Array of Address strings, any additional accounts to supply to the application\n * @param foreignApps, optional - Array of int, any other apps used by the application, identified by index\n * @param foreignAssets, optional - Array of int, any assets used by the application, identified by index\n * @param note, optional\n * @param lease, optional\n * @param rekeyTo, optional\n */\n\n\nfunction makeApplicationOptInTxn(from, suggestedParams, appIndex, appArgs = undefined, accounts = undefined, foreignApps = undefined, foreignAssets = undefined, note = undefined, lease = undefined, rekeyTo = undefined) {\n  const o = {\n    type: 'appl',\n    from,\n    suggestedParams,\n    appIndex,\n    appOnComplete: OnApplicationComplete.OptInOC,\n    appArgs,\n    appAccounts: accounts,\n    appForeignApps: foreignApps,\n    appForeignAssets: foreignAssets,\n    note,\n    lease,\n    reKeyTo: rekeyTo\n  };\n  return new txnBuilder.Transaction(o);\n} // helper for above makeApplicationOptInTxn, instead accepting an argument object\n\n\nfunction makeApplicationOptInTxnFromObject(o) {\n  return makeApplicationOptInTxn(o.from, o.suggestedParams, o.appIndex, o.appArgs, o.accounts, o.foreignApps, o.foreignAssets, o.note, o.lease, o.rekeyTo);\n}\n/**\n * Make a transaction that closes out a user's state in an application\n * @param from - address of sender\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *  If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param appIndex - the ID of the app to use\n * @param appArgs, optional - Array of Uint8Array, any additional arguments to the application\n * @param accounts, optional - Array of Address strings, any additional accounts to supply to the application\n * @param foreignApps, optional - Array of int, any other apps used by the application, identified by index\n * @param foreignAssets, optional - Array of int, any assets used by the application, identified by index\n * @param note, optional\n * @param lease, optional\n * @param rekeyTo, optional\n */\n\n\nfunction makeApplicationCloseOutTxn(from, suggestedParams, appIndex, appArgs = undefined, accounts = undefined, foreignApps = undefined, foreignAssets = undefined, note = undefined, lease = undefined, rekeyTo = undefined) {\n  const o = {\n    type: 'appl',\n    from,\n    suggestedParams,\n    appIndex,\n    appOnComplete: OnApplicationComplete.CloseOutOC,\n    appArgs,\n    appAccounts: accounts,\n    appForeignApps: foreignApps,\n    appForeignAssets: foreignAssets,\n    note,\n    lease,\n    reKeyTo: rekeyTo\n  };\n  return new txnBuilder.Transaction(o);\n} // helper for above makeApplicationCloseOutTxn, instead accepting an argument object\n\n\nfunction makeApplicationCloseOutTxnFromObject(o) {\n  return makeApplicationCloseOutTxn(o.from, o.suggestedParams, o.appIndex, o.appArgs, o.accounts, o.foreignApps, o.foreignAssets, o.note, o.lease, o.rekeyTo);\n}\n/**\n * Make a transaction that clears a user's state in an application\n * @param from - address of sender\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *  If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param appIndex - the ID of the app to use\n * @param appArgs, optional - Array of Uint8Array, any additional arguments to the application\n * @param accounts, optional - Array of Address strings, any additional accounts to supply to the application\n * @param foreignApps, optional - Array of int, any other apps used by the application, identified by index\n * @param foreignAssets, optional - Array of int, any assets used by the application, identified by index\n * @param note, optional\n * @param lease, optional\n * @param rekeyTo, optional\n */\n\n\nfunction makeApplicationClearStateTxn(from, suggestedParams, appIndex, appArgs = undefined, accounts = undefined, foreignApps = undefined, foreignAssets = undefined, note = undefined, lease = undefined, rekeyTo = undefined) {\n  const o = {\n    type: 'appl',\n    from,\n    suggestedParams,\n    appIndex,\n    appOnComplete: OnApplicationComplete.ClearStateOC,\n    appArgs,\n    appAccounts: accounts,\n    appForeignApps: foreignApps,\n    appForeignAssets: foreignAssets,\n    note,\n    lease,\n    reKeyTo: rekeyTo\n  };\n  return new txnBuilder.Transaction(o);\n} // helper for above makeApplicationClearStateTxn, instead accepting an argument object\n\n\nfunction makeApplicationClearStateTxnFromObject(o) {\n  return makeApplicationClearStateTxn(o.from, o.suggestedParams, o.appIndex, o.appArgs, o.accounts, o.foreignApps, o.foreignAssets, o.note, o.lease, o.rekeyTo);\n}\n/**\n * Make a transaction that just calls an application, doing nothing on completion\n * @param from - address of sender\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *  If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param appIndex - the ID of the app to use\n * @param appArgs, optional - Array of Uint8Array, any additional arguments to the application\n * @param accounts, optional - Array of Address strings, any additional accounts to supply to the application\n * @param foreignApps, optional - Array of int, any other apps used by the application, identified by index\n * @param foreignAssets, optional - Array of int, any assets used by the application, identified by index\n * @param note, optional\n * @param lease, optional\n * @param rekeyTo, optional\n */\n\n\nfunction makeApplicationNoOpTxn(from, suggestedParams, appIndex, appArgs = undefined, accounts = undefined, foreignApps = undefined, foreignAssets = undefined, note = undefined, lease = undefined, rekeyTo = undefined) {\n  const o = {\n    type: 'appl',\n    from,\n    suggestedParams,\n    appIndex,\n    appOnComplete: OnApplicationComplete.NoOpOC,\n    appArgs,\n    appAccounts: accounts,\n    appForeignApps: foreignApps,\n    appForeignAssets: foreignAssets,\n    note,\n    lease,\n    reKeyTo: rekeyTo\n  };\n  return new txnBuilder.Transaction(o);\n} // helper for above makeApplicationNoOpTxn, instead accepting an argument object\n\n\nfunction makeApplicationNoOpTxnFromObject(o) {\n  return makeApplicationNoOpTxn(o.from, o.suggestedParams, o.appIndex, o.appArgs, o.accounts, o.foreignApps, o.foreignAssets, o.note, o.lease, o.rekeyTo);\n}\n\nmodule.exports = {\n  makePaymentTxn,\n  makePaymentTxnWithSuggestedParams,\n  makePaymentTxnWithSuggestedParamsFromObject,\n  makeKeyRegistrationTxn,\n  makeKeyRegistrationTxnWithSuggestedParams,\n  makeKeyRegistrationTxnWithSuggestedParamsFromObject,\n  makeAssetCreateTxn,\n  makeAssetCreateTxnWithSuggestedParams,\n  makeAssetCreateTxnWithSuggestedParamsFromObject,\n  makeAssetConfigTxn,\n  makeAssetConfigTxnWithSuggestedParams,\n  makeAssetConfigTxnWithSuggestedParamsFromObject,\n  makeAssetDestroyTxn,\n  makeAssetDestroyTxnWithSuggestedParams,\n  makeAssetDestroyTxnWithSuggestedParamsFromObject,\n  makeAssetFreezeTxn,\n  makeAssetFreezeTxnWithSuggestedParams,\n  makeAssetFreezeTxnWithSuggestedParamsFromObject,\n  makeAssetTransferTxn,\n  makeAssetTransferTxnWithSuggestedParams,\n  makeAssetTransferTxnWithSuggestedParamsFromObject,\n  OnApplicationComplete,\n  makeApplicationCreateTxn,\n  makeApplicationCreateTxnFromObject,\n  makeApplicationUpdateTxn,\n  makeApplicationUpdateTxnFromObject,\n  makeApplicationDeleteTxn,\n  makeApplicationDeleteTxnFromObject,\n  makeApplicationOptInTxn,\n  makeApplicationOptInTxnFromObject,\n  makeApplicationCloseOutTxn,\n  makeApplicationCloseOutTxnFromObject,\n  makeApplicationClearStateTxn,\n  makeApplicationClearStateTxnFromObject,\n  makeApplicationNoOpTxn,\n  makeApplicationNoOpTxnFromObject\n};","map":{"version":3,"sources":["/home/x/reach/kick/app/reach-react-template/node_modules/algosdk/src/makeTxn.js"],"names":["txnBuilder","require","makePaymentTxnWithSuggestedParams","from","to","amount","closeRemainderTo","note","suggestedParams","rekeyTo","undefined","o","type","reKeyTo","Transaction","makePaymentTxn","fee","firstRound","lastRound","genesisHash","genesisID","makePaymentTxnWithSuggestedParamsFromObject","makeKeyRegistrationTxnWithSuggestedParams","voteKey","selectionKey","voteFirst","voteLast","voteKeyDilution","nonParticipation","makeKeyRegistrationTxn","makeKeyRegistrationTxnWithSuggestedParamsFromObject","makeAssetCreateTxnWithSuggestedParams","total","decimals","defaultFrozen","manager","reserve","freeze","clawback","unitName","assetName","assetURL","assetMetadataHash","assetTotal","assetDecimals","assetDefaultFrozen","assetUnitName","assetManager","assetReserve","assetFreeze","assetClawback","makeAssetCreateTxn","makeAssetCreateTxnWithSuggestedParamsFromObject","makeAssetConfigTxnWithSuggestedParams","assetIndex","strictEmptyAddressChecking","Error","makeAssetConfigTxn","makeAssetConfigTxnWithSuggestedParamsFromObject","makeAssetDestroyTxnWithSuggestedParams","makeAssetDestroyTxn","makeAssetDestroyTxnWithSuggestedParamsFromObject","makeAssetFreezeTxnWithSuggestedParams","freezeTarget","freezeState","freezeAccount","makeAssetFreezeTxn","makeAssetFreezeTxnWithSuggestedParamsFromObject","makeAssetTransferTxnWithSuggestedParams","revocationTarget","assetRevocationTarget","makeAssetTransferTxn","makeAssetTransferTxnWithSuggestedParamsFromObject","OnApplicationComplete","NoOpOC","OptInOC","CloseOutOC","ClearStateOC","UpdateApplicationOC","DeleteApplicationOC","makeApplicationCreateTxn","onComplete","approvalProgram","clearProgram","numLocalInts","numLocalByteSlices","numGlobalInts","numGlobalByteSlices","appArgs","accounts","foreignApps","foreignAssets","lease","appIndex","appOnComplete","appLocalInts","appLocalByteSlices","appGlobalInts","appGlobalByteSlices","appApprovalProgram","appClearProgram","appAccounts","appForeignApps","appForeignAssets","makeApplicationCreateTxnFromObject","makeApplicationUpdateTxn","makeApplicationUpdateTxnFromObject","makeApplicationDeleteTxn","makeApplicationDeleteTxnFromObject","makeApplicationOptInTxn","makeApplicationOptInTxnFromObject","makeApplicationCloseOutTxn","makeApplicationCloseOutTxnFromObject","makeApplicationClearStateTxn","makeApplicationClearStateTxnFromObject","makeApplicationNoOpTxn","makeApplicationNoOpTxnFromObject","module","exports"],"mappings":"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","sourcesContent":["const txnBuilder = require('./transaction');\n\n/**\n * makePaymentTxnWithSuggestedParams takes payment arguments and returns a Transaction object\n * @param from - string representation of Algorand address of sender\n * @param to - string representation of Algorand address of recipient\n * @param amount - integer amount to send, in microAlgos\n * @param closeRemainderTo - optionally close out remaining account balance to this account, represented as string rep of Algorand address\n * @param note - uint8array of arbitrary data for sender to store\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *      If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param rekeyTo - rekeyTo address, optional\n * @returns {Transaction}\n */\nfunction makePaymentTxnWithSuggestedParams(\n  from,\n  to,\n  amount,\n  closeRemainderTo,\n  note,\n  suggestedParams,\n  rekeyTo = undefined\n) {\n  const o = {\n    from,\n    to,\n    amount,\n    closeRemainderTo,\n    note,\n    suggestedParams,\n    type: 'pay',\n    reKeyTo: rekeyTo,\n  };\n  return new txnBuilder.Transaction(o);\n}\n\n/**\n * makePaymentTxn takes payment arguments and returns a Transaction object\n * @param from - string representation of Algorand address of sender\n * @param to - string representation of Algorand address of recipient\n * @param fee - integer fee per byte, in microAlgos. for a flat fee, overwrite the fee property on the returned object\n * If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n * @param amount - integer amount to send, in microAlgos\n * @param closeRemainderTo - optionally close out remaining account balance to this account, represented as string rep of Algorand address\n * @param firstRound - integer first protocol round on which this txn is valid\n * @param lastRound - integer last protocol round on which this txn is valid\n * @param note - uint8array of arbitrary data for sender to store\n * @param genesisHash - string specifies hash genesis block of network in use\n * @param genesisID - string specifies genesis ID of network in use\n * @param rekeyTo - rekeyTo address, optional\n * @Deprecated in version 2.0 this will change to use the \"WithSuggestedParams\" signature.\n * @returns {Transaction}\n */\nfunction makePaymentTxn(\n  from,\n  to,\n  fee,\n  amount,\n  closeRemainderTo,\n  firstRound,\n  lastRound,\n  note,\n  genesisHash,\n  genesisID,\n  rekeyTo = undefined\n) {\n  const suggestedParams = {\n    genesisHash,\n    genesisID,\n    firstRound,\n    lastRound,\n    fee,\n  };\n  return makePaymentTxnWithSuggestedParams(\n    from,\n    to,\n    amount,\n    closeRemainderTo,\n    note,\n    suggestedParams,\n    rekeyTo\n  );\n}\n\n// helper for above makePaymentTxnWithSuggestedParams, instead accepting an arguments object\nfunction makePaymentTxnWithSuggestedParamsFromObject(o) {\n  return makePaymentTxnWithSuggestedParams(\n    o.from,\n    o.to,\n    o.amount,\n    o.closeRemainderTo,\n    o.note,\n    o.suggestedParams,\n    o.rekeyTo\n  );\n}\n\n/**\n * makeKeyRegistrationTxnWithSuggestedParams takes key registration arguments and returns a Transaction object for\n * that key registration operation\n *\n * @param from - string representation of Algorand address of sender\n * @param note - uint8array of arbitrary data for sender to store\n * @param voteKey - string representation of voting key. for key deregistration, leave undefined\n * @param selectionKey - string representation of selection key. for key deregistration, leave undefined\n * @param voteFirst - first round on which voteKey is valid\n * @param voteLast - last round on which voteKey is valid\n * @param voteKeyDilution - integer\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *  If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param rekeyTo - rekeyTo address, optional\n * @param nonParticipation - configure whether the address wants to stop participating. If true,\n *   voteKey, selectionKey, voteFirst, voteLast, and voteKeyDilution must be undefined.\n * @returns {Transaction}\n */\nfunction makeKeyRegistrationTxnWithSuggestedParams(\n  from,\n  note,\n  voteKey,\n  selectionKey,\n  voteFirst,\n  voteLast,\n  voteKeyDilution,\n  suggestedParams,\n  rekeyTo = undefined,\n  nonParticipation = false\n) {\n  const o = {\n    from,\n    note,\n    voteKey,\n    selectionKey,\n    voteFirst,\n    voteLast,\n    voteKeyDilution,\n    suggestedParams,\n    type: 'keyreg',\n    reKeyTo: rekeyTo,\n    nonParticipation,\n  };\n  return new txnBuilder.Transaction(o);\n}\n\n/**\n * makeKeyRegistrationTxn takes key registration arguments and returns a Transaction object for\n * that key registration operation\n *\n * @param from - string representation of Algorand address of sender\n * @param fee - integer fee per byte, in microAlgos. for a flat fee, overwrite the fee property on the returned object\n *  If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n * @param firstRound - integer first protocol round on which this txn is valid\n * @param lastRound - integer last protocol round on which this txn is valid\n * @param note - uint8array of arbitrary data for sender to store\n * @param genesisHash - string specifies hash genesis block of network in use\n * @param genesisID - string specifies genesis ID of network in use\n * @param voteKey - string representation of voting key. for key deregistration, leave undefined\n * @param selectionKey - string representation of selection key. for key deregistration, leave undefined\n * @param voteFirst - first round on which voteKey is valid\n * @param voteLast - last round on which voteKey is valid\n * @param voteKeyDilution - integer\n * @param rekeyTo - rekeyTo address, optional\n * @param nonParticipation - configure whether the address wants to stop participating. If true,\n *   voteKey, selectionKey, voteFirst, voteLast, and voteKeyDilution must be undefined.\n * @Deprecated in version 2.0 this will change to use the \"WithSuggestedParams\" signature.\n * @returns {Transaction}\n */\nfunction makeKeyRegistrationTxn(\n  from,\n  fee,\n  firstRound,\n  lastRound,\n  note,\n  genesisHash,\n  genesisID,\n  voteKey,\n  selectionKey,\n  voteFirst,\n  voteLast,\n  voteKeyDilution,\n  rekeyTo = undefined,\n  nonParticipation = false\n) {\n  const suggestedParams = {\n    genesisHash,\n    genesisID,\n    firstRound,\n    lastRound,\n    fee,\n  };\n  return makeKeyRegistrationTxnWithSuggestedParams(\n    from,\n    note,\n    voteKey,\n    selectionKey,\n    voteFirst,\n    voteLast,\n    voteKeyDilution,\n    suggestedParams,\n    rekeyTo,\n    nonParticipation\n  );\n}\n\n// helper for above makeKeyRegistrationTxnWithSuggestedParams, instead accepting an arguments object\nfunction makeKeyRegistrationTxnWithSuggestedParamsFromObject(o) {\n  return makeKeyRegistrationTxnWithSuggestedParams(\n    o.from,\n    o.note,\n    o.voteKey,\n    o.selectionKey,\n    o.voteFirst,\n    o.voteLast,\n    o.voteKeyDilution,\n    o.suggestedParams,\n    o.rekeyTo,\n    o.nonParticipation\n  );\n}\n\n/** makeAssetCreateTxnWithSuggestedParams takes asset creation arguments and returns a Transaction object\n * for creating that asset\n *\n * @param from - string representation of Algorand address of sender\n * @param note - uint8array of arbitrary data for sender to store\n * @param total - integer total supply of the asset\n * @param decimals - integer number of decimals for asset unit calculation\n * @param defaultFrozen - boolean whether asset accounts should default to being frozen\n * @param manager - string representation of Algorand address in charge of reserve, freeze, clawback, destruction, etc\n * @param reserve - string representation of Algorand address representing asset reserve\n * @param freeze - string representation of Algorand address with power to freeze/unfreeze asset holdings\n * @param clawback - string representation of Algorand address with power to revoke asset holdings\n * @param unitName - string units name for this asset\n * @param assetName - string name for this asset\n * @param assetURL - string URL relating to this asset\n * @param assetMetadataHash - Uint8Array or UTF-8 string representation of a hash commitment with respect to the asset. Must be exactly 32 bytes long.\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *  If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param rekeyTo - rekeyTo address, optional\n * @returns {Transaction}\n */\nfunction makeAssetCreateTxnWithSuggestedParams(\n  from,\n  note,\n  total,\n  decimals,\n  defaultFrozen,\n  manager,\n  reserve,\n  freeze,\n  clawback,\n  unitName,\n  assetName,\n  assetURL,\n  assetMetadataHash,\n  suggestedParams,\n  rekeyTo = undefined\n) {\n  const o = {\n    from,\n    note,\n    suggestedParams,\n    assetTotal: total,\n    assetDecimals: decimals,\n    assetDefaultFrozen: defaultFrozen,\n    assetUnitName: unitName,\n    assetName,\n    assetURL,\n    assetMetadataHash,\n    assetManager: manager,\n    assetReserve: reserve,\n    assetFreeze: freeze,\n    assetClawback: clawback,\n    type: 'acfg',\n    reKeyTo: rekeyTo,\n  };\n  return new txnBuilder.Transaction(o);\n}\n\n/** makeAssetCreateTxn takes asset creation arguments and returns a Transaction object\n * for creating that asset\n *\n * @param from - string representation of Algorand address of sender\n * @param fee - integer fee per byte, in microAlgos. for a flat fee, overwrite the fee property on the returned object\n *  If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n * @param firstRound - integer first protocol round on which this txn is valid\n * @param lastRound - integer last protocol round on which this txn is valid\n * @param note - uint8array of arbitrary data for sender to store\n * @param genesisHash - string specifies hash genesis block of network in use\n * @param genesisID - string specifies genesis ID of network in use\n * @param total - integer total supply of the asset\n * @param decimals - integer number of decimals for asset unit calculation\n * @param defaultFrozen - boolean whether asset accounts should default to being frozen\n * @param manager - string representation of Algorand address in charge of reserve, freeze, clawback, destruction, etc\n * @param reserve - string representation of Algorand address representing asset reserve\n * @param freeze - string representation of Algorand address with power to freeze/unfreeze asset holdings\n * @param clawback - string representation of Algorand address with power to revoke asset holdings\n * @param unitName - string units name for this asset\n * @param assetName - string name for this asset\n * @param assetURL - string URL relating to this asset\n * @param assetMetadataHash - Uint8Array or UTF-8 string representation of a hash commitment with respect to the asset. Must be exactly 32 bytes long.\n * @param rekeyTo - rekeyTo address, optional\n * @Deprecated in version 2.0 this will change to use the \"WithSuggestedParams\" signature.\n * @returns {Transaction}\n */\nfunction makeAssetCreateTxn(\n  from,\n  fee,\n  firstRound,\n  lastRound,\n  note,\n  genesisHash,\n  genesisID,\n  total,\n  decimals,\n  defaultFrozen,\n  manager,\n  reserve,\n  freeze,\n  clawback,\n  unitName,\n  assetName,\n  assetURL,\n  assetMetadataHash,\n  rekeyTo = undefined\n) {\n  const suggestedParams = {\n    genesisHash,\n    genesisID,\n    firstRound,\n    lastRound,\n    fee,\n  };\n  return makeAssetCreateTxnWithSuggestedParams(\n    from,\n    note,\n    total,\n    decimals,\n    defaultFrozen,\n    manager,\n    reserve,\n    freeze,\n    clawback,\n    unitName,\n    assetName,\n    assetURL,\n    assetMetadataHash,\n    suggestedParams,\n    rekeyTo\n  );\n}\n\n// helper for above makeAssetCreateTxnWithSuggestedParams, instead accepting an arguments object\nfunction makeAssetCreateTxnWithSuggestedParamsFromObject(o) {\n  return makeAssetCreateTxnWithSuggestedParams(\n    o.from,\n    o.note,\n    o.total,\n    o.decimals,\n    o.defaultFrozen,\n    o.manager,\n    o.reserve,\n    o.freeze,\n    o.clawback,\n    o.unitName,\n    o.assetName,\n    o.assetURL,\n    o.assetMetadataHash,\n    o.suggestedParams,\n    o.rekeyTo\n  );\n}\n\n/** makeAssetConfigTxnWithSuggestedParams can be issued by the asset manager to change the manager, reserve, freeze, or clawback\n * you must respecify existing addresses to keep them the same; leaving a field blank is the same as turning\n * that feature off for this asset\n *\n * @param from - string representation of Algorand address of sender\n * @param note - uint8array of arbitrary data for sender to store\n * @param assetIndex - int asset index uniquely specifying the asset\n * @param manager - string representation of new asset manager Algorand address\n * @param reserve - string representation of new reserve Algorand address\n * @param freeze - string representation of new freeze manager Algorand address\n * @param clawback - string representation of new revocation manager Algorand address\n * @param strictEmptyAddressChecking - boolean - throw an error if any of manager, reserve, freeze, or clawback are undefined. optional, defaults to true.\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *  If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param rekeyTo - rekeyTo address, optional\n * @returns {Transaction}\n */\nfunction makeAssetConfigTxnWithSuggestedParams(\n  from,\n  note,\n  assetIndex,\n  manager,\n  reserve,\n  freeze,\n  clawback,\n  suggestedParams,\n  strictEmptyAddressChecking = true,\n  rekeyTo = undefined\n) {\n  if (\n    strictEmptyAddressChecking &&\n    (manager === undefined ||\n      reserve === undefined ||\n      freeze === undefined ||\n      clawback === undefined)\n  ) {\n    throw Error(\n      'strict empty address checking was turned on, but at least one empty address was provided'\n    );\n  }\n  const o = {\n    from,\n    suggestedParams,\n    assetIndex,\n    assetManager: manager,\n    assetReserve: reserve,\n    assetFreeze: freeze,\n    assetClawback: clawback,\n    type: 'acfg',\n    note,\n    reKeyTo: rekeyTo,\n  };\n  return new txnBuilder.Transaction(o);\n}\n\n/** makeAssetConfigTxn can be issued by the asset manager to change the manager, reserve, freeze, or clawback\n * you must respecify existing addresses to keep them the same; leaving a field blank is the same as turning\n * that feature off for this asset\n *\n * @param from - string representation of Algorand address of sender\n * @param fee - integer fee per byte, in microAlgos. for a flat fee, overwrite the fee property on the returned object\n *  If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n * @param firstRound - integer first protocol round on which this txn is valid\n * @param lastRound - integer last protocol round on which this txn is valid\n * @param note - uint8array of arbitrary data for sender to store\n * @param genesisHash - string specifies hash genesis block of network in use\n * @param genesisID - string specifies genesis ID of network in use\n * @param assetIndex - int asset index uniquely specifying the asset\n * @param manager - string representation of new asset manager Algorand address\n * @param reserve - string representation of new reserve Algorand address\n * @param freeze - string representation of new freeze manager Algorand address\n * @param clawback - string representation of new revocation manager Algorand address\n * @param strictEmptyAddressChecking - boolean - throw an error if any of manager, reserve, freeze, or clawback are undefined. optional, defaults to true.\n * @param rekeyTo - rekeyTo address, optional\n * @Deprecated in version 2.0 this will change to use the \"WithSuggestedParams\" signature.\n * @returns {Transaction}\n */\nfunction makeAssetConfigTxn(\n  from,\n  fee,\n  firstRound,\n  lastRound,\n  note,\n  genesisHash,\n  genesisID,\n  assetIndex,\n  manager,\n  reserve,\n  freeze,\n  clawback,\n  strictEmptyAddressChecking = true,\n  rekeyTo = undefined\n) {\n  const suggestedParams = {\n    genesisHash,\n    genesisID,\n    firstRound,\n    lastRound,\n    fee,\n  };\n  return makeAssetConfigTxnWithSuggestedParams(\n    from,\n    note,\n    assetIndex,\n    manager,\n    reserve,\n    freeze,\n    clawback,\n    suggestedParams,\n    strictEmptyAddressChecking,\n    rekeyTo\n  );\n}\n\n// helper for above makeAssetConfigTxnWithSuggestedParams, instead accepting an arguments object\nfunction makeAssetConfigTxnWithSuggestedParamsFromObject(o) {\n  return makeAssetConfigTxnWithSuggestedParams(\n    o.from,\n    o.note,\n    o.assetIndex,\n    o.manager,\n    o.reserve,\n    o.freeze,\n    o.clawback,\n    o.suggestedParams,\n    o.strictEmptyAddressChecking,\n    o.rekeyTo\n  );\n}\n\n/** makeAssetDestroyTxnWithSuggestedParams will allow the asset's manager to remove this asset from the ledger, so long\n * as all outstanding assets are held by the creator.\n *\n * @param from - string representation of Algorand address of sender\n * @param note - uint8array of arbitrary data for sender to store\n * @param assetIndex - int asset index uniquely specifying the asset\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *  If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param rekeyTo - rekeyTo address, optional\n * @returns {Transaction}\n */\nfunction makeAssetDestroyTxnWithSuggestedParams(\n  from,\n  note,\n  assetIndex,\n  suggestedParams,\n  rekeyTo = undefined\n) {\n  const o = {\n    from,\n    suggestedParams,\n    assetIndex,\n    type: 'acfg',\n    note,\n    reKeyTo: rekeyTo,\n  };\n  return new txnBuilder.Transaction(o);\n}\n\n/** makeAssetDestroyTxn will allow the asset's manager to remove this asset from the ledger, so long\n * as all outstanding assets are held by the creator.\n *\n * @param from - string representation of Algorand address of sender\n * @param fee - integer fee per byte, in microAlgos. for a flat fee, overwrite the fee property on the returned object\n *  If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n * @param firstRound - integer first protocol round on which this txn is valid\n * @param lastRound - integer last protocol round on which this txn is valid\n * @param note - uint8array of arbitrary data for sender to store\n * @param genesisHash - string specifies hash genesis block of network in use\n * @param genesisID - string specifies genesis ID of network in use\n * @param assetIndex - int asset index uniquely specifying the asset\n * @param rekeyTo - rekeyTo address, optional\n * @Deprecated in version 2.0 this will change to use the \"WithSuggestedParams\" signature.\n * @returns {Transaction}\n */\nfunction makeAssetDestroyTxn(\n  from,\n  fee,\n  firstRound,\n  lastRound,\n  note,\n  genesisHash,\n  genesisID,\n  assetIndex,\n  rekeyTo = undefined\n) {\n  const suggestedParams = {\n    genesisHash,\n    genesisID,\n    firstRound,\n    lastRound,\n    fee,\n  };\n  return makeAssetDestroyTxnWithSuggestedParams(\n    from,\n    note,\n    assetIndex,\n    suggestedParams,\n    rekeyTo\n  );\n}\n\n// helper for above makeAssetDestroyTxnWithSuggestedParams, instead accepting an arguments object\nfunction makeAssetDestroyTxnWithSuggestedParamsFromObject(o) {\n  return makeAssetDestroyTxnWithSuggestedParams(\n    o.from,\n    o.note,\n    o.assetIndex,\n    o.suggestedParams,\n    o.rekeyTo\n  );\n}\n\n/** makeAssetFreezeTxnWithSuggestedParams will allow the asset's freeze manager to freeze or un-freeze an account,\n * blocking or allowing asset transfers to and from the targeted account.\n *\n * @param from - string representation of Algorand address of sender\n * @param note - uint8array of arbitrary data for sender to store\n * @param assetIndex - int asset index uniquely specifying the asset\n * @param freezeTarget - string representation of Algorand address being frozen or unfrozen\n * @param freezeState - true if freezeTarget should be frozen, false if freezeTarget should be allowed to transact\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *  If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param rekeyTo - rekeyTo address, optional\n * @returns {Transaction}\n */\nfunction makeAssetFreezeTxnWithSuggestedParams(\n  from,\n  note,\n  assetIndex,\n  freezeTarget,\n  freezeState,\n  suggestedParams,\n  rekeyTo = undefined\n) {\n  const o = {\n    from,\n    type: 'afrz',\n    freezeAccount: freezeTarget,\n    assetIndex,\n    freezeState,\n    note,\n    suggestedParams,\n    reKeyTo: rekeyTo,\n  };\n  return new txnBuilder.Transaction(o);\n}\n\n/** makeAssetFreezeTxn will allow the asset's freeze manager to freeze or un-freeze an account,\n * blocking or allowing asset transfers to and from the targeted account.\n *\n * @param from - string representation of Algorand address of sender\n * @param fee - integer fee per byte, in microAlgos. for a flat fee, overwrite the fee property on the returned object\n *  If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n * @param firstRound - integer first protocol round on which this txn is valid\n * @param lastRound - integer last protocol round on which this txn is valid\n * @param note - uint8array of arbitrary data for sender to store\n * @param genesisHash - string specifies hash genesis block of network in use\n * @param genesisID - string specifies genesis ID of network in use\n * @param assetIndex - int asset index uniquely specifying the asset\n * @param freezeTarget - string representation of Algorand address being frozen or unfrozen\n * @param freezeState - true if freezeTarget should be frozen, false if freezeTarget should be allowed to transact\n * @param rekeyTo - rekeyTo address, optional\n * @Deprecated in version 2.0 this will change to use the \"WithSuggestedParams\" signature.\n * @returns {Transaction}\n */\nfunction makeAssetFreezeTxn(\n  from,\n  fee,\n  firstRound,\n  lastRound,\n  note,\n  genesisHash,\n  genesisID,\n  assetIndex,\n  freezeTarget,\n  freezeState,\n  rekeyTo = undefined\n) {\n  const suggestedParams = {\n    genesisHash,\n    genesisID,\n    firstRound,\n    lastRound,\n    fee,\n  };\n  return makeAssetFreezeTxnWithSuggestedParams(\n    from,\n    note,\n    assetIndex,\n    freezeTarget,\n    freezeState,\n    suggestedParams,\n    rekeyTo\n  );\n}\n\n// helper for above makeAssetFreezeTxnWithSuggestedParams, instead accepting an arguments object\nfunction makeAssetFreezeTxnWithSuggestedParamsFromObject(o) {\n  return makeAssetFreezeTxnWithSuggestedParams(\n    o.from,\n    o.note,\n    o.assetIndex,\n    o.freezeTarget,\n    o.freezeState,\n    o.suggestedParams,\n    o.rekeyTo\n  );\n}\n\n/** makeAssetTransferTxnWithSuggestedParams allows for the creation of an asset transfer transaction.\n * Special case: to begin accepting assets, set amount=0 and from=to.\n *\n * @param from - string representation of Algorand address of sender\n * @param to - string representation of Algorand address of asset recipient\n * @param closeRemainderTo - optional - string representation of Algorand address - if provided,\n * send all remaining assets after transfer to the \"closeRemainderTo\" address and close \"from\"'s asset holdings\n * @param revocationTarget - optional - string representation of Algorand address - if provided,\n * and if \"from\" is the asset's revocation manager, then deduct from \"revocationTarget\" rather than \"from\"\n * @param amount - integer amount of assets to send\n * @param note - uint8array of arbitrary data for sender to store\n * @param assetIndex - int asset index uniquely specifying the asset\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *  If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param rekeyTo - rekeyTo address, optional\n * @returns {Transaction}\n */\nfunction makeAssetTransferTxnWithSuggestedParams(\n  from,\n  to,\n  closeRemainderTo,\n  revocationTarget,\n  amount,\n  note,\n  assetIndex,\n  suggestedParams,\n  rekeyTo = undefined\n) {\n  const o = {\n    type: 'axfer',\n    from,\n    to,\n    amount,\n    suggestedParams,\n    assetIndex,\n    note,\n    assetRevocationTarget: revocationTarget,\n    closeRemainderTo,\n    reKeyTo: rekeyTo,\n  };\n  return new txnBuilder.Transaction(o);\n}\n\n/** makeAssetTransferTxn allows for the creation of an asset transfer transaction.\n * Special case: to begin accepting assets, set amount=0 and from=to.\n *\n * @param from - string representation of Algorand address of sender\n * @param to - string representation of Algorand address of asset recipient\n * @param closeRemainderTo - optional - string representation of Algorand address - if provided,\n * send all remaining assets after transfer to the \"closeRemainderTo\" address and close \"from\"'s asset holdings\n * @param revocationTarget - optional - string representation of Algorand address - if provided,\n * and if \"from\" is the asset's revocation manager, then deduct from \"revocationTarget\" rather than \"from\"\n * @param fee - integer fee per byte, in microAlgos. for a flat fee, overwrite the fee property on the returned object\n *  If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n * @param amount - integer amount of assets to send\n * @param firstRound - integer first protocol round on which this txn is valid\n * @param lastRound - integer last protocol round on which this txn is valid\n * @param note - uint8array of arbitrary data for sender to store\n * @param genesisHash - string specifies hash genesis block of network in use\n * @param genesisID - string specifies genesis ID of network in use\n * @param assetIndex - int asset index uniquely specifying the asset\n * @param rekeyTo - rekeyTo address, optional\n * @Deprecated in version 2.0 this will change to use the \"WithSuggestedParams\" signature.\n * @returns {Transaction}\n */\nfunction makeAssetTransferTxn(\n  from,\n  to,\n  closeRemainderTo,\n  revocationTarget,\n  fee,\n  amount,\n  firstRound,\n  lastRound,\n  note,\n  genesisHash,\n  genesisID,\n  assetIndex,\n  rekeyTo = undefined\n) {\n  const suggestedParams = {\n    genesisHash,\n    genesisID,\n    firstRound,\n    lastRound,\n    fee,\n  };\n  return makeAssetTransferTxnWithSuggestedParams(\n    from,\n    to,\n    closeRemainderTo,\n    revocationTarget,\n    amount,\n    note,\n    assetIndex,\n    suggestedParams,\n    rekeyTo\n  );\n}\n\n// helper for above makeAssetTransferTxnWithSuggestedParams, instead accepting an arguments object\nfunction makeAssetTransferTxnWithSuggestedParamsFromObject(o) {\n  return makeAssetTransferTxnWithSuggestedParams(\n    o.from,\n    o.to,\n    o.closeRemainderTo,\n    o.revocationTarget,\n    o.amount,\n    o.note,\n    o.assetIndex,\n    o.suggestedParams,\n    o.rekeyTo\n  );\n}\n\n/*\n * Enums for application transactions on-transaction-complete behavior\n */\nconst OnApplicationComplete = {\n  // NoOpOC indicates that an application transaction will simply call its\n  // ApprovalProgram\n  NoOpOC: 0,\n  // OptInOC indicates that an application transaction will allocate some\n  // LocalState for the application in the sender's account\n  OptInOC: 1,\n  // CloseOutOC indicates that an application transaction will deallocate\n  // some LocalState for the application from the user's account\n  CloseOutOC: 2,\n  // ClearStateOC is similar to CloseOutOC, but may never fail. This\n  // allows users to reclaim their minimum balance from an application\n  // they no longer wish to opt in to.\n  ClearStateOC: 3,\n  // UpdateApplicationOC indicates that an application transaction will\n  // update the ApprovalProgram and ClearStateProgram for the application\n  UpdateApplicationOC: 4,\n  // DeleteApplicationOC indicates that an application transaction will\n  // delete the AppParams for the application from the creator's balance\n  // record\n  DeleteApplicationOC: 5,\n};\n\n/**\n * Make a transaction that will create an application.\n * @param from - address of sender\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *  If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param onComplete - algosdk.OnApplicationComplete, what application should do once the program is done being run\n * @param approvalProgram - Uint8Array, the compiled TEAL that approves a transaction\n * @param clearProgram - Uint8Array, the compiled TEAL that runs when clearing state\n * @param numLocalInts - restricts number of ints in per-user local state\n * @param numLocalByteSlices - restricts number of byte slices in per-user local state\n * @param numGlobalInts - restricts number of ints in global state\n * @param numGlobalByteSlices - restricts number of byte slices in global state\n * @param appArgs, optional - Array of Uint8Array, any additional arguments to the application\n * @param accounts, optional - Array of Address strings, any additional accounts to supply to the application\n * @param foreignApps, optional - Array of int, any other apps used by the application, identified by index\n * @param foreignAssets, optional - Array of int, any assets used by the application, identified by index\n * @param note, optional\n * @param lease, optional\n * @param rekeyTo, optional\n */\nfunction makeApplicationCreateTxn(\n  from,\n  suggestedParams,\n  onComplete,\n  approvalProgram,\n  clearProgram,\n  numLocalInts,\n  numLocalByteSlices,\n  numGlobalInts,\n  numGlobalByteSlices,\n  appArgs = undefined,\n  accounts = undefined,\n  foreignApps = undefined,\n  foreignAssets = undefined,\n  note = undefined,\n  lease = undefined,\n  rekeyTo = undefined\n) {\n  const o = {\n    type: 'appl',\n    from,\n    suggestedParams,\n    appIndex: 0,\n    appOnComplete: onComplete,\n    appLocalInts: numLocalInts,\n    appLocalByteSlices: numLocalByteSlices,\n    appGlobalInts: numGlobalInts,\n    appGlobalByteSlices: numGlobalByteSlices,\n    appApprovalProgram: approvalProgram,\n    appClearProgram: clearProgram,\n    appArgs,\n    appAccounts: accounts,\n    appForeignApps: foreignApps,\n    appForeignAssets: foreignAssets,\n    note,\n    lease,\n    reKeyTo: rekeyTo,\n  };\n  return new txnBuilder.Transaction(o);\n}\n\n// helper for above makeApplicationCreateTxn, instead accepting an arguments object\nfunction makeApplicationCreateTxnFromObject(o) {\n  return makeApplicationCreateTxn(\n    o.from,\n    o.suggestedParams,\n    o.onComplete,\n    o.approvalProgram,\n    o.clearProgram,\n    o.numLocalInts,\n    o.numLocalByteSlices,\n    o.numGlobalInts,\n    o.numGlobalByteSlices,\n    o.appArgs,\n    o.accounts,\n    o.foreignApps,\n    o.foreignAssets,\n    o.note,\n    o.lease,\n    o.rekeyTo\n  );\n}\n\n/**\n * Make a transaction that changes an application's approval and clear programs\n * @param from - address of sender\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *  If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param appIndex - the ID of the app to be updated\n * @param approvalProgram - Uint8Array, the compiled TEAL that approves a transaction\n * @param clearProgram - Uint8Array, the compiled TEAL that runs when clearing state\n * @param appArgs, optional - Array of Uint8Array, any additional arguments to the application\n * @param accounts, optional - Array of Address strings, any additional accounts to supply to the application\n * @param foreignApps, optional - Array of int, any other apps used by the application, identified by index\n * @param foreignAssets, optional - Array of int, any assets used by the application, identified by index\n * @param note, optional\n * @param lease, optional\n * @param rekeyTo, optional\n */\nfunction makeApplicationUpdateTxn(\n  from,\n  suggestedParams,\n  appIndex,\n  approvalProgram,\n  clearProgram,\n  appArgs = undefined,\n  accounts = undefined,\n  foreignApps = undefined,\n  foreignAssets = undefined,\n  note = undefined,\n  lease = undefined,\n  rekeyTo = undefined\n) {\n  const o = {\n    type: 'appl',\n    from,\n    suggestedParams,\n    appIndex,\n    appApprovalProgram: approvalProgram,\n    appOnComplete: OnApplicationComplete.UpdateApplicationOC,\n    appClearProgram: clearProgram,\n    appArgs,\n    appAccounts: accounts,\n    appForeignApps: foreignApps,\n    appForeignAssets: foreignAssets,\n    note,\n    lease,\n    reKeyTo: rekeyTo,\n  };\n  return new txnBuilder.Transaction(o);\n}\n\n// helper for above makeApplicationUpdateTxn, instead accepting an arguments object\nfunction makeApplicationUpdateTxnFromObject(o) {\n  return makeApplicationUpdateTxn(\n    o.from,\n    o.suggestedParams,\n    o.appIndex,\n    o.approvalProgram,\n    o.clearProgram,\n    o.appArgs,\n    o.accounts,\n    o.foreignApps,\n    o.foreignAssets,\n    o.note,\n    o.lease,\n    o.rekeyTo\n  );\n}\n\n/**\n * Make a transaction that deletes an application\n * @param from - address of sender\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *  If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param appIndex - the ID of the app to be deleted\n * @param appArgs, optional - Array of Uint8Array, any additional arguments to the application\n * @param accounts, optional - Array of Address strings, any additional accounts to supply to the application\n * @param foreignApps, optional - Array of int, any other apps used by the application, identified by index\n * @param foreignAssets, optional - Array of int, any assets used by the application, identified by index\n * @param note, optional\n * @param lease, optional\n * @param rekeyTo, optional\n */\nfunction makeApplicationDeleteTxn(\n  from,\n  suggestedParams,\n  appIndex,\n  appArgs = undefined,\n  accounts = undefined,\n  foreignApps = undefined,\n  foreignAssets = undefined,\n  note = undefined,\n  lease = undefined,\n  rekeyTo = undefined\n) {\n  const o = {\n    type: 'appl',\n    from,\n    suggestedParams,\n    appIndex,\n    appOnComplete: OnApplicationComplete.DeleteApplicationOC,\n    appArgs,\n    appAccounts: accounts,\n    appForeignApps: foreignApps,\n    appForeignAssets: foreignAssets,\n    note,\n    lease,\n    reKeyTo: rekeyTo,\n  };\n  return new txnBuilder.Transaction(o);\n}\n\n// helper for above makeApplicationDeleteTxn, instead accepting an arguments object\nfunction makeApplicationDeleteTxnFromObject(o) {\n  return makeApplicationDeleteTxn(\n    o.from,\n    o.suggestedParams,\n    o.appIndex,\n    o.appArgs,\n    o.accounts,\n    o.foreignApps,\n    o.foreignAssets,\n    o.note,\n    o.lease,\n    o.rekeyTo\n  );\n}\n\n/**\n * Make a transaction that opts in to use an application\n * @param from - address of sender\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *  If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param appIndex - the ID of the app to join\n * @param appArgs, optional - Array of Uint8Array, any additional arguments to the application\n * @param accounts, optional - Array of Address strings, any additional accounts to supply to the application\n * @param foreignApps, optional - Array of int, any other apps used by the application, identified by index\n * @param foreignAssets, optional - Array of int, any assets used by the application, identified by index\n * @param note, optional\n * @param lease, optional\n * @param rekeyTo, optional\n */\nfunction makeApplicationOptInTxn(\n  from,\n  suggestedParams,\n  appIndex,\n  appArgs = undefined,\n  accounts = undefined,\n  foreignApps = undefined,\n  foreignAssets = undefined,\n  note = undefined,\n  lease = undefined,\n  rekeyTo = undefined\n) {\n  const o = {\n    type: 'appl',\n    from,\n    suggestedParams,\n    appIndex,\n    appOnComplete: OnApplicationComplete.OptInOC,\n    appArgs,\n    appAccounts: accounts,\n    appForeignApps: foreignApps,\n    appForeignAssets: foreignAssets,\n    note,\n    lease,\n    reKeyTo: rekeyTo,\n  };\n  return new txnBuilder.Transaction(o);\n}\n\n// helper for above makeApplicationOptInTxn, instead accepting an argument object\nfunction makeApplicationOptInTxnFromObject(o) {\n  return makeApplicationOptInTxn(\n    o.from,\n    o.suggestedParams,\n    o.appIndex,\n    o.appArgs,\n    o.accounts,\n    o.foreignApps,\n    o.foreignAssets,\n    o.note,\n    o.lease,\n    o.rekeyTo\n  );\n}\n\n/**\n * Make a transaction that closes out a user's state in an application\n * @param from - address of sender\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *  If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param appIndex - the ID of the app to use\n * @param appArgs, optional - Array of Uint8Array, any additional arguments to the application\n * @param accounts, optional - Array of Address strings, any additional accounts to supply to the application\n * @param foreignApps, optional - Array of int, any other apps used by the application, identified by index\n * @param foreignAssets, optional - Array of int, any assets used by the application, identified by index\n * @param note, optional\n * @param lease, optional\n * @param rekeyTo, optional\n */\nfunction makeApplicationCloseOutTxn(\n  from,\n  suggestedParams,\n  appIndex,\n  appArgs = undefined,\n  accounts = undefined,\n  foreignApps = undefined,\n  foreignAssets = undefined,\n  note = undefined,\n  lease = undefined,\n  rekeyTo = undefined\n) {\n  const o = {\n    type: 'appl',\n    from,\n    suggestedParams,\n    appIndex,\n    appOnComplete: OnApplicationComplete.CloseOutOC,\n    appArgs,\n    appAccounts: accounts,\n    appForeignApps: foreignApps,\n    appForeignAssets: foreignAssets,\n    note,\n    lease,\n    reKeyTo: rekeyTo,\n  };\n  return new txnBuilder.Transaction(o);\n}\n\n// helper for above makeApplicationCloseOutTxn, instead accepting an argument object\nfunction makeApplicationCloseOutTxnFromObject(o) {\n  return makeApplicationCloseOutTxn(\n    o.from,\n    o.suggestedParams,\n    o.appIndex,\n    o.appArgs,\n    o.accounts,\n    o.foreignApps,\n    o.foreignAssets,\n    o.note,\n    o.lease,\n    o.rekeyTo\n  );\n}\n\n/**\n * Make a transaction that clears a user's state in an application\n * @param from - address of sender\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *  If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param appIndex - the ID of the app to use\n * @param appArgs, optional - Array of Uint8Array, any additional arguments to the application\n * @param accounts, optional - Array of Address strings, any additional accounts to supply to the application\n * @param foreignApps, optional - Array of int, any other apps used by the application, identified by index\n * @param foreignAssets, optional - Array of int, any assets used by the application, identified by index\n * @param note, optional\n * @param lease, optional\n * @param rekeyTo, optional\n */\nfunction makeApplicationClearStateTxn(\n  from,\n  suggestedParams,\n  appIndex,\n  appArgs = undefined,\n  accounts = undefined,\n  foreignApps = undefined,\n  foreignAssets = undefined,\n  note = undefined,\n  lease = undefined,\n  rekeyTo = undefined\n) {\n  const o = {\n    type: 'appl',\n    from,\n    suggestedParams,\n    appIndex,\n    appOnComplete: OnApplicationComplete.ClearStateOC,\n    appArgs,\n    appAccounts: accounts,\n    appForeignApps: foreignApps,\n    appForeignAssets: foreignAssets,\n    note,\n    lease,\n    reKeyTo: rekeyTo,\n  };\n  return new txnBuilder.Transaction(o);\n}\n\n// helper for above makeApplicationClearStateTxn, instead accepting an argument object\nfunction makeApplicationClearStateTxnFromObject(o) {\n  return makeApplicationClearStateTxn(\n    o.from,\n    o.suggestedParams,\n    o.appIndex,\n    o.appArgs,\n    o.accounts,\n    o.foreignApps,\n    o.foreignAssets,\n    o.note,\n    o.lease,\n    o.rekeyTo\n  );\n}\n\n/**\n * Make a transaction that just calls an application, doing nothing on completion\n * @param from - address of sender\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *  If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param appIndex - the ID of the app to use\n * @param appArgs, optional - Array of Uint8Array, any additional arguments to the application\n * @param accounts, optional - Array of Address strings, any additional accounts to supply to the application\n * @param foreignApps, optional - Array of int, any other apps used by the application, identified by index\n * @param foreignAssets, optional - Array of int, any assets used by the application, identified by index\n * @param note, optional\n * @param lease, optional\n * @param rekeyTo, optional\n */\nfunction makeApplicationNoOpTxn(\n  from,\n  suggestedParams,\n  appIndex,\n  appArgs = undefined,\n  accounts = undefined,\n  foreignApps = undefined,\n  foreignAssets = undefined,\n  note = undefined,\n  lease = undefined,\n  rekeyTo = undefined\n) {\n  const o = {\n    type: 'appl',\n    from,\n    suggestedParams,\n    appIndex,\n    appOnComplete: OnApplicationComplete.NoOpOC,\n    appArgs,\n    appAccounts: accounts,\n    appForeignApps: foreignApps,\n    appForeignAssets: foreignAssets,\n    note,\n    lease,\n    reKeyTo: rekeyTo,\n  };\n  return new txnBuilder.Transaction(o);\n}\n\n// helper for above makeApplicationNoOpTxn, instead accepting an argument object\nfunction makeApplicationNoOpTxnFromObject(o) {\n  return makeApplicationNoOpTxn(\n    o.from,\n    o.suggestedParams,\n    o.appIndex,\n    o.appArgs,\n    o.accounts,\n    o.foreignApps,\n    o.foreignAssets,\n    o.note,\n    o.lease,\n    o.rekeyTo\n  );\n}\n\nmodule.exports = {\n  makePaymentTxn,\n  makePaymentTxnWithSuggestedParams,\n  makePaymentTxnWithSuggestedParamsFromObject,\n  makeKeyRegistrationTxn,\n  makeKeyRegistrationTxnWithSuggestedParams,\n  makeKeyRegistrationTxnWithSuggestedParamsFromObject,\n  makeAssetCreateTxn,\n  makeAssetCreateTxnWithSuggestedParams,\n  makeAssetCreateTxnWithSuggestedParamsFromObject,\n  makeAssetConfigTxn,\n  makeAssetConfigTxnWithSuggestedParams,\n  makeAssetConfigTxnWithSuggestedParamsFromObject,\n  makeAssetDestroyTxn,\n  makeAssetDestroyTxnWithSuggestedParams,\n  makeAssetDestroyTxnWithSuggestedParamsFromObject,\n  makeAssetFreezeTxn,\n  makeAssetFreezeTxnWithSuggestedParams,\n  makeAssetFreezeTxnWithSuggestedParamsFromObject,\n  makeAssetTransferTxn,\n  makeAssetTransferTxnWithSuggestedParams,\n  makeAssetTransferTxnWithSuggestedParamsFromObject,\n  OnApplicationComplete,\n  makeApplicationCreateTxn,\n  makeApplicationCreateTxnFromObject,\n  makeApplicationUpdateTxn,\n  makeApplicationUpdateTxnFromObject,\n  makeApplicationDeleteTxn,\n  makeApplicationDeleteTxnFromObject,\n  makeApplicationOptInTxn,\n  makeApplicationOptInTxnFromObject,\n  makeApplicationCloseOutTxn,\n  makeApplicationCloseOutTxnFromObject,\n  makeApplicationClearStateTxn,\n  makeApplicationClearStateTxnFromObject,\n  makeApplicationNoOpTxn,\n  makeApplicationNoOpTxnFromObject,\n};\n"]},"metadata":{},"sourceType":"script"}