{"ast":null,"code":"const MICROALGOS_TO_ALGOS_RATIO = 1e6;\nconst INVALID_MICROALGOS_ERROR_MSG = 'Microalgos should be positive and less than 2^53 - 1.';\n/**\n * microalgosToAlgos converts microalgos to algos\n * @param microalgos number\n * @returns number\n */\n\nfunction microalgosToAlgos(microalgos) {\n  if (microalgos < 0 || !Number.isSafeInteger(microalgos)) {\n    throw new Error(INVALID_MICROALGOS_ERROR_MSG);\n  }\n\n  return microalgos / MICROALGOS_TO_ALGOS_RATIO;\n}\n/**\n * algosToMicroalgos converts algos to microalgos\n * @param algos number\n * @returns number\n */\n\n\nfunction algosToMicroalgos(algos) {\n  const microalgos = algos * MICROALGOS_TO_ALGOS_RATIO;\n  return Math.round(microalgos);\n}\n\nmodule.exports = {\n  microalgosToAlgos,\n  algosToMicroalgos,\n  INVALID_MICROALGOS_ERROR_MSG\n};","map":{"version":3,"sources":["/home/x/reach/kick/app/reach-react-template/node_modules/algosdk/src/convert.js"],"names":["MICROALGOS_TO_ALGOS_RATIO","INVALID_MICROALGOS_ERROR_MSG","microalgosToAlgos","microalgos","Number","isSafeInteger","Error","algosToMicroalgos","algos","Math","round","module","exports"],"mappings":"AAAA,MAAMA,yBAAyB,GAAG,GAAlC;AACA,MAAMC,4BAA4B,GAChC,uDADF;AAGA;AACA;AACA;AACA;AACA;;AACA,SAASC,iBAAT,CAA2BC,UAA3B,EAAuC;AACrC,MAAIA,UAAU,GAAG,CAAb,IAAkB,CAACC,MAAM,CAACC,aAAP,CAAqBF,UAArB,CAAvB,EAAyD;AACvD,UAAM,IAAIG,KAAJ,CAAUL,4BAAV,CAAN;AACD;;AACD,SAAOE,UAAU,GAAGH,yBAApB;AACD;AAED;AACA;AACA;AACA;AACA;;;AACA,SAASO,iBAAT,CAA2BC,KAA3B,EAAkC;AAChC,QAAML,UAAU,GAAGK,KAAK,GAAGR,yBAA3B;AACA,SAAOS,IAAI,CAACC,KAAL,CAAWP,UAAX,CAAP;AACD;;AAEDQ,MAAM,CAACC,OAAP,GAAiB;AACfV,EAAAA,iBADe;AAEfK,EAAAA,iBAFe;AAGfN,EAAAA;AAHe,CAAjB","sourcesContent":["const MICROALGOS_TO_ALGOS_RATIO = 1e6;\nconst INVALID_MICROALGOS_ERROR_MSG =\n  'Microalgos should be positive and less than 2^53 - 1.';\n\n/**\n * microalgosToAlgos converts microalgos to algos\n * @param microalgos number\n * @returns number\n */\nfunction microalgosToAlgos(microalgos) {\n  if (microalgos < 0 || !Number.isSafeInteger(microalgos)) {\n    throw new Error(INVALID_MICROALGOS_ERROR_MSG);\n  }\n  return microalgos / MICROALGOS_TO_ALGOS_RATIO;\n}\n\n/**\n * algosToMicroalgos converts algos to microalgos\n * @param algos number\n * @returns number\n */\nfunction algosToMicroalgos(algos) {\n  const microalgos = algos * MICROALGOS_TO_ALGOS_RATIO;\n  return Math.round(microalgos);\n}\n\nmodule.exports = {\n  microalgosToAlgos,\n  algosToMicroalgos,\n  INVALID_MICROALGOS_ERROR_MSG,\n};\n"]},"metadata":{},"sourceType":"script"}