{"ast":null,"code":"const {\n  JSONRequest\n} = require('../jsonrequest');\n\nclass LookupAssetTransactions extends JSONRequest {\n  constructor(c, intDecoding, index) {\n    super(c, intDecoding);\n    this.index = index;\n  } // eslint-disable-next-line no-underscore-dangle\n\n\n  _path() {\n    return `/v2/assets/${this.index}/transactions`;\n  } // notePrefix to filter with, as uint8array\n\n\n  notePrefix(prefix) {\n    this.query['note-prefix'] = prefix;\n    return this;\n  } // txtype to filter with, as string\n\n\n  txType(type) {\n    this.query['tx-type'] = type;\n    return this;\n  } // sigtype to filter with, as string\n\n\n  sigType(type) {\n    this.query['sig-type'] = type;\n    return this;\n  } // txid to filter with, as string\n\n\n  txid(txid) {\n    this.query.txid = txid;\n    return this;\n  } // round to filter with, as int\n\n\n  round(round) {\n    this.query.round = round;\n    return this;\n  } // min round to filter with, as int\n\n\n  minRound(round) {\n    this.query['min-round'] = round;\n    return this;\n  } // max round to filter with, as int\n\n\n  maxRound(round) {\n    this.query['max-round'] = round;\n    return this;\n  } // asset ID to filter with, as int\n\n\n  assetID(id) {\n    this.query['asset-id'] = id;\n    return this;\n  } // limit for filter, as int\n\n\n  limit(limit) {\n    this.query.limit = limit;\n    return this;\n  } // before-time to filter with, as rfc3339 string\n\n\n  beforeTime(before) {\n    this.query['before-time'] = before;\n    return this;\n  } // after-time to filter with, as rfc3339 string\n\n\n  afterTime(after) {\n    this.query['after-time'] = after;\n    return this;\n  } // filtered results should have an amount greater than this value, as int, representing asset units\n\n\n  currencyGreaterThan(greater) {\n    this.query['currency-greater-than'] = greater;\n    return this;\n  } // filtered results should have an amount less than this value, as int, representing asset units\n\n\n  currencyLessThan(lesser) {\n    this.query['currency-less-than'] = lesser;\n    return this;\n  } // combined with address, defines what address to filter on, as string\n\n\n  addressRole(role) {\n    this.query['address-role'] = role;\n    return this;\n  } // address to filter on as string\n\n\n  address(address) {\n    this.query.address = address;\n    return this;\n  } // whether or not to consider the close-to field as a receiver when filtering transactions, as bool. set to true to ignore close-to\n\n\n  excludeCloseTo(exclude) {\n    this.query['exclude-close-to'] = exclude;\n    return this;\n  } // used for pagination\n\n\n  nextToken(nextToken) {\n    this.query.next = nextToken;\n    return this;\n  } // whether or not to include rekeying transactions\n\n\n  rekeyTo(rekeyTo) {\n    this.query['rekey-to'] = rekeyTo;\n    return this;\n  }\n\n}\n\nmodule.exports = {\n  LookupAssetTransactions\n};","map":{"version":3,"sources":["/home/x/reach/kick/github/node_modules/algosdk/src/client/v2/indexer/lookupAssetTransactions.js"],"names":["JSONRequest","require","LookupAssetTransactions","constructor","c","intDecoding","index","_path","notePrefix","prefix","query","txType","type","sigType","txid","round","minRound","maxRound","assetID","id","limit","beforeTime","before","afterTime","after","currencyGreaterThan","greater","currencyLessThan","lesser","addressRole","role","address","excludeCloseTo","exclude","nextToken","next","rekeyTo","module","exports"],"mappings":"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","sourcesContent":["const { JSONRequest } = require('../jsonrequest');\n\nclass LookupAssetTransactions extends JSONRequest {\n  constructor(c, intDecoding, index) {\n    super(c, intDecoding);\n    this.index = index;\n  }\n\n  // eslint-disable-next-line no-underscore-dangle\n  _path() {\n    return `/v2/assets/${this.index}/transactions`;\n  }\n\n  // notePrefix to filter with, as uint8array\n  notePrefix(prefix) {\n    this.query['note-prefix'] = prefix;\n    return this;\n  }\n\n  // txtype to filter with, as string\n  txType(type) {\n    this.query['tx-type'] = type;\n    return this;\n  }\n\n  // sigtype to filter with, as string\n  sigType(type) {\n    this.query['sig-type'] = type;\n    return this;\n  }\n\n  // txid to filter with, as string\n  txid(txid) {\n    this.query.txid = txid;\n    return this;\n  }\n\n  // round to filter with, as int\n  round(round) {\n    this.query.round = round;\n    return this;\n  }\n\n  // min round to filter with, as int\n  minRound(round) {\n    this.query['min-round'] = round;\n    return this;\n  }\n\n  // max round to filter with, as int\n  maxRound(round) {\n    this.query['max-round'] = round;\n    return this;\n  }\n\n  // asset ID to filter with, as int\n  assetID(id) {\n    this.query['asset-id'] = id;\n    return this;\n  }\n\n  // limit for filter, as int\n  limit(limit) {\n    this.query.limit = limit;\n    return this;\n  }\n\n  // before-time to filter with, as rfc3339 string\n  beforeTime(before) {\n    this.query['before-time'] = before;\n    return this;\n  }\n\n  // after-time to filter with, as rfc3339 string\n  afterTime(after) {\n    this.query['after-time'] = after;\n    return this;\n  }\n\n  // filtered results should have an amount greater than this value, as int, representing asset units\n  currencyGreaterThan(greater) {\n    this.query['currency-greater-than'] = greater;\n    return this;\n  }\n\n  // filtered results should have an amount less than this value, as int, representing asset units\n  currencyLessThan(lesser) {\n    this.query['currency-less-than'] = lesser;\n    return this;\n  }\n\n  // combined with address, defines what address to filter on, as string\n  addressRole(role) {\n    this.query['address-role'] = role;\n    return this;\n  }\n\n  // address to filter on as string\n  address(address) {\n    this.query.address = address;\n    return this;\n  }\n\n  // whether or not to consider the close-to field as a receiver when filtering transactions, as bool. set to true to ignore close-to\n  excludeCloseTo(exclude) {\n    this.query['exclude-close-to'] = exclude;\n    return this;\n  }\n\n  // used for pagination\n  nextToken(nextToken) {\n    this.query.next = nextToken;\n    return this;\n  }\n\n  // whether or not to include rekeying transactions\n  rekeyTo(rekeyTo) {\n    this.query['rekey-to'] = rekeyTo;\n    return this;\n  }\n}\n\nmodule.exports = { LookupAssetTransactions };\n"]},"metadata":{},"sourceType":"script"}