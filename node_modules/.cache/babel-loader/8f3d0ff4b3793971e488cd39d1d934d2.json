{"ast":null,"code":"const base = require('./base');\n/**\n * Request data type for dryrun endpoint.\n * Given the Transactions and simulated ledger state upload,\n * run TEAL scripts and return debugging information.\n */\n\n\nclass DryrunRequest extends base.BaseModel {\n  /**\n   * Creates a new <code>DryrunRequest</code> object.\n   * @param txns {Array.<str>}\n   * @param accounts {Array.<Account>}\n   * @param apps {Array.<DryrunApp>}\n   * @param protocolVersion {String} ProtocolVersion specifies a specific version string to operate under, otherwise whatever the current protocol of the network this algod is running in.\n   * @param round {Number} Round is available to some TEAL scripts. Defaults to the current round on the network this algod is attached to.\n   * @param latestTimestamp {Number} LatestTimestamp is available to some TEAL scripts. Defaults to the latest confirmed timestamp this algod is attached to.\n   * @param sources {Array.<DryrunSource>}\n   */\n  constructor({\n    txns,\n    accounts,\n    apps,\n    protocolVersion,\n    round,\n    latestTimestamp,\n    sources\n  }) {\n    super();\n    this.txns = txns;\n    this.accounts = accounts;\n    this.apps = apps;\n    this.protocolVersion = protocolVersion;\n    this.round = round;\n    this.latestTimestamp = latestTimestamp;\n    this.sources = sources;\n    this.attribute_map = {\n      txns: 'txns',\n      accounts: 'accounts',\n      apps: 'apps',\n      protocolVersion: 'protocol-version',\n      round: 'round',\n      latestTimestamp: 'latest-timestamp',\n      sources: 'sources'\n    };\n  }\n\n}\n/**\n * DryrunSource is TEAL source text that gets uploaded,\n * compiled, and inserted into transactions or application state.\n */\n\n\nclass DryrunSource extends base.BaseModel {\n  /**\n   * Creates a new <code>DryrunSource</code> object.\n   * @param fieldName {String} FieldName is what kind of sources this is. If lsig then it goes into the transactions[this.TxnIndex].LogicSig. If approv or clearp it goes into the Approval Program or Clear State Program of application[this.AppIndex].\n   * @param source {String}\n   * @param txnIndex {Number}\n   * @param appIndex {Number}\n   */\n  constructor(fieldName, source, txnIndex, appIndex) {\n    super();\n    this.fieldName = fieldName;\n    this.source = source;\n    this.txnIndex = txnIndex;\n    this.appIndex = appIndex;\n    this.attribute_map = {\n      fieldName: 'field-name',\n      source: 'source',\n      txnIndex: 'txn-index',\n      appIndex: 'app-index'\n    };\n  }\n\n}\n\nclass Application extends base.BaseModel {\n  constructor(id, params) {\n    super();\n    this.id = id;\n    this.params = params;\n    this.attribute_map = {\n      id: 'id',\n      params: 'params'\n    };\n  }\n\n}\n\nclass ApplicationParams extends base.BaseModel {\n  constructor({\n    creator,\n    approvalProgram,\n    clearStateProgram,\n    localStateSchema,\n    globalStateSchema,\n    globalState\n  }) {\n    super();\n    this.creator = creator;\n    this.approvalProgram = approvalProgram;\n    this.clearStateProgram = clearStateProgram;\n    this.localStateSchema = localStateSchema;\n    this.globalStateSchema = globalStateSchema;\n    this.globalState = globalState;\n    this.attribute_map = {\n      creator: 'creator',\n      approvalProgram: 'approval-program',\n      clearStateProgram: 'clear-state-program',\n      localStateSchema: 'local-state-schema',\n      globalStateSchema: 'global-state-schema',\n      globalState: 'global-state'\n    };\n  }\n\n}\n\nclass ApplicationStateSchema extends base.BaseModel {\n  constructor(numUint, numByteSlice) {\n    super();\n    this.numUint = numUint;\n    this.numByteSlice = numByteSlice;\n    this.attribute_map = {\n      numUint: 'num-uint',\n      numByteSlice: 'num-byte-slice'\n    };\n  }\n\n}\n\nclass ApplicationLocalStates extends base.BaseModel {\n  constructor(id, state) {\n    super();\n    this.id = id;\n    this.state = state;\n    this.attribute_map = {\n      id: 'id',\n      state: 'state'\n    };\n  }\n\n}\n\nclass ApplicationLocalState extends base.BaseModel {\n  constructor(schema, keyValue) {\n    super();\n    this.schema = schema;\n    this.keyValue = keyValue;\n    this.attribute_map = {\n      schema: 'schema',\n      keyValue: 'key-value'\n    };\n  }\n\n}\n\nclass TealKeyValue extends base.BaseModel {\n  constructor(key, value) {\n    super();\n    this.key = key;\n    this.value = value;\n    this.attribute_map = {\n      key: 'key',\n      value: 'value'\n    };\n  }\n\n}\n\nclass TealValue extends base.BaseModel {\n  constructor(type, bytes, uint) {\n    super();\n    this.type = type;\n    this.bytes = bytes;\n    this.uint = uint;\n    this.attribute_map = {\n      type: 'type',\n      bytes: 'bytes',\n      uint: 'uint'\n    };\n  }\n\n}\n\nclass AssetHolding extends base.BaseModel {\n  constructor(amount, assetId, creator, isFrozen) {\n    super();\n    this.amount = amount;\n    this.assetId = assetId;\n    this.creator = creator;\n    this.isFrozen = isFrozen;\n    this.attribute_map = {\n      amount: 'amount',\n      assetId: 'asset-id',\n      creator: 'creator',\n      isFrozen: 'is-frozen'\n    };\n  }\n\n}\n\nclass Asset extends base.BaseModel {\n  constructor(index, params) {\n    super();\n    this.amount = index;\n    this.assetId = params;\n    this.attribute_map = {\n      index: 'index',\n      params: 'params'\n    };\n  }\n\n}\n\nclass AssetParams extends base.BaseModel {\n  constructor({\n    clawback,\n    creator,\n    decimals,\n    defaultFrozen,\n    freeze,\n    manager,\n    metadataHash,\n    name,\n    reserve,\n    total,\n    unitName,\n    url\n  }) {\n    super();\n    this.clawback = clawback;\n    this.creator = creator;\n    this.decimals = decimals;\n    this.defaultFrozen = defaultFrozen;\n    this.freeze = freeze;\n    this.manager = manager;\n    this.metadataHash = metadataHash;\n    this.name = name;\n    this.reserve = reserve;\n    this.total = total;\n    this.unitName = unitName;\n    this.url = url;\n    this.attribute_map = {\n      clawback: 'clawback',\n      creator: 'creator',\n      decimals: 'decimals',\n      defaultFrozen: 'default-frozen',\n      freeze: 'freeze',\n      manager: 'manager',\n      metadataHash: 'metadata-hash',\n      name: 'name',\n      reserve: 'reserve',\n      total: 'total',\n      unitName: 'unit-name',\n      url: 'url'\n    };\n  }\n\n}\n\nclass Account extends base.BaseModel {\n  constructor({\n    address,\n    amount,\n    amountWithoutPendingRewards,\n    appsLocalState,\n    appsTotalSchema,\n    assets,\n    createdApps,\n    createdAssets,\n    participation,\n    pendingRewards,\n    rewardBase,\n    rewards,\n    round,\n    status,\n    sigType,\n    authAddr\n  }) {\n    super();\n    this.address = address;\n    this.amount = amount;\n    this.amountWithoutPendingRewards = amountWithoutPendingRewards;\n    this.appsLocalState = appsLocalState;\n    this.appsTotalSchema = appsTotalSchema;\n    this.assets = assets;\n    this.createdApps = createdApps;\n    this.createdAssets = createdAssets;\n    this.participation = participation;\n    this.pendingRewards = pendingRewards;\n    this.rewardBase = rewardBase;\n    this.rewards = rewards;\n    this.round = round;\n    this.status = status;\n    this.sigType = sigType;\n    this.authAddr = authAddr;\n    this.attribute_map = {\n      address: 'address',\n      amount: 'amount',\n      amountWithoutPendingRewards: 'amount-without-pending-rewards',\n      appsLocalState: 'apps-local-state',\n      appsTotalSchema: 'apps-total-schema',\n      assets: 'assets',\n      createdApps: 'created-apps',\n      createdAssets: 'created-assets',\n      participation: 'participation',\n      pendingRewards: 'pending-rewards',\n      rewardBase: 'reward-base',\n      rewards: 'rewards',\n      round: 'round',\n      status: 'status',\n      sigType: 'sig-type',\n      authAddr: 'auth-addr'\n    };\n  }\n\n}\n\nmodule.exports = {\n  DryrunRequest,\n  DryrunSource,\n  Account,\n  Application,\n  ApplicationParams,\n  Asset,\n  AssetParams,\n  AssetHolding,\n  ApplicationLocalStates,\n  ApplicationLocalState,\n  ApplicationStateSchema,\n  TealKeyValue,\n  TealValue\n};","map":{"version":3,"sources":["/home/x/reach/kick/github/node_modules/algosdk/src/client/v2/algod/models/types.js"],"names":["base","require","DryrunRequest","BaseModel","constructor","txns","accounts","apps","protocolVersion","round","latestTimestamp","sources","attribute_map","DryrunSource","fieldName","source","txnIndex","appIndex","Application","id","params","ApplicationParams","creator","approvalProgram","clearStateProgram","localStateSchema","globalStateSchema","globalState","ApplicationStateSchema","numUint","numByteSlice","ApplicationLocalStates","state","ApplicationLocalState","schema","keyValue","TealKeyValue","key","value","TealValue","type","bytes","uint","AssetHolding","amount","assetId","isFrozen","Asset","index","AssetParams","clawback","decimals","defaultFrozen","freeze","manager","metadataHash","name","reserve","total","unitName","url","Account","address","amountWithoutPendingRewards","appsLocalState","appsTotalSchema","assets","createdApps","createdAssets","participation","pendingRewards","rewardBase","rewards","status","sigType","authAddr","module","exports"],"mappings":"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","sourcesContent":["const base = require('./base');\n/**\n * Request data type for dryrun endpoint.\n * Given the Transactions and simulated ledger state upload,\n * run TEAL scripts and return debugging information.\n */\nclass DryrunRequest extends base.BaseModel {\n  /**\n   * Creates a new <code>DryrunRequest</code> object.\n   * @param txns {Array.<str>}\n   * @param accounts {Array.<Account>}\n   * @param apps {Array.<DryrunApp>}\n   * @param protocolVersion {String} ProtocolVersion specifies a specific version string to operate under, otherwise whatever the current protocol of the network this algod is running in.\n   * @param round {Number} Round is available to some TEAL scripts. Defaults to the current round on the network this algod is attached to.\n   * @param latestTimestamp {Number} LatestTimestamp is available to some TEAL scripts. Defaults to the latest confirmed timestamp this algod is attached to.\n   * @param sources {Array.<DryrunSource>}\n   */\n\n  constructor({\n    txns,\n    accounts,\n    apps,\n    protocolVersion,\n    round,\n    latestTimestamp,\n    sources,\n  }) {\n    super();\n    this.txns = txns;\n    this.accounts = accounts;\n    this.apps = apps;\n    this.protocolVersion = protocolVersion;\n    this.round = round;\n    this.latestTimestamp = latestTimestamp;\n    this.sources = sources;\n\n    this.attribute_map = {\n      txns: 'txns',\n      accounts: 'accounts',\n      apps: 'apps',\n      protocolVersion: 'protocol-version',\n      round: 'round',\n      latestTimestamp: 'latest-timestamp',\n      sources: 'sources',\n    };\n  }\n}\n\n/**\n * DryrunSource is TEAL source text that gets uploaded,\n * compiled, and inserted into transactions or application state.\n */\nclass DryrunSource extends base.BaseModel {\n  /**\n   * Creates a new <code>DryrunSource</code> object.\n   * @param fieldName {String} FieldName is what kind of sources this is. If lsig then it goes into the transactions[this.TxnIndex].LogicSig. If approv or clearp it goes into the Approval Program or Clear State Program of application[this.AppIndex].\n   * @param source {String}\n   * @param txnIndex {Number}\n   * @param appIndex {Number}\n   */\n  constructor(fieldName, source, txnIndex, appIndex) {\n    super();\n    this.fieldName = fieldName;\n    this.source = source;\n    this.txnIndex = txnIndex;\n    this.appIndex = appIndex;\n\n    this.attribute_map = {\n      fieldName: 'field-name',\n      source: 'source',\n      txnIndex: 'txn-index',\n      appIndex: 'app-index',\n    };\n  }\n}\n\nclass Application extends base.BaseModel {\n  constructor(id, params) {\n    super();\n    this.id = id;\n    this.params = params;\n\n    this.attribute_map = {\n      id: 'id',\n      params: 'params',\n    };\n  }\n}\n\nclass ApplicationParams extends base.BaseModel {\n  constructor({\n    creator,\n    approvalProgram,\n    clearStateProgram,\n    localStateSchema,\n    globalStateSchema,\n    globalState,\n  }) {\n    super();\n    this.creator = creator;\n    this.approvalProgram = approvalProgram;\n    this.clearStateProgram = clearStateProgram;\n    this.localStateSchema = localStateSchema;\n    this.globalStateSchema = globalStateSchema;\n    this.globalState = globalState;\n\n    this.attribute_map = {\n      creator: 'creator',\n      approvalProgram: 'approval-program',\n      clearStateProgram: 'clear-state-program',\n      localStateSchema: 'local-state-schema',\n      globalStateSchema: 'global-state-schema',\n      globalState: 'global-state',\n    };\n  }\n}\n\nclass ApplicationStateSchema extends base.BaseModel {\n  constructor(numUint, numByteSlice) {\n    super();\n    this.numUint = numUint;\n    this.numByteSlice = numByteSlice;\n\n    this.attribute_map = {\n      numUint: 'num-uint',\n      numByteSlice: 'num-byte-slice',\n    };\n  }\n}\n\nclass ApplicationLocalStates extends base.BaseModel {\n  constructor(id, state) {\n    super();\n    this.id = id;\n    this.state = state;\n\n    this.attribute_map = {\n      id: 'id',\n      state: 'state',\n    };\n  }\n}\n\nclass ApplicationLocalState extends base.BaseModel {\n  constructor(schema, keyValue) {\n    super();\n    this.schema = schema;\n    this.keyValue = keyValue;\n\n    this.attribute_map = {\n      schema: 'schema',\n      keyValue: 'key-value',\n    };\n  }\n}\n\nclass TealKeyValue extends base.BaseModel {\n  constructor(key, value) {\n    super();\n    this.key = key;\n    this.value = value;\n\n    this.attribute_map = {\n      key: 'key',\n      value: 'value',\n    };\n  }\n}\n\nclass TealValue extends base.BaseModel {\n  constructor(type, bytes, uint) {\n    super();\n    this.type = type;\n    this.bytes = bytes;\n    this.uint = uint;\n\n    this.attribute_map = {\n      type: 'type',\n      bytes: 'bytes',\n      uint: 'uint',\n    };\n  }\n}\n\nclass AssetHolding extends base.BaseModel {\n  constructor(amount, assetId, creator, isFrozen) {\n    super();\n\n    this.amount = amount;\n    this.assetId = assetId;\n    this.creator = creator;\n    this.isFrozen = isFrozen;\n\n    this.attribute_map = {\n      amount: 'amount',\n      assetId: 'asset-id',\n      creator: 'creator',\n      isFrozen: 'is-frozen',\n    };\n  }\n}\n\nclass Asset extends base.BaseModel {\n  constructor(index, params) {\n    super();\n\n    this.amount = index;\n    this.assetId = params;\n\n    this.attribute_map = {\n      index: 'index',\n      params: 'params',\n    };\n  }\n}\n\nclass AssetParams extends base.BaseModel {\n  constructor({\n    clawback,\n    creator,\n    decimals,\n    defaultFrozen,\n    freeze,\n    manager,\n    metadataHash,\n    name,\n    reserve,\n    total,\n    unitName,\n    url,\n  }) {\n    super();\n\n    this.clawback = clawback;\n    this.creator = creator;\n    this.decimals = decimals;\n    this.defaultFrozen = defaultFrozen;\n    this.freeze = freeze;\n    this.manager = manager;\n    this.metadataHash = metadataHash;\n    this.name = name;\n    this.reserve = reserve;\n    this.total = total;\n    this.unitName = unitName;\n    this.url = url;\n\n    this.attribute_map = {\n      clawback: 'clawback',\n      creator: 'creator',\n      decimals: 'decimals',\n      defaultFrozen: 'default-frozen',\n      freeze: 'freeze',\n      manager: 'manager',\n      metadataHash: 'metadata-hash',\n      name: 'name',\n      reserve: 'reserve',\n      total: 'total',\n      unitName: 'unit-name',\n      url: 'url',\n    };\n  }\n}\n\nclass Account extends base.BaseModel {\n  constructor({\n    address,\n    amount,\n    amountWithoutPendingRewards,\n    appsLocalState,\n    appsTotalSchema,\n    assets,\n    createdApps,\n    createdAssets,\n    participation,\n    pendingRewards,\n    rewardBase,\n    rewards,\n    round,\n    status,\n    sigType,\n    authAddr,\n  }) {\n    super();\n    this.address = address;\n    this.amount = amount;\n    this.amountWithoutPendingRewards = amountWithoutPendingRewards;\n    this.appsLocalState = appsLocalState;\n    this.appsTotalSchema = appsTotalSchema;\n    this.assets = assets;\n    this.createdApps = createdApps;\n    this.createdAssets = createdAssets;\n    this.participation = participation;\n    this.pendingRewards = pendingRewards;\n    this.rewardBase = rewardBase;\n    this.rewards = rewards;\n    this.round = round;\n    this.status = status;\n    this.sigType = sigType;\n    this.authAddr = authAddr;\n\n    this.attribute_map = {\n      address: 'address',\n      amount: 'amount',\n      amountWithoutPendingRewards: 'amount-without-pending-rewards',\n      appsLocalState: 'apps-local-state',\n      appsTotalSchema: 'apps-total-schema',\n      assets: 'assets',\n      createdApps: 'created-apps',\n      createdAssets: 'created-assets',\n      participation: 'participation',\n      pendingRewards: 'pending-rewards',\n      rewardBase: 'reward-base',\n      rewards: 'rewards',\n      round: 'round',\n      status: 'status',\n      sigType: 'sig-type',\n      authAddr: 'auth-addr',\n    };\n  }\n}\n\nmodule.exports = {\n  DryrunRequest,\n  DryrunSource,\n  Account,\n  Application,\n  ApplicationParams,\n  Asset,\n  AssetParams,\n  AssetHolding,\n  ApplicationLocalStates,\n  ApplicationLocalState,\n  ApplicationStateSchema,\n  TealKeyValue,\n  TealValue,\n};\n"]},"metadata":{},"sourceType":"script"}