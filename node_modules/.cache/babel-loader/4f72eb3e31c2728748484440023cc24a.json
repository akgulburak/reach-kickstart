{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeStream = exports.decodeMultiStream = exports.decodeArrayStream = exports.decodeAsync = void 0;\n\nconst Decoder_1 = require(\"./Decoder\");\n\nconst stream_1 = require(\"./utils/stream\");\n\nconst decode_1 = require(\"./decode\");\n\nasync function decodeAsync(streamLike, options = decode_1.defaultDecodeOptions) {\n  const stream = stream_1.ensureAsyncIterable(streamLike);\n  const decoder = new Decoder_1.Decoder(options.extensionCodec, options.context, options.maxStrLength, options.maxBinLength, options.maxArrayLength, options.maxMapLength, options.maxExtLength);\n  return decoder.decodeAsync(stream);\n}\n\nexports.decodeAsync = decodeAsync;\n\nfunction decodeArrayStream(streamLike, options = decode_1.defaultDecodeOptions) {\n  const stream = stream_1.ensureAsyncIterable(streamLike);\n  const decoder = new Decoder_1.Decoder(options.extensionCodec, options.context, options.maxStrLength, options.maxBinLength, options.maxArrayLength, options.maxMapLength, options.maxExtLength);\n  return decoder.decodeArrayStream(stream);\n}\n\nexports.decodeArrayStream = decodeArrayStream;\n\nfunction decodeMultiStream(streamLike, options = decode_1.defaultDecodeOptions) {\n  const stream = stream_1.ensureAsyncIterable(streamLike);\n  const decoder = new Decoder_1.Decoder(options.extensionCodec, options.context, options.maxStrLength, options.maxBinLength, options.maxArrayLength, options.maxMapLength, options.maxExtLength);\n  return decoder.decodeStream(stream);\n}\n\nexports.decodeMultiStream = decodeMultiStream;\n/**\n * @deprecated Use {@link decodeMultiStream()} instead.\n */\n\nfunction decodeStream(streamLike, options = decode_1.defaultDecodeOptions) {\n  return decodeMultiStream(streamLike, options);\n}\n\nexports.decodeStream = decodeStream;","map":{"version":3,"sources":["../src/decodeAsync.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,SAAA,GAAA,OAAA,CAAA,WAAA,CAAA;;AACA,MAAA,QAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;;AACA,MAAA,QAAA,GAAA,OAAA,CAAA,UAAA,CAAA;;AAKO,eAAe,WAAf,CACL,UADK,EAEL,OAAA,GAAsD,QAAA,CAAA,oBAFjD,EAE4E;AAEjF,QAAM,MAAM,GAAG,QAAA,CAAA,mBAAA,CAAoB,UAApB,CAAf;AAEA,QAAM,OAAO,GAAG,IAAI,SAAA,CAAA,OAAJ,CACd,OAAO,CAAC,cADM,EAEb,OAA6C,CAAC,OAFjC,EAGd,OAAO,CAAC,YAHM,EAId,OAAO,CAAC,YAJM,EAKd,OAAO,CAAC,cALM,EAMd,OAAO,CAAC,YANM,EAOd,OAAO,CAAC,YAPM,CAAhB;AASA,SAAO,OAAO,CAAC,WAAR,CAAoB,MAApB,CAAP;AACD;;AAhBD,OAAA,CAAA,WAAA,GAAA,WAAA;;AAkBA,SAAgB,iBAAhB,CACE,UADF,EAEE,OAAA,GAAsD,QAAA,CAAA,oBAFxD,EAEmF;AAEjF,QAAM,MAAM,GAAG,QAAA,CAAA,mBAAA,CAAoB,UAApB,CAAf;AAEA,QAAM,OAAO,GAAG,IAAI,SAAA,CAAA,OAAJ,CACd,OAAO,CAAC,cADM,EAEb,OAA6C,CAAC,OAFjC,EAGd,OAAO,CAAC,YAHM,EAId,OAAO,CAAC,YAJM,EAKd,OAAO,CAAC,cALM,EAMd,OAAO,CAAC,YANM,EAOd,OAAO,CAAC,YAPM,CAAhB;AAUA,SAAO,OAAO,CAAC,iBAAR,CAA0B,MAA1B,CAAP;AACD;;AAjBD,OAAA,CAAA,iBAAA,GAAA,iBAAA;;AAmBA,SAAgB,iBAAhB,CACE,UADF,EAEE,OAAA,GAAsD,QAAA,CAAA,oBAFxD,EAEmF;AAEjF,QAAM,MAAM,GAAG,QAAA,CAAA,mBAAA,CAAoB,UAApB,CAAf;AAEA,QAAM,OAAO,GAAG,IAAI,SAAA,CAAA,OAAJ,CACd,OAAO,CAAC,cADM,EAEb,OAA6C,CAAC,OAFjC,EAGd,OAAO,CAAC,YAHM,EAId,OAAO,CAAC,YAJM,EAKd,OAAO,CAAC,cALM,EAMd,OAAO,CAAC,YANM,EAOd,OAAO,CAAC,YAPM,CAAhB;AAUA,SAAO,OAAO,CAAC,YAAR,CAAqB,MAArB,CAAP;AACD;;AAjBD,OAAA,CAAA,iBAAA,GAAA,iBAAA;AAmBA;;AAEG;;AACH,SAAgB,YAAhB,CACE,UADF,EAEE,OAAA,GAAsD,QAAA,CAAA,oBAFxD,EAEmF;AAEjF,SAAO,iBAAiB,CAAC,UAAD,EAAa,OAAb,CAAxB;AACD;;AALD,OAAA,CAAA,YAAA,GAAA,YAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decodeStream = exports.decodeMultiStream = exports.decodeArrayStream = exports.decodeAsync = void 0;\nconst Decoder_1 = require(\"./Decoder\");\nconst stream_1 = require(\"./utils/stream\");\nconst decode_1 = require(\"./decode\");\nasync function decodeAsync(streamLike, options = decode_1.defaultDecodeOptions) {\n    const stream = stream_1.ensureAsyncIterable(streamLike);\n    const decoder = new Decoder_1.Decoder(options.extensionCodec, options.context, options.maxStrLength, options.maxBinLength, options.maxArrayLength, options.maxMapLength, options.maxExtLength);\n    return decoder.decodeAsync(stream);\n}\nexports.decodeAsync = decodeAsync;\nfunction decodeArrayStream(streamLike, options = decode_1.defaultDecodeOptions) {\n    const stream = stream_1.ensureAsyncIterable(streamLike);\n    const decoder = new Decoder_1.Decoder(options.extensionCodec, options.context, options.maxStrLength, options.maxBinLength, options.maxArrayLength, options.maxMapLength, options.maxExtLength);\n    return decoder.decodeArrayStream(stream);\n}\nexports.decodeArrayStream = decodeArrayStream;\nfunction decodeMultiStream(streamLike, options = decode_1.defaultDecodeOptions) {\n    const stream = stream_1.ensureAsyncIterable(streamLike);\n    const decoder = new Decoder_1.Decoder(options.extensionCodec, options.context, options.maxStrLength, options.maxBinLength, options.maxArrayLength, options.maxMapLength, options.maxExtLength);\n    return decoder.decodeStream(stream);\n}\nexports.decodeMultiStream = decodeMultiStream;\n/**\n * @deprecated Use {@link decodeMultiStream()} instead.\n */\nfunction decodeStream(streamLike, options = decode_1.defaultDecodeOptions) {\n    return decodeMultiStream(streamLike, options);\n}\nexports.decodeStream = decodeStream;\n//# sourceMappingURL=decodeAsync.js.map"]},"metadata":{},"sourceType":"script"}