{"ast":null,"code":"/**\n * This file is a wrapper of msgpack.js.\n * The wrapper was written in order to ensure correct encoding of Algorand Transaction and other formats.\n * In particular, it matches go-algorand blockchain client, written in go (https://www.github.com/algorand/go-algorand.\n * Algorand's msgpack encoding follows to following rules -\n *  1. Every integer must be encoded to the smallest type possible (0-255->8bit, 256-65535->16bit, etx)\n *  2. All fields names must be sorted\n *  3. All empty and 0 fields should be omitted\n *  4. Every positive number must be encoded as uint\n *  5. Binary blob should be used for binary data and string for strings\n *  */\nconst msgpack = require('algo-msgpack-with-bigint'); // Errors\n\n\nconst ERROR_CONTAINS_EMPTY_STRING = 'The object contains empty or 0 values. First empty or 0 value encountered during encoding: ';\n/**\n * containsEmpty returns true if any of the object's values are empty, false otherwise.\n * Empty arrays considered empty\n * @param obj\n * @returns {{firstEmptyKey: string, containsEmpty: boolean}} {true, empty key} if contains empty, {false, undefined} otherwise\n */\n\nfunction containsEmpty(obj) {\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      if (!obj[key] || obj[key].length === 0) {\n        return {\n          containsEmpty: true,\n          firstEmptyKey: key\n        };\n      }\n    }\n  }\n\n  return {\n    containsEmpty: false,\n    firstEmptyKey: undefined\n  };\n}\n/**\n * encode encodes objects using msgpack\n * @param obj a dictionary to be encoded. Must not contain empty or 0 values.\n * @returns {Uint8Array} msgpack representation of the object\n * @throws Error containing ERROR_CONTAINS_EMPTY_STRING if the object contains empty or zero values\n */\n\n\nfunction encode(obj) {\n  // Check for empty values\n  const emptyCheck = containsEmpty(obj);\n\n  if (emptyCheck.containsEmpty) {\n    throw new Error(ERROR_CONTAINS_EMPTY_STRING + emptyCheck.firstEmptyKey);\n  } // enable the canonical option\n\n\n  const options = {\n    sortKeys: true\n  };\n  return msgpack.encode(obj, options);\n}\n\nfunction decode(obj) {\n  return msgpack.decode(obj);\n}\n\nmodule.exports = {\n  encode,\n  decode,\n  ERROR_CONTAINS_EMPTY_STRING\n};","map":{"version":3,"sources":["/home/x/reach/kick/app/reach-react-template/node_modules/algosdk/src/encoding/encoding.js"],"names":["msgpack","require","ERROR_CONTAINS_EMPTY_STRING","containsEmpty","obj","key","Object","prototype","hasOwnProperty","call","length","firstEmptyKey","undefined","encode","emptyCheck","Error","options","sortKeys","decode","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,0BAAD,CAAvB,C,CAEA;;;AACA,MAAMC,2BAA2B,GAC/B,6FADF;AAGA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,aAAT,CAAuBC,GAAvB,EAA4B;AAC1B,OAAK,MAAMC,GAAX,IAAkBD,GAAlB,EAAuB;AACrB,QAAIE,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCL,GAArC,EAA0CC,GAA1C,CAAJ,EAAoD;AAClD,UAAI,CAACD,GAAG,CAACC,GAAD,CAAJ,IAAaD,GAAG,CAACC,GAAD,CAAH,CAASK,MAAT,KAAoB,CAArC,EAAwC;AACtC,eAAO;AAAEP,UAAAA,aAAa,EAAE,IAAjB;AAAuBQ,UAAAA,aAAa,EAAEN;AAAtC,SAAP;AACD;AACF;AACF;;AACD,SAAO;AAAEF,IAAAA,aAAa,EAAE,KAAjB;AAAwBQ,IAAAA,aAAa,EAAEC;AAAvC,GAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,MAAT,CAAgBT,GAAhB,EAAqB;AACnB;AACA,QAAMU,UAAU,GAAGX,aAAa,CAACC,GAAD,CAAhC;;AACA,MAAIU,UAAU,CAACX,aAAf,EAA8B;AAC5B,UAAM,IAAIY,KAAJ,CAAUb,2BAA2B,GAAGY,UAAU,CAACH,aAAnD,CAAN;AACD,GALkB,CAOnB;;;AACA,QAAMK,OAAO,GAAG;AAAEC,IAAAA,QAAQ,EAAE;AAAZ,GAAhB;AACA,SAAOjB,OAAO,CAACa,MAAR,CAAeT,GAAf,EAAoBY,OAApB,CAAP;AACD;;AAED,SAASE,MAAT,CAAgBd,GAAhB,EAAqB;AACnB,SAAOJ,OAAO,CAACkB,MAAR,CAAed,GAAf,CAAP;AACD;;AAEDe,MAAM,CAACC,OAAP,GAAiB;AAAEP,EAAAA,MAAF;AAAUK,EAAAA,MAAV;AAAkBhB,EAAAA;AAAlB,CAAjB","sourcesContent":["/**\n * This file is a wrapper of msgpack.js.\n * The wrapper was written in order to ensure correct encoding of Algorand Transaction and other formats.\n * In particular, it matches go-algorand blockchain client, written in go (https://www.github.com/algorand/go-algorand.\n * Algorand's msgpack encoding follows to following rules -\n *  1. Every integer must be encoded to the smallest type possible (0-255->8bit, 256-65535->16bit, etx)\n *  2. All fields names must be sorted\n *  3. All empty and 0 fields should be omitted\n *  4. Every positive number must be encoded as uint\n *  5. Binary blob should be used for binary data and string for strings\n *  */\n\nconst msgpack = require('algo-msgpack-with-bigint');\n\n// Errors\nconst ERROR_CONTAINS_EMPTY_STRING =\n  'The object contains empty or 0 values. First empty or 0 value encountered during encoding: ';\n\n/**\n * containsEmpty returns true if any of the object's values are empty, false otherwise.\n * Empty arrays considered empty\n * @param obj\n * @returns {{firstEmptyKey: string, containsEmpty: boolean}} {true, empty key} if contains empty, {false, undefined} otherwise\n */\nfunction containsEmpty(obj) {\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      if (!obj[key] || obj[key].length === 0) {\n        return { containsEmpty: true, firstEmptyKey: key };\n      }\n    }\n  }\n  return { containsEmpty: false, firstEmptyKey: undefined };\n}\n\n/**\n * encode encodes objects using msgpack\n * @param obj a dictionary to be encoded. Must not contain empty or 0 values.\n * @returns {Uint8Array} msgpack representation of the object\n * @throws Error containing ERROR_CONTAINS_EMPTY_STRING if the object contains empty or zero values\n */\nfunction encode(obj) {\n  // Check for empty values\n  const emptyCheck = containsEmpty(obj);\n  if (emptyCheck.containsEmpty) {\n    throw new Error(ERROR_CONTAINS_EMPTY_STRING + emptyCheck.firstEmptyKey);\n  }\n\n  // enable the canonical option\n  const options = { sortKeys: true };\n  return msgpack.encode(obj, options);\n}\n\nfunction decode(obj) {\n  return msgpack.decode(obj);\n}\n\nmodule.exports = { encode, decode, ERROR_CONTAINS_EMPTY_STRING };\n"]},"metadata":{},"sourceType":"script"}