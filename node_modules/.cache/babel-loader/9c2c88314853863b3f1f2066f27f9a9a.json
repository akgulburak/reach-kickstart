{"ast":null,"code":"var _jsxFileName = \"/home/x/reach/kick/app/reach-react-template/src/components/participants/Bob.js\";\nimport { Component } from \"react\";\nimport * as Backend from \"../../build/index.main.mjs\";\nimport * as Reach from \"@reach-sh/stdlib/ALGO\";\nimport { Context } from \"../../Context\";\nimport BobViews from \"./BobViews\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class Bob extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      appState: \"\",\n      args: [],\n      resGetHand: null,\n      resAcceptWager: null\n    };\n    this.acceptWagerExt = this.acceptWagerExt.bind(this);\n    this.getHandExt = this.getHandExt.bind(this);\n  }\n\n  componentDidMount() {\n    const [,,,,,, ctc,,,] = this.context;\n    this.interval = setInterval(async () => this.updateBalance(), 20000);\n    Backend.Bob(ctc[0], this);\n  }\n\n  async updateBalance() {\n    const [account,,, setBalance] = this.context;\n    const balance = Reach.formatCurrency(await Reach.balanceOf(account), 4);\n    setBalance(balance);\n  }\n\n  random() {\n    return Reach.hasRandom.random();\n  }\n\n  async acceptWager(wager) {\n    const fmtWager = Reach.formatCurrency(wager, 4);\n    return await new Promise(res => {\n      console.log(\"acceptWager is called\");\n      this.setState({\n        appState: \"acceptWager\",\n        args: [fmtWager],\n        resAcceptWager: res\n      });\n    });\n  }\n\n  acceptWagerExt() {\n    console.log(\"acceptWager is called\");\n    this.state.resAcceptWager();\n  }\n\n  async getHand() {\n    const hand = await new Promise(res => {\n      console.log(\"getHand is called\");\n      this.setState({\n        appState: \"getHand\",\n        resGetHand: res\n      });\n    });\n    console.log(hand);\n    return hand;\n  }\n\n  getHandExt(hand) {\n    console.log(\"getHandExt is called\");\n    this.state.resGetHand(hand);\n  }\n\n  async informTimeout() {\n    this.setState({\n      appState: \"informTimeout\"\n    });\n  }\n\n  async seeOutcome(outcome) {\n    const outcomeNumber = Reach.bigNumberToNumber(outcome);\n    this.setState({\n      appState: \"seeOutcome\",\n      args: [outcomeNumber]\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(BobViews, {\n      appState: this.state.appState,\n      args: this.state.args,\n      getHandReady: this.state.resGetHand !== null,\n      getHand: this.getHandExt,\n      acceptWagerReady: this.state.resAcceptWager !== null,\n      acceptWager: this.acceptWagerExt\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 17\n    }, this);\n  }\n\n}\nBob.contextType = Context;","map":{"version":3,"sources":["/home/x/reach/kick/app/reach-react-template/src/components/participants/Bob.js"],"names":["Component","Backend","Reach","Context","BobViews","Bob","constructor","props","state","appState","args","resGetHand","resAcceptWager","acceptWagerExt","bind","getHandExt","componentDidMount","ctc","context","interval","setInterval","updateBalance","account","setBalance","balance","formatCurrency","balanceOf","random","hasRandom","acceptWager","wager","fmtWager","Promise","res","console","log","setState","getHand","hand","informTimeout","seeOutcome","outcome","outcomeNumber","bigNumberToNumber","render","contextType"],"mappings":"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","sourcesContent":["import { Component } from \"react\";\nimport * as Backend from \"../../build/index.main.mjs\";\nimport * as Reach from \"@reach-sh/stdlib/ALGO\";\n\n\nimport { Context } from \"../../Context\";\nimport BobViews from \"./BobViews\";\n\nexport class Bob extends Component {\n    static contextType = Context;\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            appState: \"\",\n            args: [],\n            resGetHand: null,\n            resAcceptWager: null,\n        };\n\n        this.acceptWagerExt = this.acceptWagerExt.bind(this);\n        this.getHandExt = this.getHandExt.bind(this);\n    }\n\n    componentDidMount() {\n        const [, , , , , , ctc, , ,] = this.context;\n        this.interval = setInterval(async () => this.updateBalance(), 20000);\n\n        Backend.Bob(ctc[0], this);\n    }\n\n    async updateBalance() {\n        const [account, , , setBalance] = this.context;\n\n        const balance = Reach.formatCurrency(await Reach.balanceOf(account), 4);\n        setBalance(balance);\n    }\n\n    random() { return Reach.hasRandom.random(); }\n\n    async acceptWager(wager) {\n        const fmtWager = Reach.formatCurrency(wager, 4);\n        return await new Promise(res => {\n            console.log(\"acceptWager is called\");\n            this.setState({\n                appState: \"acceptWager\",\n                args: [fmtWager,],\n                resAcceptWager: res,\n            });\n        });\n    }\n    acceptWagerExt() {\n        console.log(\"acceptWager is called\");\n        this.state.resAcceptWager();\n    }\n\n    async getHand() {\n        const hand = await new Promise(res => {\n            console.log(\"getHand is called\");\n            this.setState({\n                appState: \"getHand\",\n                resGetHand: res,\n            });\n        });\n        console.log(hand);\n        return hand;\n    }\n    getHandExt(hand) {\n        console.log(\"getHandExt is called\");\n        this.state.resGetHand(hand);\n    }\n\n    async informTimeout() {\n        this.setState({\n            appState: \"informTimeout\",\n        });\n    }\n\n    async seeOutcome(outcome) {\n        const outcomeNumber = Reach.bigNumberToNumber(outcome);\n        this.setState({\n            appState: \"seeOutcome\",\n            args: [outcomeNumber],\n        });\n    }\n\n    render() {\n        return (<BobViews\n            appState={this.state.appState}\n            args={this.state.args}\n            getHandReady={this.state.resGetHand !== null}\n            getHand={this.getHandExt}\n            acceptWagerReady={this.state.resAcceptWager !== null}\n            acceptWager={this.acceptWagerExt} />);\n    }\n}"]},"metadata":{},"sourceType":"module"}