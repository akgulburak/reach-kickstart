{"ast":null,"code":"\"use strict\"; // DataView extension to handle int64 / uint64,\n// where the actual range is 53-bits integer (a.k.a. safe integer)\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getUint64 = exports.getInt64 = exports.setInt64 = exports.setUint64 = void 0;\n\nfunction setUint64(view, offset, value) {\n  const high = value / 4294967296;\n  const low = value; // high bits are truncated by DataView\n\n  view.setUint32(offset, high);\n  view.setUint32(offset + 4, low);\n}\n\nexports.setUint64 = setUint64;\n\nfunction setInt64(view, offset, value) {\n  const high = Math.floor(value / 4294967296);\n  const low = value; // high bits are truncated by DataView\n\n  view.setUint32(offset, high);\n  view.setUint32(offset + 4, low);\n}\n\nexports.setInt64 = setInt64;\n\nfunction getInt64(view, offset) {\n  const high = view.getInt32(offset);\n  const low = view.getUint32(offset + 4);\n  return high * 4294967296 + low;\n}\n\nexports.getInt64 = getInt64;\n\nfunction getUint64(view, offset) {\n  const high = view.getUint32(offset);\n  const low = view.getUint32(offset + 4);\n  return high * 4294967296 + low;\n}\n\nexports.getUint64 = getUint64;","map":{"version":3,"sources":["../../src/utils/int.ts"],"names":[],"mappings":"cAAA;AACA;;;;;;;AAEA,SAAgB,SAAhB,CAA0B,IAA1B,EAA0C,MAA1C,EAA0D,KAA1D,EAAuE;AACrE,QAAM,IAAI,GAAG,KAAK,GAAG,UAArB;AACA,QAAM,GAAG,GAAG,KAAZ,CAFqE,CAElD;;AACnB,EAAA,IAAI,CAAC,SAAL,CAAe,MAAf,EAAuB,IAAvB;AACA,EAAA,IAAI,CAAC,SAAL,CAAe,MAAM,GAAG,CAAxB,EAA2B,GAA3B;AACD;;AALD,OAAA,CAAA,SAAA,GAAA,SAAA;;AAOA,SAAgB,QAAhB,CAAyB,IAAzB,EAAyC,MAAzC,EAAyD,KAAzD,EAAsE;AACpE,QAAM,IAAI,GAAG,IAAI,CAAC,KAAL,CAAW,KAAK,GAAG,UAAnB,CAAb;AACA,QAAM,GAAG,GAAG,KAAZ,CAFoE,CAEjD;;AACnB,EAAA,IAAI,CAAC,SAAL,CAAe,MAAf,EAAuB,IAAvB;AACA,EAAA,IAAI,CAAC,SAAL,CAAe,MAAM,GAAG,CAAxB,EAA2B,GAA3B;AACD;;AALD,OAAA,CAAA,QAAA,GAAA,QAAA;;AAOA,SAAgB,QAAhB,CAAyB,IAAzB,EAAyC,MAAzC,EAAuD;AACrD,QAAM,IAAI,GAAG,IAAI,CAAC,QAAL,CAAc,MAAd,CAAb;AACA,QAAM,GAAG,GAAG,IAAI,CAAC,SAAL,CAAe,MAAM,GAAG,CAAxB,CAAZ;AACA,SAAO,IAAI,GAAG,UAAP,GAAuB,GAA9B;AACD;;AAJD,OAAA,CAAA,QAAA,GAAA,QAAA;;AAMA,SAAgB,SAAhB,CAA0B,IAA1B,EAA0C,MAA1C,EAAwD;AACtD,QAAM,IAAI,GAAG,IAAI,CAAC,SAAL,CAAe,MAAf,CAAb;AACA,QAAM,GAAG,GAAG,IAAI,CAAC,SAAL,CAAe,MAAM,GAAG,CAAxB,CAAZ;AACA,SAAO,IAAI,GAAG,UAAP,GAAuB,GAA9B;AACD;;AAJD,OAAA,CAAA,SAAA,GAAA,SAAA","sourceRoot":"","sourcesContent":["\"use strict\";\n// DataView extension to handle int64 / uint64,\n// where the actual range is 53-bits integer (a.k.a. safe integer)\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getUint64 = exports.getInt64 = exports.setInt64 = exports.setUint64 = void 0;\nfunction setUint64(view, offset, value) {\n    const high = value / 4294967296;\n    const low = value; // high bits are truncated by DataView\n    view.setUint32(offset, high);\n    view.setUint32(offset + 4, low);\n}\nexports.setUint64 = setUint64;\nfunction setInt64(view, offset, value) {\n    const high = Math.floor(value / 4294967296);\n    const low = value; // high bits are truncated by DataView\n    view.setUint32(offset, high);\n    view.setUint32(offset + 4, low);\n}\nexports.setInt64 = setInt64;\nfunction getInt64(view, offset) {\n    const high = view.getInt32(offset);\n    const low = view.getUint32(offset + 4);\n    return high * 4294967296 + low;\n}\nexports.getInt64 = getInt64;\nfunction getUint64(view, offset) {\n    const high = view.getUint32(offset);\n    const low = view.getUint32(offset + 4);\n    return high * 4294967296 + low;\n}\nexports.getUint64 = getUint64;\n//# sourceMappingURL=int.js.map"]},"metadata":{},"sourceType":"script"}