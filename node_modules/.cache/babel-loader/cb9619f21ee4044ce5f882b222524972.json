{"ast":null,"code":"const {\n  Buffer\n} = require('buffer');\n\nconst address = require('./encoding/address');\n\nconst encoding = require('./encoding/encoding');\n\nconst nacl = require('./nacl/naclWrappers');\n\nconst utils = require('./utils/utils');\n/**\n * Bid enables construction of Algorand Auctions Bids\n * */\n\n\nclass Bid {\n  constructor({\n    bidderKey,\n    bidAmount,\n    maxPrice,\n    bidID,\n    auctionKey,\n    auctionID\n  }) {\n    this.name = 'Bid';\n    this.tag = Buffer.from([97, 66]); // \"aB\"\n\n    const decodedBidderKey = address.decodeAddress(bidderKey);\n    const decodedAuctionKey = address.decodeAddress(auctionKey);\n    if (!Number.isSafeInteger(bidAmount) || bidAmount < 0) throw Error('Bid amount must be positive and 2^53-1');\n    if (!Number.isSafeInteger(bidID) || bidID < 0) throw Error('BidID must be positive and 2^53-1');\n    if (!Number.isSafeInteger(auctionID) || auctionID < 0) throw Error('auctionID must be positive');\n    Object.assign(this, {\n      bidderKey: decodedBidderKey,\n      auctionKey: decodedAuctionKey,\n      bidAmount,\n      maxPrice,\n      bidID,\n      auctionID\n    });\n  } // eslint-disable-next-line camelcase\n\n\n  get_obj_for_encoding() {\n    return {\n      bidder: Buffer.from(this.bidderKey.publicKey),\n      cur: this.bidAmount,\n      price: this.maxPrice,\n      id: this.bidID,\n      auc: Buffer.from(this.auctionKey.publicKey),\n      aid: this.auctionID\n    };\n  }\n\n  signBid(sk) {\n    const encodedMsg = encoding.encode(this.get_obj_for_encoding());\n    const toBeSigned = Buffer.from(utils.concatArrays(this.tag, encodedMsg));\n    const sig = nacl.sign(toBeSigned, sk); // construct signed message\n\n    const sBid = {\n      sig: Buffer.from(sig),\n      bid: this.get_obj_for_encoding()\n    };\n    const note = {\n      t: 'b',\n      b: sBid\n    };\n    return new Uint8Array(encoding.encode(note));\n  }\n\n}\n\nmodule.exports = {\n  Bid\n};","map":{"version":3,"sources":["/home/x/reach/kick/github/node_modules/algosdk/src/bid.js"],"names":["Buffer","require","address","encoding","nacl","utils","Bid","constructor","bidderKey","bidAmount","maxPrice","bidID","auctionKey","auctionID","name","tag","from","decodedBidderKey","decodeAddress","decodedAuctionKey","Number","isSafeInteger","Error","Object","assign","get_obj_for_encoding","bidder","publicKey","cur","price","id","auc","aid","signBid","sk","encodedMsg","encode","toBeSigned","concatArrays","sig","sign","sBid","bid","note","t","b","Uint8Array","module","exports"],"mappings":"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","sourcesContent":["const { Buffer } = require('buffer');\nconst address = require('./encoding/address');\nconst encoding = require('./encoding/encoding');\nconst nacl = require('./nacl/naclWrappers');\nconst utils = require('./utils/utils');\n\n/**\n * Bid enables construction of Algorand Auctions Bids\n * */\nclass Bid {\n  constructor({\n    bidderKey,\n    bidAmount,\n    maxPrice,\n    bidID,\n    auctionKey,\n    auctionID,\n  }) {\n    this.name = 'Bid';\n    this.tag = Buffer.from([97, 66]); // \"aB\"\n\n    const decodedBidderKey = address.decodeAddress(bidderKey);\n    const decodedAuctionKey = address.decodeAddress(auctionKey);\n\n    if (!Number.isSafeInteger(bidAmount) || bidAmount < 0)\n      throw Error('Bid amount must be positive and 2^53-1');\n    if (!Number.isSafeInteger(bidID) || bidID < 0)\n      throw Error('BidID must be positive and 2^53-1');\n    if (!Number.isSafeInteger(auctionID) || auctionID < 0)\n      throw Error('auctionID must be positive');\n\n    Object.assign(this, {\n      bidderKey: decodedBidderKey,\n      auctionKey: decodedAuctionKey,\n      bidAmount,\n      maxPrice,\n      bidID,\n      auctionID,\n    });\n  }\n\n  // eslint-disable-next-line camelcase\n  get_obj_for_encoding() {\n    return {\n      bidder: Buffer.from(this.bidderKey.publicKey),\n      cur: this.bidAmount,\n      price: this.maxPrice,\n      id: this.bidID,\n      auc: Buffer.from(this.auctionKey.publicKey),\n      aid: this.auctionID,\n    };\n  }\n\n  signBid(sk) {\n    const encodedMsg = encoding.encode(this.get_obj_for_encoding());\n    const toBeSigned = Buffer.from(utils.concatArrays(this.tag, encodedMsg));\n    const sig = nacl.sign(toBeSigned, sk);\n\n    // construct signed message\n    const sBid = {\n      sig: Buffer.from(sig),\n      bid: this.get_obj_for_encoding(),\n    };\n\n    const note = {\n      t: 'b',\n      b: sBid,\n    };\n    return new Uint8Array(encoding.encode(note));\n  }\n}\n\nmodule.exports = { Bid };\n"]},"metadata":{},"sourceType":"script"}