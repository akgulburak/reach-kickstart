{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Encoder = exports.DEFAULT_INITIAL_BUFFER_SIZE = exports.DEFAULT_MAX_DEPTH = void 0;\n\nconst utf8_1 = require(\"./utils/utf8\");\n\nconst ExtensionCodec_1 = require(\"./ExtensionCodec\");\n\nconst int_1 = require(\"./utils/int\");\n\nconst typedArrays_1 = require(\"./utils/typedArrays\");\n\nexports.DEFAULT_MAX_DEPTH = 100;\nexports.DEFAULT_INITIAL_BUFFER_SIZE = 2048;\n\nclass Encoder {\n  constructor(extensionCodec = ExtensionCodec_1.ExtensionCodec.defaultCodec, context = undefined, maxDepth = exports.DEFAULT_MAX_DEPTH, initialBufferSize = exports.DEFAULT_INITIAL_BUFFER_SIZE, sortKeys = false, forceFloat32 = false, ignoreUndefined = false, forceIntegerToFloat = false) {\n    this.extensionCodec = extensionCodec;\n    this.context = context;\n    this.maxDepth = maxDepth;\n    this.initialBufferSize = initialBufferSize;\n    this.sortKeys = sortKeys;\n    this.forceFloat32 = forceFloat32;\n    this.ignoreUndefined = ignoreUndefined;\n    this.forceIntegerToFloat = forceIntegerToFloat;\n    this.pos = 0;\n    this.view = new DataView(new ArrayBuffer(this.initialBufferSize));\n    this.bytes = new Uint8Array(this.view.buffer);\n  }\n\n  getUint8Array() {\n    return this.bytes.subarray(0, this.pos);\n  }\n\n  reinitializeState() {\n    this.pos = 0;\n  }\n\n  encode(object) {\n    this.reinitializeState();\n    this.doEncode(object, 1);\n    return this.getUint8Array();\n  }\n\n  doEncode(object, depth) {\n    if (depth > this.maxDepth) {\n      throw new Error(`Too deep objects in depth ${depth}`);\n    }\n\n    if (object == null) {\n      this.encodeNil();\n    } else if (typeof object === \"boolean\") {\n      this.encodeBoolean(object);\n    } else if (typeof object === \"number\") {\n      this.encodeNumber(object);\n    } else if (typeof object === \"string\") {\n      this.encodeString(object);\n    } else {\n      this.encodeObject(object, depth);\n    }\n  }\n\n  ensureBufferSizeToWrite(sizeToWrite) {\n    const requiredSize = this.pos + sizeToWrite;\n\n    if (this.view.byteLength < requiredSize) {\n      this.resizeBuffer(requiredSize * 2);\n    }\n  }\n\n  resizeBuffer(newSize) {\n    const newBuffer = new ArrayBuffer(newSize);\n    const newBytes = new Uint8Array(newBuffer);\n    const newView = new DataView(newBuffer);\n    newBytes.set(this.bytes);\n    this.view = newView;\n    this.bytes = newBytes;\n  }\n\n  encodeNil() {\n    this.writeU8(0xc0);\n  }\n\n  encodeBoolean(object) {\n    if (object === false) {\n      this.writeU8(0xc2);\n    } else {\n      this.writeU8(0xc3);\n    }\n  }\n\n  encodeNumber(object) {\n    if (Number.isSafeInteger(object) && !this.forceIntegerToFloat) {\n      if (object >= 0) {\n        if (object < 0x80) {\n          // positive fixint\n          this.writeU8(object);\n        } else if (object < 0x100) {\n          // uint 8\n          this.writeU8(0xcc);\n          this.writeU8(object);\n        } else if (object < 0x10000) {\n          // uint 16\n          this.writeU8(0xcd);\n          this.writeU16(object);\n        } else if (object < 0x100000000) {\n          // uint 32\n          this.writeU8(0xce);\n          this.writeU32(object);\n        } else {\n          // uint 64\n          this.writeU8(0xcf);\n          this.writeU64(object);\n        }\n      } else {\n        if (object >= -0x20) {\n          // nagative fixint\n          this.writeU8(0xe0 | object + 0x20);\n        } else if (object >= -0x80) {\n          // int 8\n          this.writeU8(0xd0);\n          this.writeI8(object);\n        } else if (object >= -0x8000) {\n          // int 16\n          this.writeU8(0xd1);\n          this.writeI16(object);\n        } else if (object >= -0x80000000) {\n          // int 32\n          this.writeU8(0xd2);\n          this.writeI32(object);\n        } else {\n          // int 64\n          this.writeU8(0xd3);\n          this.writeI64(object);\n        }\n      }\n    } else {\n      // non-integer numbers\n      if (this.forceFloat32) {\n        // float 32\n        this.writeU8(0xca);\n        this.writeF32(object);\n      } else {\n        // float 64\n        this.writeU8(0xcb);\n        this.writeF64(object);\n      }\n    }\n  }\n\n  writeStringHeader(byteLength) {\n    if (byteLength < 32) {\n      // fixstr\n      this.writeU8(0xa0 + byteLength);\n    } else if (byteLength < 0x100) {\n      // str 8\n      this.writeU8(0xd9);\n      this.writeU8(byteLength);\n    } else if (byteLength < 0x10000) {\n      // str 16\n      this.writeU8(0xda);\n      this.writeU16(byteLength);\n    } else if (byteLength < 0x100000000) {\n      // str 32\n      this.writeU8(0xdb);\n      this.writeU32(byteLength);\n    } else {\n      throw new Error(`Too long string: ${byteLength} bytes in UTF-8`);\n    }\n  }\n\n  encodeString(object) {\n    const maxHeaderSize = 1 + 4;\n    const strLength = object.length;\n\n    if (strLength > utf8_1.TEXT_ENCODER_THRESHOLD) {\n      const byteLength = utf8_1.utf8Count(object);\n      this.ensureBufferSizeToWrite(maxHeaderSize + byteLength);\n      this.writeStringHeader(byteLength);\n      utf8_1.utf8EncodeTE(object, this.bytes, this.pos);\n      this.pos += byteLength;\n    } else {\n      const byteLength = utf8_1.utf8Count(object);\n      this.ensureBufferSizeToWrite(maxHeaderSize + byteLength);\n      this.writeStringHeader(byteLength);\n      utf8_1.utf8EncodeJs(object, this.bytes, this.pos);\n      this.pos += byteLength;\n    }\n  }\n\n  encodeObject(object, depth) {\n    // try to encode objects with custom codec first of non-primitives\n    const ext = this.extensionCodec.tryToEncode(object, this.context);\n\n    if (ext != null) {\n      this.encodeExtension(ext);\n    } else if (Array.isArray(object)) {\n      this.encodeArray(object, depth);\n    } else if (ArrayBuffer.isView(object)) {\n      this.encodeBinary(object);\n    } else if (typeof object === \"object\") {\n      this.encodeMap(object, depth);\n    } else {\n      // symbol, function and other special object come here unless extensionCodec handles them.\n      throw new Error(`Unrecognized object: ${Object.prototype.toString.apply(object)}`);\n    }\n  }\n\n  encodeBinary(object) {\n    const size = object.byteLength;\n\n    if (size < 0x100) {\n      // bin 8\n      this.writeU8(0xc4);\n      this.writeU8(size);\n    } else if (size < 0x10000) {\n      // bin 16\n      this.writeU8(0xc5);\n      this.writeU16(size);\n    } else if (size < 0x100000000) {\n      // bin 32\n      this.writeU8(0xc6);\n      this.writeU32(size);\n    } else {\n      throw new Error(`Too large binary: ${size}`);\n    }\n\n    const bytes = typedArrays_1.ensureUint8Array(object);\n    this.writeU8a(bytes);\n  }\n\n  encodeArray(object, depth) {\n    const size = object.length;\n\n    if (size < 16) {\n      // fixarray\n      this.writeU8(0x90 + size);\n    } else if (size < 0x10000) {\n      // array 16\n      this.writeU8(0xdc);\n      this.writeU16(size);\n    } else if (size < 0x100000000) {\n      // array 32\n      this.writeU8(0xdd);\n      this.writeU32(size);\n    } else {\n      throw new Error(`Too large array: ${size}`);\n    }\n\n    for (const item of object) {\n      this.doEncode(item, depth + 1);\n    }\n  }\n\n  countWithoutUndefined(object, keys) {\n    let count = 0;\n\n    for (const key of keys) {\n      if (object[key] !== undefined) {\n        count++;\n      }\n    }\n\n    return count;\n  }\n\n  encodeMap(object, depth) {\n    const keys = Object.keys(object);\n\n    if (this.sortKeys) {\n      keys.sort();\n    }\n\n    const size = this.ignoreUndefined ? this.countWithoutUndefined(object, keys) : keys.length;\n\n    if (size < 16) {\n      // fixmap\n      this.writeU8(0x80 + size);\n    } else if (size < 0x10000) {\n      // map 16\n      this.writeU8(0xde);\n      this.writeU16(size);\n    } else if (size < 0x100000000) {\n      // map 32\n      this.writeU8(0xdf);\n      this.writeU32(size);\n    } else {\n      throw new Error(`Too large map object: ${size}`);\n    }\n\n    for (const key of keys) {\n      const value = object[key];\n\n      if (!(this.ignoreUndefined && value === undefined)) {\n        this.encodeString(key);\n        this.doEncode(value, depth + 1);\n      }\n    }\n  }\n\n  encodeExtension(ext) {\n    const size = ext.data.length;\n\n    if (size === 1) {\n      // fixext 1\n      this.writeU8(0xd4);\n    } else if (size === 2) {\n      // fixext 2\n      this.writeU8(0xd5);\n    } else if (size === 4) {\n      // fixext 4\n      this.writeU8(0xd6);\n    } else if (size === 8) {\n      // fixext 8\n      this.writeU8(0xd7);\n    } else if (size === 16) {\n      // fixext 16\n      this.writeU8(0xd8);\n    } else if (size < 0x100) {\n      // ext 8\n      this.writeU8(0xc7);\n      this.writeU8(size);\n    } else if (size < 0x10000) {\n      // ext 16\n      this.writeU8(0xc8);\n      this.writeU16(size);\n    } else if (size < 0x100000000) {\n      // ext 32\n      this.writeU8(0xc9);\n      this.writeU32(size);\n    } else {\n      throw new Error(`Too large extension object: ${size}`);\n    }\n\n    this.writeI8(ext.type);\n    this.writeU8a(ext.data);\n  }\n\n  writeU8(value) {\n    this.ensureBufferSizeToWrite(1);\n    this.view.setUint8(this.pos, value);\n    this.pos++;\n  }\n\n  writeU8a(values) {\n    const size = values.length;\n    this.ensureBufferSizeToWrite(size);\n    this.bytes.set(values, this.pos);\n    this.pos += size;\n  }\n\n  writeI8(value) {\n    this.ensureBufferSizeToWrite(1);\n    this.view.setInt8(this.pos, value);\n    this.pos++;\n  }\n\n  writeU16(value) {\n    this.ensureBufferSizeToWrite(2);\n    this.view.setUint16(this.pos, value);\n    this.pos += 2;\n  }\n\n  writeI16(value) {\n    this.ensureBufferSizeToWrite(2);\n    this.view.setInt16(this.pos, value);\n    this.pos += 2;\n  }\n\n  writeU32(value) {\n    this.ensureBufferSizeToWrite(4);\n    this.view.setUint32(this.pos, value);\n    this.pos += 4;\n  }\n\n  writeI32(value) {\n    this.ensureBufferSizeToWrite(4);\n    this.view.setInt32(this.pos, value);\n    this.pos += 4;\n  }\n\n  writeF32(value) {\n    this.ensureBufferSizeToWrite(4);\n    this.view.setFloat32(this.pos, value);\n    this.pos += 4;\n  }\n\n  writeF64(value) {\n    this.ensureBufferSizeToWrite(8);\n    this.view.setFloat64(this.pos, value);\n    this.pos += 8;\n  }\n\n  writeU64(value) {\n    this.ensureBufferSizeToWrite(8);\n    int_1.setUint64(this.view, this.pos, value);\n    this.pos += 8;\n  }\n\n  writeI64(value) {\n    this.ensureBufferSizeToWrite(8);\n    int_1.setInt64(this.view, this.pos, value);\n    this.pos += 8;\n  }\n\n}\n\nexports.Encoder = Encoder;","map":{"version":3,"sources":["../src/Encoder.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Encoder = exports.DEFAULT_INITIAL_BUFFER_SIZE = exports.DEFAULT_MAX_DEPTH = void 0;\nconst utf8_1 = require(\"./utils/utf8\");\nconst ExtensionCodec_1 = require(\"./ExtensionCodec\");\nconst int_1 = require(\"./utils/int\");\nconst typedArrays_1 = require(\"./utils/typedArrays\");\nexports.DEFAULT_MAX_DEPTH = 100;\nexports.DEFAULT_INITIAL_BUFFER_SIZE = 2048;\nclass Encoder {\n    constructor(extensionCodec = ExtensionCodec_1.ExtensionCodec.defaultCodec, context = undefined, maxDepth = exports.DEFAULT_MAX_DEPTH, initialBufferSize = exports.DEFAULT_INITIAL_BUFFER_SIZE, sortKeys = false, forceFloat32 = false, ignoreUndefined = false, forceIntegerToFloat = false) {\n        this.extensionCodec = extensionCodec;\n        this.context = context;\n        this.maxDepth = maxDepth;\n        this.initialBufferSize = initialBufferSize;\n        this.sortKeys = sortKeys;\n        this.forceFloat32 = forceFloat32;\n        this.ignoreUndefined = ignoreUndefined;\n        this.forceIntegerToFloat = forceIntegerToFloat;\n        this.pos = 0;\n        this.view = new DataView(new ArrayBuffer(this.initialBufferSize));\n        this.bytes = new Uint8Array(this.view.buffer);\n    }\n    getUint8Array() {\n        return this.bytes.subarray(0, this.pos);\n    }\n    reinitializeState() {\n        this.pos = 0;\n    }\n    encode(object) {\n        this.reinitializeState();\n        this.doEncode(object, 1);\n        return this.getUint8Array();\n    }\n    doEncode(object, depth) {\n        if (depth > this.maxDepth) {\n            throw new Error(`Too deep objects in depth ${depth}`);\n        }\n        if (object == null) {\n            this.encodeNil();\n        }\n        else if (typeof object === \"boolean\") {\n            this.encodeBoolean(object);\n        }\n        else if (typeof object === \"number\") {\n            this.encodeNumber(object);\n        }\n        else if (typeof object === \"string\") {\n            this.encodeString(object);\n        }\n        else {\n            this.encodeObject(object, depth);\n        }\n    }\n    ensureBufferSizeToWrite(sizeToWrite) {\n        const requiredSize = this.pos + sizeToWrite;\n        if (this.view.byteLength < requiredSize) {\n            this.resizeBuffer(requiredSize * 2);\n        }\n    }\n    resizeBuffer(newSize) {\n        const newBuffer = new ArrayBuffer(newSize);\n        const newBytes = new Uint8Array(newBuffer);\n        const newView = new DataView(newBuffer);\n        newBytes.set(this.bytes);\n        this.view = newView;\n        this.bytes = newBytes;\n    }\n    encodeNil() {\n        this.writeU8(0xc0);\n    }\n    encodeBoolean(object) {\n        if (object === false) {\n            this.writeU8(0xc2);\n        }\n        else {\n            this.writeU8(0xc3);\n        }\n    }\n    encodeNumber(object) {\n        if (Number.isSafeInteger(object) && !this.forceIntegerToFloat) {\n            if (object >= 0) {\n                if (object < 0x80) {\n                    // positive fixint\n                    this.writeU8(object);\n                }\n                else if (object < 0x100) {\n                    // uint 8\n                    this.writeU8(0xcc);\n                    this.writeU8(object);\n                }\n                else if (object < 0x10000) {\n                    // uint 16\n                    this.writeU8(0xcd);\n                    this.writeU16(object);\n                }\n                else if (object < 0x100000000) {\n                    // uint 32\n                    this.writeU8(0xce);\n                    this.writeU32(object);\n                }\n                else {\n                    // uint 64\n                    this.writeU8(0xcf);\n                    this.writeU64(object);\n                }\n            }\n            else {\n                if (object >= -0x20) {\n                    // nagative fixint\n                    this.writeU8(0xe0 | (object + 0x20));\n                }\n                else if (object >= -0x80) {\n                    // int 8\n                    this.writeU8(0xd0);\n                    this.writeI8(object);\n                }\n                else if (object >= -0x8000) {\n                    // int 16\n                    this.writeU8(0xd1);\n                    this.writeI16(object);\n                }\n                else if (object >= -0x80000000) {\n                    // int 32\n                    this.writeU8(0xd2);\n                    this.writeI32(object);\n                }\n                else {\n                    // int 64\n                    this.writeU8(0xd3);\n                    this.writeI64(object);\n                }\n            }\n        }\n        else {\n            // non-integer numbers\n            if (this.forceFloat32) {\n                // float 32\n                this.writeU8(0xca);\n                this.writeF32(object);\n            }\n            else {\n                // float 64\n                this.writeU8(0xcb);\n                this.writeF64(object);\n            }\n        }\n    }\n    writeStringHeader(byteLength) {\n        if (byteLength < 32) {\n            // fixstr\n            this.writeU8(0xa0 + byteLength);\n        }\n        else if (byteLength < 0x100) {\n            // str 8\n            this.writeU8(0xd9);\n            this.writeU8(byteLength);\n        }\n        else if (byteLength < 0x10000) {\n            // str 16\n            this.writeU8(0xda);\n            this.writeU16(byteLength);\n        }\n        else if (byteLength < 0x100000000) {\n            // str 32\n            this.writeU8(0xdb);\n            this.writeU32(byteLength);\n        }\n        else {\n            throw new Error(`Too long string: ${byteLength} bytes in UTF-8`);\n        }\n    }\n    encodeString(object) {\n        const maxHeaderSize = 1 + 4;\n        const strLength = object.length;\n        if (strLength > utf8_1.TEXT_ENCODER_THRESHOLD) {\n            const byteLength = utf8_1.utf8Count(object);\n            this.ensureBufferSizeToWrite(maxHeaderSize + byteLength);\n            this.writeStringHeader(byteLength);\n            utf8_1.utf8EncodeTE(object, this.bytes, this.pos);\n            this.pos += byteLength;\n        }\n        else {\n            const byteLength = utf8_1.utf8Count(object);\n            this.ensureBufferSizeToWrite(maxHeaderSize + byteLength);\n            this.writeStringHeader(byteLength);\n            utf8_1.utf8EncodeJs(object, this.bytes, this.pos);\n            this.pos += byteLength;\n        }\n    }\n    encodeObject(object, depth) {\n        // try to encode objects with custom codec first of non-primitives\n        const ext = this.extensionCodec.tryToEncode(object, this.context);\n        if (ext != null) {\n            this.encodeExtension(ext);\n        }\n        else if (Array.isArray(object)) {\n            this.encodeArray(object, depth);\n        }\n        else if (ArrayBuffer.isView(object)) {\n            this.encodeBinary(object);\n        }\n        else if (typeof object === \"object\") {\n            this.encodeMap(object, depth);\n        }\n        else {\n            // symbol, function and other special object come here unless extensionCodec handles them.\n            throw new Error(`Unrecognized object: ${Object.prototype.toString.apply(object)}`);\n        }\n    }\n    encodeBinary(object) {\n        const size = object.byteLength;\n        if (size < 0x100) {\n            // bin 8\n            this.writeU8(0xc4);\n            this.writeU8(size);\n        }\n        else if (size < 0x10000) {\n            // bin 16\n            this.writeU8(0xc5);\n            this.writeU16(size);\n        }\n        else if (size < 0x100000000) {\n            // bin 32\n            this.writeU8(0xc6);\n            this.writeU32(size);\n        }\n        else {\n            throw new Error(`Too large binary: ${size}`);\n        }\n        const bytes = typedArrays_1.ensureUint8Array(object);\n        this.writeU8a(bytes);\n    }\n    encodeArray(object, depth) {\n        const size = object.length;\n        if (size < 16) {\n            // fixarray\n            this.writeU8(0x90 + size);\n        }\n        else if (size < 0x10000) {\n            // array 16\n            this.writeU8(0xdc);\n            this.writeU16(size);\n        }\n        else if (size < 0x100000000) {\n            // array 32\n            this.writeU8(0xdd);\n            this.writeU32(size);\n        }\n        else {\n            throw new Error(`Too large array: ${size}`);\n        }\n        for (const item of object) {\n            this.doEncode(item, depth + 1);\n        }\n    }\n    countWithoutUndefined(object, keys) {\n        let count = 0;\n        for (const key of keys) {\n            if (object[key] !== undefined) {\n                count++;\n            }\n        }\n        return count;\n    }\n    encodeMap(object, depth) {\n        const keys = Object.keys(object);\n        if (this.sortKeys) {\n            keys.sort();\n        }\n        const size = this.ignoreUndefined ? this.countWithoutUndefined(object, keys) : keys.length;\n        if (size < 16) {\n            // fixmap\n            this.writeU8(0x80 + size);\n        }\n        else if (size < 0x10000) {\n            // map 16\n            this.writeU8(0xde);\n            this.writeU16(size);\n        }\n        else if (size < 0x100000000) {\n            // map 32\n            this.writeU8(0xdf);\n            this.writeU32(size);\n        }\n        else {\n            throw new Error(`Too large map object: ${size}`);\n        }\n        for (const key of keys) {\n            const value = object[key];\n            if (!(this.ignoreUndefined && value === undefined)) {\n                this.encodeString(key);\n                this.doEncode(value, depth + 1);\n            }\n        }\n    }\n    encodeExtension(ext) {\n        const size = ext.data.length;\n        if (size === 1) {\n            // fixext 1\n            this.writeU8(0xd4);\n        }\n        else if (size === 2) {\n            // fixext 2\n            this.writeU8(0xd5);\n        }\n        else if (size === 4) {\n            // fixext 4\n            this.writeU8(0xd6);\n        }\n        else if (size === 8) {\n            // fixext 8\n            this.writeU8(0xd7);\n        }\n        else if (size === 16) {\n            // fixext 16\n            this.writeU8(0xd8);\n        }\n        else if (size < 0x100) {\n            // ext 8\n            this.writeU8(0xc7);\n            this.writeU8(size);\n        }\n        else if (size < 0x10000) {\n            // ext 16\n            this.writeU8(0xc8);\n            this.writeU16(size);\n        }\n        else if (size < 0x100000000) {\n            // ext 32\n            this.writeU8(0xc9);\n            this.writeU32(size);\n        }\n        else {\n            throw new Error(`Too large extension object: ${size}`);\n        }\n        this.writeI8(ext.type);\n        this.writeU8a(ext.data);\n    }\n    writeU8(value) {\n        this.ensureBufferSizeToWrite(1);\n        this.view.setUint8(this.pos, value);\n        this.pos++;\n    }\n    writeU8a(values) {\n        const size = values.length;\n        this.ensureBufferSizeToWrite(size);\n        this.bytes.set(values, this.pos);\n        this.pos += size;\n    }\n    writeI8(value) {\n        this.ensureBufferSizeToWrite(1);\n        this.view.setInt8(this.pos, value);\n        this.pos++;\n    }\n    writeU16(value) {\n        this.ensureBufferSizeToWrite(2);\n        this.view.setUint16(this.pos, value);\n        this.pos += 2;\n    }\n    writeI16(value) {\n        this.ensureBufferSizeToWrite(2);\n        this.view.setInt16(this.pos, value);\n        this.pos += 2;\n    }\n    writeU32(value) {\n        this.ensureBufferSizeToWrite(4);\n        this.view.setUint32(this.pos, value);\n        this.pos += 4;\n    }\n    writeI32(value) {\n        this.ensureBufferSizeToWrite(4);\n        this.view.setInt32(this.pos, value);\n        this.pos += 4;\n    }\n    writeF32(value) {\n        this.ensureBufferSizeToWrite(4);\n        this.view.setFloat32(this.pos, value);\n        this.pos += 4;\n    }\n    writeF64(value) {\n        this.ensureBufferSizeToWrite(8);\n        this.view.setFloat64(this.pos, value);\n        this.pos += 8;\n    }\n    writeU64(value) {\n        this.ensureBufferSizeToWrite(8);\n        int_1.setUint64(this.view, this.pos, value);\n        this.pos += 8;\n    }\n    writeI64(value) {\n        this.ensureBufferSizeToWrite(8);\n        int_1.setInt64(this.view, this.pos, value);\n        this.pos += 8;\n    }\n}\nexports.Encoder = Encoder;\n//# sourceMappingURL=Encoder.js.map"]},"metadata":{},"sourceType":"script"}