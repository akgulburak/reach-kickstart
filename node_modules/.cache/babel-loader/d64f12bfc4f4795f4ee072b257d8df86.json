{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.encode = void 0;\n\nconst Encoder_1 = require(\"./Encoder\");\n\nconst defaultEncodeOptions = {};\n/**\n * It encodes `value` in the MessagePack format and\n * returns a byte buffer.\n *\n * The returned buffer is a slice of a larger `ArrayBuffer`, so you have to use its `#byteOffset` and `#byteLength` in order to convert it to another typed arrays including NodeJS `Buffer`.\n */\n\nfunction encode(value, options = defaultEncodeOptions) {\n  const encoder = new Encoder_1.Encoder(options.extensionCodec, options.context, options.maxDepth, options.initialBufferSize, options.sortKeys, options.forceFloat32, options.ignoreUndefined, options.forceIntegerToFloat);\n  return encoder.encode(value);\n}\n\nexports.encode = encode;","map":{"version":3,"sources":["../src/encode.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,SAAA,GAAA,OAAA,CAAA,WAAA,CAAA;;AAqCA,MAAM,oBAAoB,GAAkB,EAA5C;AAEA;;;;;AAKG;;AACH,SAAgB,MAAhB,CACE,KADF,EAEE,OAAA,GAAsD,oBAFxD,EAEmF;AAEjF,QAAM,OAAO,GAAG,IAAI,SAAA,CAAA,OAAJ,CACd,OAAO,CAAC,cADM,EAEb,OAA6C,CAAC,OAFjC,EAGd,OAAO,CAAC,QAHM,EAId,OAAO,CAAC,iBAJM,EAKd,OAAO,CAAC,QALM,EAMd,OAAO,CAAC,YANM,EAOd,OAAO,CAAC,eAPM,EAQd,OAAO,CAAC,mBARM,CAAhB;AAUA,SAAO,OAAO,CAAC,MAAR,CAAe,KAAf,CAAP;AACD;;AAfD,OAAA,CAAA,MAAA,GAAA,MAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.encode = void 0;\nconst Encoder_1 = require(\"./Encoder\");\nconst defaultEncodeOptions = {};\n/**\n * It encodes `value` in the MessagePack format and\n * returns a byte buffer.\n *\n * The returned buffer is a slice of a larger `ArrayBuffer`, so you have to use its `#byteOffset` and `#byteLength` in order to convert it to another typed arrays including NodeJS `Buffer`.\n */\nfunction encode(value, options = defaultEncodeOptions) {\n    const encoder = new Encoder_1.Encoder(options.extensionCodec, options.context, options.maxDepth, options.initialBufferSize, options.sortKeys, options.forceFloat32, options.ignoreUndefined, options.forceIntegerToFloat);\n    return encoder.encode(value);\n}\nexports.encode = encode;\n//# sourceMappingURL=encode.js.map"]},"metadata":{},"sourceType":"script"}