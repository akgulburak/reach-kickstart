{"ast":null,"code":"const nacl = require('tweetnacl');\n\nconst sha512 = require('js-sha512');\n\nfunction genericHash(arr) {\n  return sha512.sha512_256.array(arr);\n}\n\nfunction randomBytes(length) {\n  return nacl.randomBytes(length);\n}\n\nfunction keyPairFromSeed(seed) {\n  return nacl.sign.keyPair.fromSeed(seed);\n}\n\nfunction keyPair() {\n  const seed = randomBytes(nacl.box.secretKeyLength);\n  return keyPairFromSeed(seed);\n}\n\nfunction keyPairFromSecretKey(sk) {\n  return nacl.sign.keyPair.fromSecretKey(sk);\n}\n\nfunction sign(msg, secretKey) {\n  return nacl.sign.detached(msg, secretKey);\n}\n\nfunction bytesEqual(a, b) {\n  return nacl.verify(a, b);\n}\n\nfunction verify(message, signature, verifyKey) {\n  return nacl.sign.detached.verify(message, signature, verifyKey);\n}\n\nmodule.exports = {\n  genericHash,\n  randomBytes,\n  keyPair,\n  sign,\n  keyPairFromSeed,\n  keyPairFromSecretKey,\n  bytesEqual,\n  verify\n}; // constants\n\nmodule.exports.PUBLIC_KEY_LENGTH = nacl.sign.publicKeyLength;\nmodule.exports.SECRET_KEY_LENGTH = nacl.sign.secretKeyLength;\nmodule.exports.HASH_BYTES_LENGTH = 32;\nmodule.exports.SEED_BTYES_LENGTH = 32;","map":{"version":3,"sources":["/home/x/reach/kick/github/node_modules/algosdk/src/nacl/naclWrappers.js"],"names":["nacl","require","sha512","genericHash","arr","sha512_256","array","randomBytes","length","keyPairFromSeed","seed","sign","keyPair","fromSeed","box","secretKeyLength","keyPairFromSecretKey","sk","fromSecretKey","msg","secretKey","detached","bytesEqual","a","b","verify","message","signature","verifyKey","module","exports","PUBLIC_KEY_LENGTH","publicKeyLength","SECRET_KEY_LENGTH","HASH_BYTES_LENGTH","SEED_BTYES_LENGTH"],"mappings":"AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,WAAD,CAApB;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,WAAD,CAAtB;;AAEA,SAASE,WAAT,CAAqBC,GAArB,EAA0B;AACxB,SAAOF,MAAM,CAACG,UAAP,CAAkBC,KAAlB,CAAwBF,GAAxB,CAAP;AACD;;AAED,SAASG,WAAT,CAAqBC,MAArB,EAA6B;AAC3B,SAAOR,IAAI,CAACO,WAAL,CAAiBC,MAAjB,CAAP;AACD;;AAED,SAASC,eAAT,CAAyBC,IAAzB,EAA+B;AAC7B,SAAOV,IAAI,CAACW,IAAL,CAAUC,OAAV,CAAkBC,QAAlB,CAA2BH,IAA3B,CAAP;AACD;;AAED,SAASE,OAAT,GAAmB;AACjB,QAAMF,IAAI,GAAGH,WAAW,CAACP,IAAI,CAACc,GAAL,CAASC,eAAV,CAAxB;AACA,SAAON,eAAe,CAACC,IAAD,CAAtB;AACD;;AAED,SAASM,oBAAT,CAA8BC,EAA9B,EAAkC;AAChC,SAAOjB,IAAI,CAACW,IAAL,CAAUC,OAAV,CAAkBM,aAAlB,CAAgCD,EAAhC,CAAP;AACD;;AAED,SAASN,IAAT,CAAcQ,GAAd,EAAmBC,SAAnB,EAA8B;AAC5B,SAAOpB,IAAI,CAACW,IAAL,CAAUU,QAAV,CAAmBF,GAAnB,EAAwBC,SAAxB,CAAP;AACD;;AAED,SAASE,UAAT,CAAoBC,CAApB,EAAuBC,CAAvB,EAA0B;AACxB,SAAOxB,IAAI,CAACyB,MAAL,CAAYF,CAAZ,EAAeC,CAAf,CAAP;AACD;;AAED,SAASC,MAAT,CAAgBC,OAAhB,EAAyBC,SAAzB,EAAoCC,SAApC,EAA+C;AAC7C,SAAO5B,IAAI,CAACW,IAAL,CAAUU,QAAV,CAAmBI,MAAnB,CAA0BC,OAA1B,EAAmCC,SAAnC,EAA8CC,SAA9C,CAAP;AACD;;AAEDC,MAAM,CAACC,OAAP,GAAiB;AACf3B,EAAAA,WADe;AAEfI,EAAAA,WAFe;AAGfK,EAAAA,OAHe;AAIfD,EAAAA,IAJe;AAKfF,EAAAA,eALe;AAMfO,EAAAA,oBANe;AAOfM,EAAAA,UAPe;AAQfG,EAAAA;AARe,CAAjB,C,CAWA;;AACAI,MAAM,CAACC,OAAP,CAAeC,iBAAf,GAAmC/B,IAAI,CAACW,IAAL,CAAUqB,eAA7C;AACAH,MAAM,CAACC,OAAP,CAAeG,iBAAf,GAAmCjC,IAAI,CAACW,IAAL,CAAUI,eAA7C;AACAc,MAAM,CAACC,OAAP,CAAeI,iBAAf,GAAmC,EAAnC;AACAL,MAAM,CAACC,OAAP,CAAeK,iBAAf,GAAmC,EAAnC","sourcesContent":["const nacl = require('tweetnacl');\nconst sha512 = require('js-sha512');\n\nfunction genericHash(arr) {\n  return sha512.sha512_256.array(arr);\n}\n\nfunction randomBytes(length) {\n  return nacl.randomBytes(length);\n}\n\nfunction keyPairFromSeed(seed) {\n  return nacl.sign.keyPair.fromSeed(seed);\n}\n\nfunction keyPair() {\n  const seed = randomBytes(nacl.box.secretKeyLength);\n  return keyPairFromSeed(seed);\n}\n\nfunction keyPairFromSecretKey(sk) {\n  return nacl.sign.keyPair.fromSecretKey(sk);\n}\n\nfunction sign(msg, secretKey) {\n  return nacl.sign.detached(msg, secretKey);\n}\n\nfunction bytesEqual(a, b) {\n  return nacl.verify(a, b);\n}\n\nfunction verify(message, signature, verifyKey) {\n  return nacl.sign.detached.verify(message, signature, verifyKey);\n}\n\nmodule.exports = {\n  genericHash,\n  randomBytes,\n  keyPair,\n  sign,\n  keyPairFromSeed,\n  keyPairFromSecretKey,\n  bytesEqual,\n  verify,\n};\n\n// constants\nmodule.exports.PUBLIC_KEY_LENGTH = nacl.sign.publicKeyLength;\nmodule.exports.SECRET_KEY_LENGTH = nacl.sign.secretKeyLength;\nmodule.exports.HASH_BYTES_LENGTH = 32;\nmodule.exports.SEED_BTYES_LENGTH = 32;\n"]},"metadata":{},"sourceType":"script"}