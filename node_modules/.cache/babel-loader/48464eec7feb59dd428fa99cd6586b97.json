{"ast":null,"code":"var _jsxFileName = \"/home/x/reach/kick/app/reach-react-template/src/components/participants/Voter.js\";\nimport { Component } from \"react\";\nimport * as Backend from \"../../build/index.main.mjs\";\nimport * as Reach from \"@reach-sh/stdlib/ALGO\";\nimport { Context } from \"../../Context\";\nimport VoterViews from \"./VoterViews\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class Voter extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      appState: \"\",\n      args: []\n      /* Resolves */\n\n    }; // Bind functions\n  }\n\n  componentDidMount() {\n    //const [, , , , , ,ctc, ,ctcArgs] = this.context;\n    const [,,,,,, ctc] = this.context; // Paranın 20 saniyede güncellenmesi\n\n    this.interval = setInterval(async () => await this.updateBalance(), 20000); // Kontrat argümanları\n\n    /*        this.argument1 = ctc.ctcArgs[0];\n            this.wager = ctc.A*/\n    // Reach'e bağlan\n\n    Backend.Voter(ctc[0], this);\n  }\n\n  async updateBalance() {\n    const [account,,, setBalance] = this.context;\n    const balance = Reach.formatCurrency(await Reach.balanceOf(account), 4);\n    setBalance(balance);\n  }\n\n  async getChoice() {\n    this.setState({\n      appState: \"getChoice\",\n      args: null\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(VoterViews, {\n      appState: this.state.appState,\n      args: this.state.args\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 16\n    }, this);\n  }\n\n}\nVoter.contextType = Context;","map":{"version":3,"sources":["/home/x/reach/kick/app/reach-react-template/src/components/participants/Voter.js"],"names":["Component","Backend","Reach","Context","VoterViews","Voter","constructor","props","state","appState","args","componentDidMount","ctc","context","interval","setInterval","updateBalance","account","setBalance","balance","formatCurrency","balanceOf","getChoice","setState","render","contextType"],"mappings":";AAAA,SAAQA,SAAR,QAAwB,OAAxB;AACA,OAAO,KAAKC,OAAZ,MAAyB,4BAAzB;AACA,OAAO,KAAKC,KAAZ,MAAuB,uBAAvB;AAEA,SAASC,OAAT,QAAwB,eAAxB;AACA,OAAOC,UAAP,MAAuB,cAAvB;;AAEA,OAAO,MAAMC,KAAN,SAAoBL,SAApB,CAA8B;AAGjCM,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACTC,MAAAA,QAAQ,EAAE,EADD;AAETC,MAAAA,IAAI,EAAE;AACN;;AAHS,KAAb,CAHc,CAUd;AAEH;;AAEDC,EAAAA,iBAAiB,GAAG;AAChB;AACA,UAAM,QAAYC,GAAZ,IAAoB,KAAKC,OAA/B,CAFgB,CAGhB;;AACA,SAAKC,QAAL,GAAgBC,WAAW,CAAC,YAAY,MAAM,KAAKC,aAAL,EAAnB,EAAyC,KAAzC,CAA3B,CAJgB,CAMhB;;AACR;AACA;AAEQ;;AACAf,IAAAA,OAAO,CAACI,KAAR,CAAcO,GAAG,CAAC,CAAD,CAAjB,EAAqB,IAArB;AACH;;AAEkB,QAAbI,aAAa,GAAG;AAClB,UAAM,CAACC,OAAD,IAAcC,UAAd,IAA4B,KAAKL,OAAvC;AAEA,UAAMM,OAAO,GAAGjB,KAAK,CAACkB,cAAN,CAAqB,MAAMlB,KAAK,CAACmB,SAAN,CAAgBJ,OAAhB,CAA3B,EAAqD,CAArD,CAAhB;AACAC,IAAAA,UAAU,CAACC,OAAD,CAAV;AACH;;AAEc,QAATG,SAAS,GAAG;AACd,SAAKC,QAAL,CAAc;AACVd,MAAAA,QAAQ,EAAE,WADA;AAEVC,MAAAA,IAAI,EAAE;AAFI,KAAd;AAIH;;AAEDc,EAAAA,MAAM,GAAE;AACJ,wBAAO,QAAC,UAAD;AACH,MAAA,QAAQ,EAAE,KAAKhB,KAAL,CAAWC,QADlB;AAEH,MAAA,IAAI,EAAE,KAAKD,KAAL,CAAWE;AAFd;AAAA;AAAA;AAAA;AAAA,YAAP;AAIH;;AAlDgC;AAAxBL,K,CACFoB,W,GAActB,O","sourcesContent":["import {Component} from \"react\";\nimport * as Backend from \"../../build/index.main.mjs\";\nimport * as Reach from \"@reach-sh/stdlib/ALGO\";\n\nimport { Context } from \"../../Context\";\nimport VoterViews from \"./VoterViews\";\n\nexport class Voter extends Component {\n    static contextType = Context;\n\n    constructor(props){\n        super(props);\n\n        this.state = {\n            appState: \"\",\n            args: [],\n            /* Resolves */\n\n        }\n\n        // Bind functions\n\n    }\n\n    componentDidMount() {\n        //const [, , , , , ,ctc, ,ctcArgs] = this.context;\n        const [, , , , , ,ctc,] = this.context;\n        // Paranın 20 saniyede güncellenmesi\n        this.interval = setInterval(async () => await this.updateBalance(), 20000);\n        \n        // Kontrat argümanları\n/*        this.argument1 = ctc.ctcArgs[0];\n        this.wager = ctc.A*/\n\n        // Reach'e bağlan\n        Backend.Voter(ctc[0],this);\n    }\n\n    async updateBalance() {\n        const [account, , , setBalance] = this.context;\n\n        const balance = Reach.formatCurrency(await Reach.balanceOf(account), 4);\n        setBalance(balance);\n    }\n\n    async getChoice() {\n        this.setState({\n            appState: \"getChoice\",\n            args: null\n        })\n    }\n\n    render(){\n        return(<VoterViews\n            appState={this.state.appState}\n            args={this.state.args}\n            />);\n    }\n}"]},"metadata":{},"sourceType":"module"}