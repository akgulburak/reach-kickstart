{"ast":null,"code":"const encoding = require('../../../encoding/encoding');\n\nclass PendingTransactions {\n  constructor(c) {\n    this.c = c;\n    this.query = {};\n    this.query.format = 'msgpack';\n  }\n  /**\n   * pendingTransactionsInformation returns transactions that are pending in the pool\n   * @param headers, optional\n   * @returns {Promise<*>}\n   */\n\n\n  async do(headers = {}) {\n    const res = await this.c.get('/v2/transactions/pending', this.query, headers);\n\n    if (res.body && res.body.byteLength > 0) {\n      return encoding.decode(res.body);\n    }\n\n    return undefined;\n  } // max sets the maximum number of txs to return\n\n\n  max(max) {\n    this.query.max = max;\n    return this;\n  }\n\n}\n\nmodule.exports = {\n  PendingTransactions\n};","map":{"version":3,"sources":["/home/x/reach/kick/app/reach-react-template/node_modules/algosdk/src/client/v2/algod/pendingTransactions.js"],"names":["encoding","require","PendingTransactions","constructor","c","query","format","do","headers","res","get","body","byteLength","decode","undefined","max","module","exports"],"mappings":"AAAA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,4BAAD,CAAxB;;AAEA,MAAMC,mBAAN,CAA0B;AACxBC,EAAAA,WAAW,CAACC,CAAD,EAAI;AACb,SAAKA,CAAL,GAASA,CAAT;AACA,SAAKC,KAAL,GAAa,EAAb;AACA,SAAKA,KAAL,CAAWC,MAAX,GAAoB,SAApB;AACD;AAED;AACF;AACA;AACA;AACA;;;AACU,QAAFC,EAAE,CAACC,OAAO,GAAG,EAAX,EAAe;AACrB,UAAMC,GAAG,GAAG,MAAM,KAAKL,CAAL,CAAOM,GAAP,CAChB,0BADgB,EAEhB,KAAKL,KAFW,EAGhBG,OAHgB,CAAlB;;AAKA,QAAIC,GAAG,CAACE,IAAJ,IAAYF,GAAG,CAACE,IAAJ,CAASC,UAAT,GAAsB,CAAtC,EAAyC;AACvC,aAAOZ,QAAQ,CAACa,MAAT,CAAgBJ,GAAG,CAACE,IAApB,CAAP;AACD;;AACD,WAAOG,SAAP;AACD,GAtBuB,CAwBxB;;;AACAC,EAAAA,GAAG,CAACA,GAAD,EAAM;AACP,SAAKV,KAAL,CAAWU,GAAX,GAAiBA,GAAjB;AACA,WAAO,IAAP;AACD;;AA5BuB;;AA+B1BC,MAAM,CAACC,OAAP,GAAiB;AAAEf,EAAAA;AAAF,CAAjB","sourcesContent":["const encoding = require('../../../encoding/encoding');\n\nclass PendingTransactions {\n  constructor(c) {\n    this.c = c;\n    this.query = {};\n    this.query.format = 'msgpack';\n  }\n\n  /**\n   * pendingTransactionsInformation returns transactions that are pending in the pool\n   * @param headers, optional\n   * @returns {Promise<*>}\n   */\n  async do(headers = {}) {\n    const res = await this.c.get(\n      '/v2/transactions/pending',\n      this.query,\n      headers\n    );\n    if (res.body && res.body.byteLength > 0) {\n      return encoding.decode(res.body);\n    }\n    return undefined;\n  }\n\n  // max sets the maximum number of txs to return\n  max(max) {\n    this.query.max = max;\n    return this;\n  }\n}\n\nmodule.exports = { PendingTransactions };\n"]},"metadata":{},"sourceType":"script"}