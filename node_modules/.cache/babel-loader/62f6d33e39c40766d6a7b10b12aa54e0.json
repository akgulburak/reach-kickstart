{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.utf8DecodeTD = exports.TEXT_DECODER_THRESHOLD = exports.utf8DecodeJs = exports.utf8EncodeTE = exports.TEXT_ENCODER_THRESHOLD = exports.utf8EncodeJs = exports.utf8Count = void 0;\nconst TEXT_ENCODING_AVAILABLE = (typeof process === \"undefined\" || process.env[\"TEXT_ENCODING\"] !== \"never\") && typeof TextEncoder !== \"undefined\" && typeof TextDecoder !== \"undefined\";\nconst STR_SIZE_MAX = 4294967295; // uint32_max\n\nfunction utf8Count(str) {\n  const strLength = str.length;\n  let byteLength = 0;\n  let pos = 0;\n\n  while (pos < strLength) {\n    let value = str.charCodeAt(pos++);\n\n    if ((value & 0xffffff80) === 0) {\n      // 1-byte\n      byteLength++;\n      continue;\n    } else if ((value & 0xfffff800) === 0) {\n      // 2-bytes\n      byteLength += 2;\n    } else {\n      // handle surrogate pair\n      if (value >= 0xd800 && value <= 0xdbff) {\n        // high surrogate\n        if (pos < strLength) {\n          const extra = str.charCodeAt(pos);\n\n          if ((extra & 0xfc00) === 0xdc00) {\n            ++pos;\n            value = ((value & 0x3ff) << 10) + (extra & 0x3ff) + 0x10000;\n          }\n        }\n      }\n\n      if ((value & 0xffff0000) === 0) {\n        // 3-byte\n        byteLength += 3;\n      } else {\n        // 4-byte\n        byteLength += 4;\n      }\n    }\n  }\n\n  return byteLength;\n}\n\nexports.utf8Count = utf8Count;\n\nfunction utf8EncodeJs(str, output, outputOffset) {\n  const strLength = str.length;\n  let offset = outputOffset;\n  let pos = 0;\n\n  while (pos < strLength) {\n    let value = str.charCodeAt(pos++);\n\n    if ((value & 0xffffff80) === 0) {\n      // 1-byte\n      output[offset++] = value;\n      continue;\n    } else if ((value & 0xfffff800) === 0) {\n      // 2-bytes\n      output[offset++] = value >> 6 & 0x1f | 0xc0;\n    } else {\n      // handle surrogate pair\n      if (value >= 0xd800 && value <= 0xdbff) {\n        // high surrogate\n        if (pos < strLength) {\n          const extra = str.charCodeAt(pos);\n\n          if ((extra & 0xfc00) === 0xdc00) {\n            ++pos;\n            value = ((value & 0x3ff) << 10) + (extra & 0x3ff) + 0x10000;\n          }\n        }\n      }\n\n      if ((value & 0xffff0000) === 0) {\n        // 3-byte\n        output[offset++] = value >> 12 & 0x0f | 0xe0;\n        output[offset++] = value >> 6 & 0x3f | 0x80;\n      } else {\n        // 4-byte\n        output[offset++] = value >> 18 & 0x07 | 0xf0;\n        output[offset++] = value >> 12 & 0x3f | 0x80;\n        output[offset++] = value >> 6 & 0x3f | 0x80;\n      }\n    }\n\n    output[offset++] = value & 0x3f | 0x80;\n  }\n}\n\nexports.utf8EncodeJs = utf8EncodeJs;\nconst sharedTextEncoder = TEXT_ENCODING_AVAILABLE ? new TextEncoder() : undefined;\nexports.TEXT_ENCODER_THRESHOLD = !TEXT_ENCODING_AVAILABLE ? STR_SIZE_MAX : typeof process !== \"undefined\" && process.env[\"TEXT_ENCODING\"] !== \"force\" ? 200 : 0;\n\nfunction utf8EncodeTEencode(str, output, outputOffset) {\n  output.set(sharedTextEncoder.encode(str), outputOffset);\n}\n\nfunction utf8EncodeTEencodeInto(str, output, outputOffset) {\n  sharedTextEncoder.encodeInto(str, output.subarray(outputOffset));\n}\n\nexports.utf8EncodeTE = (sharedTextEncoder === null || sharedTextEncoder === void 0 ? void 0 : sharedTextEncoder.encodeInto) ? utf8EncodeTEencodeInto : utf8EncodeTEencode;\nconst CHUNK_SIZE = 4096;\n\nfunction utf8DecodeJs(bytes, inputOffset, byteLength) {\n  let offset = inputOffset;\n  const end = offset + byteLength;\n  const units = [];\n  let result = \"\";\n\n  while (offset < end) {\n    const byte1 = bytes[offset++];\n\n    if ((byte1 & 0x80) === 0) {\n      // 1 byte\n      units.push(byte1);\n    } else if ((byte1 & 0xe0) === 0xc0) {\n      // 2 bytes\n      const byte2 = bytes[offset++] & 0x3f;\n      units.push((byte1 & 0x1f) << 6 | byte2);\n    } else if ((byte1 & 0xf0) === 0xe0) {\n      // 3 bytes\n      const byte2 = bytes[offset++] & 0x3f;\n      const byte3 = bytes[offset++] & 0x3f;\n      units.push((byte1 & 0x1f) << 12 | byte2 << 6 | byte3);\n    } else if ((byte1 & 0xf8) === 0xf0) {\n      // 4 bytes\n      const byte2 = bytes[offset++] & 0x3f;\n      const byte3 = bytes[offset++] & 0x3f;\n      const byte4 = bytes[offset++] & 0x3f;\n      let unit = (byte1 & 0x07) << 0x12 | byte2 << 0x0c | byte3 << 0x06 | byte4;\n\n      if (unit > 0xffff) {\n        unit -= 0x10000;\n        units.push(unit >>> 10 & 0x3ff | 0xd800);\n        unit = 0xdc00 | unit & 0x3ff;\n      }\n\n      units.push(unit);\n    } else {\n      units.push(byte1);\n    }\n\n    if (units.length >= CHUNK_SIZE) {\n      result += String.fromCharCode(...units);\n      units.length = 0;\n    }\n  }\n\n  if (units.length > 0) {\n    result += String.fromCharCode(...units);\n  }\n\n  return result;\n}\n\nexports.utf8DecodeJs = utf8DecodeJs;\nconst sharedTextDecoder = TEXT_ENCODING_AVAILABLE ? new TextDecoder() : null;\nexports.TEXT_DECODER_THRESHOLD = !TEXT_ENCODING_AVAILABLE ? STR_SIZE_MAX : typeof process !== \"undefined\" && process.env[\"TEXT_DECODER\"] !== \"force\" ? 200 : 0;\n\nfunction utf8DecodeTD(bytes, inputOffset, byteLength) {\n  const stringBytes = bytes.subarray(inputOffset, inputOffset + byteLength);\n  return sharedTextDecoder.decode(stringBytes);\n}\n\nexports.utf8DecodeTD = utf8DecodeTD;","map":{"version":3,"sources":["../../src/utils/utf8.ts"],"names":[],"mappings":";;;;;;AAAA,MAAM,uBAAuB,GAC3B,CAAC,OAAO,OAAP,KAAmB,WAAnB,IAAkC,OAAO,CAAC,GAAR,CAAY,eAAZ,MAAiC,OAApE,KACA,OAAO,WAAP,KAAuB,WADvB,IAEA,OAAO,WAAP,KAAuB,WAHzB;AAKA,MAAM,YAAY,GAAG,UAArB,C,CAAkC;;AAElC,SAAgB,SAAhB,CAA0B,GAA1B,EAAqC;AACnC,QAAM,SAAS,GAAG,GAAG,CAAC,MAAtB;AAEA,MAAI,UAAU,GAAG,CAAjB;AACA,MAAI,GAAG,GAAG,CAAV;;AACA,SAAO,GAAG,GAAG,SAAb,EAAwB;AACtB,QAAI,KAAK,GAAG,GAAG,CAAC,UAAJ,CAAe,GAAG,EAAlB,CAAZ;;AAEA,QAAI,CAAC,KAAK,GAAG,UAAT,MAAyB,CAA7B,EAAgC;AAC9B;AACA,MAAA,UAAU;AACV;AACD,KAJD,MAIO,IAAI,CAAC,KAAK,GAAG,UAAT,MAAyB,CAA7B,EAAgC;AACrC;AACA,MAAA,UAAU,IAAI,CAAd;AACD,KAHM,MAGA;AACL;AACA,UAAI,KAAK,IAAI,MAAT,IAAmB,KAAK,IAAI,MAAhC,EAAwC;AACtC;AACA,YAAI,GAAG,GAAG,SAAV,EAAqB;AACnB,gBAAM,KAAK,GAAG,GAAG,CAAC,UAAJ,CAAe,GAAf,CAAd;;AACA,cAAI,CAAC,KAAK,GAAG,MAAT,MAAqB,MAAzB,EAAiC;AAC/B,cAAE,GAAF;AACA,YAAA,KAAK,GAAG,CAAC,CAAC,KAAK,GAAG,KAAT,KAAmB,EAApB,KAA2B,KAAK,GAAG,KAAnC,IAA4C,OAApD;AACD;AACF;AACF;;AAED,UAAI,CAAC,KAAK,GAAG,UAAT,MAAyB,CAA7B,EAAgC;AAC9B;AACA,QAAA,UAAU,IAAI,CAAd;AACD,OAHD,MAGO;AACL;AACA,QAAA,UAAU,IAAI,CAAd;AACD;AACF;AACF;;AACD,SAAO,UAAP;AACD;;AAtCD,OAAA,CAAA,SAAA,GAAA,SAAA;;AAwCA,SAAgB,YAAhB,CAA6B,GAA7B,EAA0C,MAA1C,EAA8D,YAA9D,EAAkF;AAChF,QAAM,SAAS,GAAG,GAAG,CAAC,MAAtB;AACA,MAAI,MAAM,GAAG,YAAb;AACA,MAAI,GAAG,GAAG,CAAV;;AACA,SAAO,GAAG,GAAG,SAAb,EAAwB;AACtB,QAAI,KAAK,GAAG,GAAG,CAAC,UAAJ,CAAe,GAAG,EAAlB,CAAZ;;AAEA,QAAI,CAAC,KAAK,GAAG,UAAT,MAAyB,CAA7B,EAAgC;AAC9B;AACA,MAAA,MAAM,CAAC,MAAM,EAAP,CAAN,GAAmB,KAAnB;AACA;AACD,KAJD,MAIO,IAAI,CAAC,KAAK,GAAG,UAAT,MAAyB,CAA7B,EAAgC;AACrC;AACA,MAAA,MAAM,CAAC,MAAM,EAAP,CAAN,GAAqB,KAAK,IAAI,CAAV,GAAe,IAAhB,GAAwB,IAA3C;AACD,KAHM,MAGA;AACL;AACA,UAAI,KAAK,IAAI,MAAT,IAAmB,KAAK,IAAI,MAAhC,EAAwC;AACtC;AACA,YAAI,GAAG,GAAG,SAAV,EAAqB;AACnB,gBAAM,KAAK,GAAG,GAAG,CAAC,UAAJ,CAAe,GAAf,CAAd;;AACA,cAAI,CAAC,KAAK,GAAG,MAAT,MAAqB,MAAzB,EAAiC;AAC/B,cAAE,GAAF;AACA,YAAA,KAAK,GAAG,CAAC,CAAC,KAAK,GAAG,KAAT,KAAmB,EAApB,KAA2B,KAAK,GAAG,KAAnC,IAA4C,OAApD;AACD;AACF;AACF;;AAED,UAAI,CAAC,KAAK,GAAG,UAAT,MAAyB,CAA7B,EAAgC;AAC9B;AACA,QAAA,MAAM,CAAC,MAAM,EAAP,CAAN,GAAqB,KAAK,IAAI,EAAV,GAAgB,IAAjB,GAAyB,IAA5C;AACA,QAAA,MAAM,CAAC,MAAM,EAAP,CAAN,GAAqB,KAAK,IAAI,CAAV,GAAe,IAAhB,GAAwB,IAA3C;AACD,OAJD,MAIO;AACL;AACA,QAAA,MAAM,CAAC,MAAM,EAAP,CAAN,GAAqB,KAAK,IAAI,EAAV,GAAgB,IAAjB,GAAyB,IAA5C;AACA,QAAA,MAAM,CAAC,MAAM,EAAP,CAAN,GAAqB,KAAK,IAAI,EAAV,GAAgB,IAAjB,GAAyB,IAA5C;AACA,QAAA,MAAM,CAAC,MAAM,EAAP,CAAN,GAAqB,KAAK,IAAI,CAAV,GAAe,IAAhB,GAAwB,IAA3C;AACD;AACF;;AAED,IAAA,MAAM,CAAC,MAAM,EAAP,CAAN,GAAoB,KAAK,GAAG,IAAT,GAAiB,IAApC;AACD;AACF;;AAzCD,OAAA,CAAA,YAAA,GAAA,YAAA;AA2CA,MAAM,iBAAiB,GAAG,uBAAuB,GAAG,IAAI,WAAJ,EAAH,GAAuB,SAAxE;AACa,OAAA,CAAA,sBAAA,GAAyB,CAAC,uBAAD,GAClC,YADkC,GAElC,OAAO,OAAP,KAAmB,WAAnB,IAAkC,OAAO,CAAC,GAAR,CAAY,eAAZ,MAAiC,OAAnE,GACA,GADA,GAEA,CAJS;;AAMb,SAAS,kBAAT,CAA4B,GAA5B,EAAyC,MAAzC,EAA6D,YAA7D,EAAiF;AAC/E,EAAA,MAAM,CAAC,GAAP,CAAW,iBAAkB,CAAC,MAAnB,CAA0B,GAA1B,CAAX,EAA2C,YAA3C;AACD;;AAED,SAAS,sBAAT,CAAgC,GAAhC,EAA6C,MAA7C,EAAiE,YAAjE,EAAqF;AACnF,EAAA,iBAAkB,CAAC,UAAnB,CAA8B,GAA9B,EAAmC,MAAM,CAAC,QAAP,CAAgB,YAAhB,CAAnC;AACD;;AAEY,OAAA,CAAA,YAAA,GAAe,CAAA,iBAAiB,KAAA,IAAjB,IAAA,iBAAiB,KAAA,KAAA,CAAjB,GAAiB,KAAA,CAAjB,GAAA,iBAAiB,CAAE,UAAnB,IAAgC,sBAAhC,GAAyD,kBAAxE;AAEb,MAAM,UAAU,GAAG,IAAnB;;AAEA,SAAgB,YAAhB,CAA6B,KAA7B,EAAgD,WAAhD,EAAqE,UAArE,EAAuF;AACrF,MAAI,MAAM,GAAG,WAAb;AACA,QAAM,GAAG,GAAG,MAAM,GAAG,UAArB;AAEA,QAAM,KAAK,GAAkB,EAA7B;AACA,MAAI,MAAM,GAAG,EAAb;;AACA,SAAO,MAAM,GAAG,GAAhB,EAAqB;AACnB,UAAM,KAAK,GAAG,KAAK,CAAC,MAAM,EAAP,CAAnB;;AACA,QAAI,CAAC,KAAK,GAAG,IAAT,MAAmB,CAAvB,EAA0B;AACxB;AACA,MAAA,KAAK,CAAC,IAAN,CAAW,KAAX;AACD,KAHD,MAGO,IAAI,CAAC,KAAK,GAAG,IAAT,MAAmB,IAAvB,EAA6B;AAClC;AACA,YAAM,KAAK,GAAG,KAAK,CAAC,MAAM,EAAP,CAAL,GAAmB,IAAjC;AACA,MAAA,KAAK,CAAC,IAAN,CAAY,CAAC,KAAK,GAAG,IAAT,KAAkB,CAAnB,GAAwB,KAAnC;AACD,KAJM,MAIA,IAAI,CAAC,KAAK,GAAG,IAAT,MAAmB,IAAvB,EAA6B;AAClC;AACA,YAAM,KAAK,GAAG,KAAK,CAAC,MAAM,EAAP,CAAL,GAAmB,IAAjC;AACA,YAAM,KAAK,GAAG,KAAK,CAAC,MAAM,EAAP,CAAL,GAAmB,IAAjC;AACA,MAAA,KAAK,CAAC,IAAN,CAAY,CAAC,KAAK,GAAG,IAAT,KAAkB,EAAnB,GAA0B,KAAK,IAAI,CAAnC,GAAwC,KAAnD;AACD,KALM,MAKA,IAAI,CAAC,KAAK,GAAG,IAAT,MAAmB,IAAvB,EAA6B;AAClC;AACA,YAAM,KAAK,GAAG,KAAK,CAAC,MAAM,EAAP,CAAL,GAAmB,IAAjC;AACA,YAAM,KAAK,GAAG,KAAK,CAAC,MAAM,EAAP,CAAL,GAAmB,IAAjC;AACA,YAAM,KAAK,GAAG,KAAK,CAAC,MAAM,EAAP,CAAL,GAAmB,IAAjC;AACA,UAAI,IAAI,GAAI,CAAC,KAAK,GAAG,IAAT,KAAkB,IAAnB,GAA4B,KAAK,IAAI,IAArC,GAA8C,KAAK,IAAI,IAAvD,GAA+D,KAA1E;;AACA,UAAI,IAAI,GAAG,MAAX,EAAmB;AACjB,QAAA,IAAI,IAAI,OAAR;AACA,QAAA,KAAK,CAAC,IAAN,CAAa,IAAI,KAAK,EAAV,GAAgB,KAAjB,GAA0B,MAArC;AACA,QAAA,IAAI,GAAG,SAAU,IAAI,GAAG,KAAxB;AACD;;AACD,MAAA,KAAK,CAAC,IAAN,CAAW,IAAX;AACD,KAZM,MAYA;AACL,MAAA,KAAK,CAAC,IAAN,CAAW,KAAX;AACD;;AAED,QAAI,KAAK,CAAC,MAAN,IAAgB,UAApB,EAAgC;AAC9B,MAAA,MAAM,IAAI,MAAM,CAAC,YAAP,CAAoB,GAAG,KAAvB,CAAV;AACA,MAAA,KAAK,CAAC,MAAN,GAAe,CAAf;AACD;AACF;;AAED,MAAI,KAAK,CAAC,MAAN,GAAe,CAAnB,EAAsB;AACpB,IAAA,MAAM,IAAI,MAAM,CAAC,YAAP,CAAoB,GAAG,KAAvB,CAAV;AACD;;AAED,SAAO,MAAP;AACD;;AA/CD,OAAA,CAAA,YAAA,GAAA,YAAA;AAiDA,MAAM,iBAAiB,GAAG,uBAAuB,GAAG,IAAI,WAAJ,EAAH,GAAuB,IAAxE;AACa,OAAA,CAAA,sBAAA,GAAyB,CAAC,uBAAD,GAClC,YADkC,GAElC,OAAO,OAAP,KAAmB,WAAnB,IAAkC,OAAO,CAAC,GAAR,CAAY,cAAZ,MAAgC,OAAlE,GACA,GADA,GAEA,CAJS;;AAMb,SAAgB,YAAhB,CAA6B,KAA7B,EAAgD,WAAhD,EAAqE,UAArE,EAAuF;AACrF,QAAM,WAAW,GAAG,KAAK,CAAC,QAAN,CAAe,WAAf,EAA4B,WAAW,GAAG,UAA1C,CAApB;AACA,SAAO,iBAAkB,CAAC,MAAnB,CAA0B,WAA1B,CAAP;AACD;;AAHD,OAAA,CAAA,YAAA,GAAA,YAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.utf8DecodeTD = exports.TEXT_DECODER_THRESHOLD = exports.utf8DecodeJs = exports.utf8EncodeTE = exports.TEXT_ENCODER_THRESHOLD = exports.utf8EncodeJs = exports.utf8Count = void 0;\nconst TEXT_ENCODING_AVAILABLE = (typeof process === \"undefined\" || process.env[\"TEXT_ENCODING\"] !== \"never\") &&\n    typeof TextEncoder !== \"undefined\" &&\n    typeof TextDecoder !== \"undefined\";\nconst STR_SIZE_MAX = 4294967295; // uint32_max\nfunction utf8Count(str) {\n    const strLength = str.length;\n    let byteLength = 0;\n    let pos = 0;\n    while (pos < strLength) {\n        let value = str.charCodeAt(pos++);\n        if ((value & 0xffffff80) === 0) {\n            // 1-byte\n            byteLength++;\n            continue;\n        }\n        else if ((value & 0xfffff800) === 0) {\n            // 2-bytes\n            byteLength += 2;\n        }\n        else {\n            // handle surrogate pair\n            if (value >= 0xd800 && value <= 0xdbff) {\n                // high surrogate\n                if (pos < strLength) {\n                    const extra = str.charCodeAt(pos);\n                    if ((extra & 0xfc00) === 0xdc00) {\n                        ++pos;\n                        value = ((value & 0x3ff) << 10) + (extra & 0x3ff) + 0x10000;\n                    }\n                }\n            }\n            if ((value & 0xffff0000) === 0) {\n                // 3-byte\n                byteLength += 3;\n            }\n            else {\n                // 4-byte\n                byteLength += 4;\n            }\n        }\n    }\n    return byteLength;\n}\nexports.utf8Count = utf8Count;\nfunction utf8EncodeJs(str, output, outputOffset) {\n    const strLength = str.length;\n    let offset = outputOffset;\n    let pos = 0;\n    while (pos < strLength) {\n        let value = str.charCodeAt(pos++);\n        if ((value & 0xffffff80) === 0) {\n            // 1-byte\n            output[offset++] = value;\n            continue;\n        }\n        else if ((value & 0xfffff800) === 0) {\n            // 2-bytes\n            output[offset++] = ((value >> 6) & 0x1f) | 0xc0;\n        }\n        else {\n            // handle surrogate pair\n            if (value >= 0xd800 && value <= 0xdbff) {\n                // high surrogate\n                if (pos < strLength) {\n                    const extra = str.charCodeAt(pos);\n                    if ((extra & 0xfc00) === 0xdc00) {\n                        ++pos;\n                        value = ((value & 0x3ff) << 10) + (extra & 0x3ff) + 0x10000;\n                    }\n                }\n            }\n            if ((value & 0xffff0000) === 0) {\n                // 3-byte\n                output[offset++] = ((value >> 12) & 0x0f) | 0xe0;\n                output[offset++] = ((value >> 6) & 0x3f) | 0x80;\n            }\n            else {\n                // 4-byte\n                output[offset++] = ((value >> 18) & 0x07) | 0xf0;\n                output[offset++] = ((value >> 12) & 0x3f) | 0x80;\n                output[offset++] = ((value >> 6) & 0x3f) | 0x80;\n            }\n        }\n        output[offset++] = (value & 0x3f) | 0x80;\n    }\n}\nexports.utf8EncodeJs = utf8EncodeJs;\nconst sharedTextEncoder = TEXT_ENCODING_AVAILABLE ? new TextEncoder() : undefined;\nexports.TEXT_ENCODER_THRESHOLD = !TEXT_ENCODING_AVAILABLE\n    ? STR_SIZE_MAX\n    : typeof process !== \"undefined\" && process.env[\"TEXT_ENCODING\"] !== \"force\"\n        ? 200\n        : 0;\nfunction utf8EncodeTEencode(str, output, outputOffset) {\n    output.set(sharedTextEncoder.encode(str), outputOffset);\n}\nfunction utf8EncodeTEencodeInto(str, output, outputOffset) {\n    sharedTextEncoder.encodeInto(str, output.subarray(outputOffset));\n}\nexports.utf8EncodeTE = (sharedTextEncoder === null || sharedTextEncoder === void 0 ? void 0 : sharedTextEncoder.encodeInto) ? utf8EncodeTEencodeInto : utf8EncodeTEencode;\nconst CHUNK_SIZE = 4096;\nfunction utf8DecodeJs(bytes, inputOffset, byteLength) {\n    let offset = inputOffset;\n    const end = offset + byteLength;\n    const units = [];\n    let result = \"\";\n    while (offset < end) {\n        const byte1 = bytes[offset++];\n        if ((byte1 & 0x80) === 0) {\n            // 1 byte\n            units.push(byte1);\n        }\n        else if ((byte1 & 0xe0) === 0xc0) {\n            // 2 bytes\n            const byte2 = bytes[offset++] & 0x3f;\n            units.push(((byte1 & 0x1f) << 6) | byte2);\n        }\n        else if ((byte1 & 0xf0) === 0xe0) {\n            // 3 bytes\n            const byte2 = bytes[offset++] & 0x3f;\n            const byte3 = bytes[offset++] & 0x3f;\n            units.push(((byte1 & 0x1f) << 12) | (byte2 << 6) | byte3);\n        }\n        else if ((byte1 & 0xf8) === 0xf0) {\n            // 4 bytes\n            const byte2 = bytes[offset++] & 0x3f;\n            const byte3 = bytes[offset++] & 0x3f;\n            const byte4 = bytes[offset++] & 0x3f;\n            let unit = ((byte1 & 0x07) << 0x12) | (byte2 << 0x0c) | (byte3 << 0x06) | byte4;\n            if (unit > 0xffff) {\n                unit -= 0x10000;\n                units.push(((unit >>> 10) & 0x3ff) | 0xd800);\n                unit = 0xdc00 | (unit & 0x3ff);\n            }\n            units.push(unit);\n        }\n        else {\n            units.push(byte1);\n        }\n        if (units.length >= CHUNK_SIZE) {\n            result += String.fromCharCode(...units);\n            units.length = 0;\n        }\n    }\n    if (units.length > 0) {\n        result += String.fromCharCode(...units);\n    }\n    return result;\n}\nexports.utf8DecodeJs = utf8DecodeJs;\nconst sharedTextDecoder = TEXT_ENCODING_AVAILABLE ? new TextDecoder() : null;\nexports.TEXT_DECODER_THRESHOLD = !TEXT_ENCODING_AVAILABLE\n    ? STR_SIZE_MAX\n    : typeof process !== \"undefined\" && process.env[\"TEXT_DECODER\"] !== \"force\"\n        ? 200\n        : 0;\nfunction utf8DecodeTD(bytes, inputOffset, byteLength) {\n    const stringBytes = bytes.subarray(inputOffset, inputOffset + byteLength);\n    return sharedTextDecoder.decode(stringBytes);\n}\nexports.utf8DecodeTD = utf8DecodeTD;\n//# sourceMappingURL=utf8.js.map"]},"metadata":{},"sourceType":"script"}