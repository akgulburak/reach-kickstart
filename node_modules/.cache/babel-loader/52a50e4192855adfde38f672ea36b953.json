{"ast":null,"code":"const encoding = require('../../../encoding/encoding');\n\nclass PendingTransactionInformation {\n  constructor(c, txid) {\n    this.c = c;\n    this.txid = txid;\n    this.query = {};\n    this.query.format = 'msgpack';\n  }\n  /**\n   * returns the transaction information for a specific txid of a pending transaction\n   * @param headers, optional\n   * @returns {Promise<*>}\n   */\n\n\n  async do(headers = {}) {\n    const res = await this.c.get(`/v2/transactions/pending/${this.txid}`, this.query, headers);\n\n    if (res.body && res.body.byteLength > 0) {\n      return encoding.decode(res.body);\n    }\n\n    return undefined;\n  } // max sets the maximum number of txs to return\n\n\n  max(max) {\n    this.query.max = max;\n    return this;\n  }\n\n}\n\nmodule.exports = {\n  PendingTransactionInformation\n};","map":{"version":3,"sources":["/home/x/reach/kick/github/node_modules/algosdk/src/client/v2/algod/pendingTransactionInformation.js"],"names":["encoding","require","PendingTransactionInformation","constructor","c","txid","query","format","do","headers","res","get","body","byteLength","decode","undefined","max","module","exports"],"mappings":"AAAA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,4BAAD,CAAxB;;AAEA,MAAMC,6BAAN,CAAoC;AAClCC,EAAAA,WAAW,CAACC,CAAD,EAAIC,IAAJ,EAAU;AACnB,SAAKD,CAAL,GAASA,CAAT;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA,SAAKC,KAAL,GAAa,EAAb;AACA,SAAKA,KAAL,CAAWC,MAAX,GAAoB,SAApB;AACD;AAED;AACF;AACA;AACA;AACA;;;AACU,QAAFC,EAAE,CAACC,OAAO,GAAG,EAAX,EAAe;AACrB,UAAMC,GAAG,GAAG,MAAM,KAAKN,CAAL,CAAOO,GAAP,CACf,4BAA2B,KAAKN,IAAK,EADtB,EAEhB,KAAKC,KAFW,EAGhBG,OAHgB,CAAlB;;AAKA,QAAIC,GAAG,CAACE,IAAJ,IAAYF,GAAG,CAACE,IAAJ,CAASC,UAAT,GAAsB,CAAtC,EAAyC;AACvC,aAAOb,QAAQ,CAACc,MAAT,CAAgBJ,GAAG,CAACE,IAApB,CAAP;AACD;;AACD,WAAOG,SAAP;AACD,GAvBiC,CAyBlC;;;AACAC,EAAAA,GAAG,CAACA,GAAD,EAAM;AACP,SAAKV,KAAL,CAAWU,GAAX,GAAiBA,GAAjB;AACA,WAAO,IAAP;AACD;;AA7BiC;;AAgCpCC,MAAM,CAACC,OAAP,GAAiB;AAAEhB,EAAAA;AAAF,CAAjB","sourcesContent":["const encoding = require('../../../encoding/encoding');\n\nclass PendingTransactionInformation {\n  constructor(c, txid) {\n    this.c = c;\n    this.txid = txid;\n    this.query = {};\n    this.query.format = 'msgpack';\n  }\n\n  /**\n   * returns the transaction information for a specific txid of a pending transaction\n   * @param headers, optional\n   * @returns {Promise<*>}\n   */\n  async do(headers = {}) {\n    const res = await this.c.get(\n      `/v2/transactions/pending/${this.txid}`,\n      this.query,\n      headers\n    );\n    if (res.body && res.body.byteLength > 0) {\n      return encoding.decode(res.body);\n    }\n    return undefined;\n  }\n\n  // max sets the maximum number of txs to return\n  max(max) {\n    this.query.max = max;\n    return this;\n  }\n}\n\nmodule.exports = { PendingTransactionInformation };\n"]},"metadata":{},"sourceType":"script"}