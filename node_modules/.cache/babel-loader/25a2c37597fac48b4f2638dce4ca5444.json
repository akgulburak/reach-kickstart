{"ast":null,"code":"import crypto from 'crypto';\nimport ethers from 'ethers';\nimport util from 'util';\nexport const getViewsHelper = (views, getView1) => () => objectMap(views.infos, (v, vm) => objectMap(vm, (k, vi) => getView1(views.views, v, k, vi)));\nexport const deferContract = (shouldError, implP, implNow) => {\n  const not_yet = which => (...args) => {\n    void args;\n    throw Error(`Cannot ${which} yet; contract is not actually deployed`);\n  };\n\n  const delay = which => async (...args) => // @ts-ignore\n  (await implP)[which](...args);\n\n  const thenow = shouldError ? not_yet : delay;\n\n  const mnow = which => implNow[which] === undefined ? thenow(which) : implNow[which]; // impl starts with a shim that deploys on first sendrecv,\n  // then replaces itself with the real impl once deployed.\n\n\n  let impl = {\n    getInfo: delay('getInfo'),\n    // @ts-ignore\n    creationTime: delay('creationTime'),\n    // @ts-ignore\n    sendrecv: mnow('sendrecv'),\n    // @ts-ignore\n    recv: mnow('recv'),\n    // @ts-ignore\n    wait: mnow('wait'),\n    // @ts-ignore\n    iam: mnow('iam'),\n    // @ts-ignore\n    selfAddress: mnow('selfAddress'),\n    // @ts-ignore\n    getViews: mnow('getViews'),\n    stdlib: (() => {\n      if (implNow.stdlib === undefined) {\n        throw Error(`stdlib not defined`);\n      }\n\n      return implNow.stdlib;\n    })()\n  };\n  implP.then(x => {\n    impl = x;\n  });\n\n  const wrap = which => (...args) => // @ts-ignore\n  impl[which](...args); // Return a wrapper around the impl. This obj and its fields do not mutate,\n  // but the fields are closures around a mutating ref to impl.\n\n\n  return {\n    sendrecv: wrap('sendrecv'),\n    recv: wrap('recv'),\n    wait: wrap('wait'),\n    getInfo: wrap('getInfo'),\n    creationTime: wrap('creationTime'),\n    iam: wrap('iam'),\n    selfAddress: wrap('selfAddress'),\n    getViews: wrap('getViews'),\n    stdlib: impl.stdlib\n  };\n}; // ****************************************************************************\n// Helpers\n// ****************************************************************************\n\nlet DEBUG = process.env.REACH_DEBUG ? true : false;\nconst {\n  hexlify,\n  toUtf8Bytes,\n  toUtf8String,\n  isHexString\n} = ethers.utils;\nconst BigNumber = ethers.BigNumber; // Hex helpers\n// const un0x           = h => h.replace(/^0x/, ''); // unused\n\nconst hexTo0x = h => '0x' + h.replace(/^0x/, '');\n\nconst byteToHex = b => (b & 0xFF).toString(16).padStart(2, '0');\n\nconst byteArrayToHex = b => Array.from(b, byteToHex).join('');\n\nconst format_ai = ai => JSON.stringify(ai);\n\nconst forceHex = x => isHex(x) ? x : stringToHex(x); // ****************************************************************************\n// Utility exports\n// ****************************************************************************\n\n\nexport const envDefault = (v, d) => v === undefined || v === null ? d : v;\nexport const setDEBUG = b => {\n  if (b === false || b === true) {\n    DEBUG = b;\n  } else {\n    throw Error(`Expected bool, got ${JSON.stringify(b)}`);\n  }\n};\nexport const getDEBUG = () => {\n  return DEBUG;\n};\nexport const debug = (...msgs) => {\n  if (getDEBUG()) {\n    // Print arrays/objects in full instead of the default depth of 2\n    const betterMsgs = msgs.map(msg => ['object', 'array'].includes(typeof msg) ? util.inspect(msg, false, null, true) : msg);\n    void betterMsgs; // Print objects for indentation, colors, etc...\n\n    console.log(new Date(), `DEBUG:`, ...msgs);\n  }\n};\nexport const assert = (d, ai = null) => {\n  if (!d) {\n    throw Error(format_ai(ai));\n  }\n};\nexport const {\n  isBigNumber\n} = BigNumber;\nexport const bigNumberify = x => BigNumber.from(x);\nexport const bigNumberToNumber = x => bigNumberify(x).toNumber();\nexport const checkedBigNumberify = (at, m, x) => {\n  const xb = bigNumberify(x);\n\n  if (xb.gte(0) && xb.lte(m)) {\n    return xb;\n  }\n\n  throw Error(`bigNumberify: ${x} out of range [0, ${m}] at ${at}`);\n}; // Contracts\n// .canonicalize turns stuff into the \"canonical backend representation\"\n\nexport function protect(ctc, v, ai = null) {\n  try {\n    return ctc.canonicalize(v);\n  } catch (e) {\n    console.log(`Protect failed: expected ${ctc.name} but got ${JSON.stringify(v)} ${format_ai(ai)}`);\n    throw e;\n  }\n}\nexport const isHex = isHexString;\nexport const hexToString = toUtf8String;\nexport const stringToHex = x => hexlify(toUtf8Bytes(x));\nexport const makeDigest = prep => (t, v) => {\n  const args = [t, v];\n  debug('digest(', args, ') =>');\n  const kekCat = prep(t, v);\n  debug('digest(', args, ') => internal(', hexlify(kekCat), ')');\n  const r = ethers.utils.keccak256(kekCat);\n  debug('keccak(', args, ') => internal(', hexlify(kekCat), ') => ', r);\n  return r;\n};\nexport const hexToBigNumber = h => bigNumberify(hexTo0x(h));\nexport const uintToBytes = i => bigNumberToHex(i);\nexport const bigNumberToHex = (u, size = 32) => {\n  const width = 8 * size;\n  const format = `ufixed${width}x0`;\n  const nPos = bigNumberify(u).toTwos(width); // They took away padZeros so we have to use FixedNumber\n\n  const nFix = ethers.FixedNumber.from(nPos.toString(), format); // XXX why do we slice off the 0x?\n\n  return hexlify(nFix).slice(2);\n};\nexport const bytesEq = (x, y) => {\n  debug('bytesEq(', x, ',', y, ')');\n  return forceHex(x) === forceHex(y);\n};\nexport const digestEq = bytesEq;\nexport const makeRandom = width => {\n  const randomUInt = () => hexToBigNumber(byteArrayToHex(crypto.randomBytes(width)));\n\n  const hasRandom = {\n    random: randomUInt\n  };\n  return {\n    randomUInt,\n    hasRandom\n  };\n};\nexport const eq = (a, b) => bigNumberify(a).eq(bigNumberify(b));\nexport const add = (a, b) => bigNumberify(a).add(bigNumberify(b));\nexport const sub = (a, b) => bigNumberify(a).sub(bigNumberify(b));\nexport const mod = (a, b) => bigNumberify(a).mod(bigNumberify(b));\nexport const mul = (a, b) => bigNumberify(a).mul(bigNumberify(b));\nexport const div = (a, b) => bigNumberify(a).div(bigNumberify(b));\nexport const ge = (a, b) => bigNumberify(a).gte(bigNumberify(b));\nexport const gt = (a, b) => bigNumberify(a).gt(bigNumberify(b));\nexport const le = (a, b) => bigNumberify(a).lte(bigNumberify(b));\nexport const lt = (a, b) => bigNumberify(a).lt(bigNumberify(b)); // Array helpers\n\nexport const argsSlice = (args, cnt) => cnt == 0 ? [] : args.slice(-1 * cnt);\nexport const argsSplit = (args, cnt) => cnt == 0 ? [args, []] : [args.slice(0, args.length - cnt), args.slice(-1 * cnt)];\nexport function Array_set(arr, idx, elem) {\n  const arrp = arr.slice();\n  arrp[idx] = elem;\n  return arrp;\n}\nexport const Array_zip = (x, y) => x.map((e, i) => [e, y[i]]);\nexport const mapRef = (m, f) => {\n  const v = m[f]; // console.log(`Reading map ${JSON.stringify(m)} field ${JSON.stringify(f)} => ${JSON.stringify(v)}`);\n\n  if (v === undefined) {\n    return ['None', null];\n  } else {\n    return ['Some', v];\n  }\n};\nexport const objectMap = (object, mapFn) => Object.keys(object).reduce(function (result, key) {\n  result[key] = mapFn(key, object[key]);\n  return result;\n}, {}); // XXX this doesn't really belong here, but hard to relocate due to dep on bytesEq\n\nexport const mkAddressEq = T_Address => (x, y) => bytesEq(T_Address.canonicalize(x), T_Address.canonicalize(y));\nexport const parseFixedPoint = x => parseInt({\n  sign: x.sign,\n  i: x.i.i\n}) / bigNumberify(x.i.scale).toNumber();\nexport const parseInt = x => bigNumberify(x.i).toNumber() * (x.sign ? 1 : -1);","map":{"version":3,"sources":["/home/x/reach/kick/github/node_modules/@reach-sh/stdlib/shared.mjs"],"names":["crypto","ethers","util","getViewsHelper","views","getView1","objectMap","infos","v","vm","k","vi","deferContract","shouldError","implP","implNow","not_yet","which","args","Error","delay","thenow","mnow","undefined","impl","getInfo","creationTime","sendrecv","recv","wait","iam","selfAddress","getViews","stdlib","then","x","wrap","DEBUG","process","env","REACH_DEBUG","hexlify","toUtf8Bytes","toUtf8String","isHexString","utils","BigNumber","hexTo0x","h","replace","byteToHex","b","toString","padStart","byteArrayToHex","Array","from","join","format_ai","ai","JSON","stringify","forceHex","isHex","stringToHex","envDefault","d","setDEBUG","getDEBUG","debug","msgs","betterMsgs","map","msg","includes","inspect","console","log","Date","assert","isBigNumber","bigNumberify","bigNumberToNumber","toNumber","checkedBigNumberify","at","m","xb","gte","lte","protect","ctc","canonicalize","e","name","hexToString","makeDigest","prep","t","kekCat","r","keccak256","hexToBigNumber","uintToBytes","i","bigNumberToHex","u","size","width","format","nPos","toTwos","nFix","FixedNumber","slice","bytesEq","y","digestEq","makeRandom","randomUInt","randomBytes","hasRandom","random","eq","a","add","sub","mod","mul","div","ge","gt","le","lt","argsSlice","cnt","argsSplit","length","Array_set","arr","idx","elem","arrp","Array_zip","mapRef","f","object","mapFn","Object","keys","reduce","result","key","mkAddressEq","T_Address","parseFixedPoint","parseInt","sign","scale"],"mappings":"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","sourcesContent":["import crypto from 'crypto';\nimport ethers from 'ethers';\nimport util from 'util';\nexport const getViewsHelper = (views, getView1) => () => objectMap(views.infos, ((v, vm) => objectMap(vm, ((k, vi) => getView1(views.views, v, k, vi)))));\nexport const deferContract = (shouldError, implP, implNow) => {\n  const not_yet = (which) => (...args) => {\n    void(args);\n    throw Error(`Cannot ${which} yet; contract is not actually deployed`);\n  };\n  const delay = (which) => async (...args) =>\n    // @ts-ignore\n    (await implP)[which](...args);\n  const thenow = shouldError ? not_yet : delay;\n  const mnow = (which) => implNow[which] === undefined ? thenow(which) : implNow[which];\n  // impl starts with a shim that deploys on first sendrecv,\n  // then replaces itself with the real impl once deployed.\n  let impl = {\n    getInfo: delay('getInfo'),\n    // @ts-ignore\n    creationTime: delay('creationTime'),\n    // @ts-ignore\n    sendrecv: mnow('sendrecv'),\n    // @ts-ignore\n    recv: mnow('recv'),\n    // @ts-ignore\n    wait: mnow('wait'),\n    // @ts-ignore\n    iam: mnow('iam'),\n    // @ts-ignore\n    selfAddress: mnow('selfAddress'),\n    // @ts-ignore\n    getViews: mnow('getViews'),\n    stdlib: (() => {\n      if (implNow.stdlib === undefined) {\n        throw Error(`stdlib not defined`);\n      }\n      return implNow.stdlib;\n    })(),\n  };\n  implP.then((x) => { impl = x; });\n  const wrap = (which) => (...args) =>\n    // @ts-ignore\n    impl[which](...args);\n  // Return a wrapper around the impl. This obj and its fields do not mutate,\n  // but the fields are closures around a mutating ref to impl.\n  return {\n    sendrecv: wrap('sendrecv'),\n    recv: wrap('recv'),\n    wait: wrap('wait'),\n    getInfo: wrap('getInfo'),\n    creationTime: wrap('creationTime'),\n    iam: wrap('iam'),\n    selfAddress: wrap('selfAddress'),\n    getViews: wrap('getViews'),\n    stdlib: impl.stdlib,\n  };\n};\n// ****************************************************************************\n// Helpers\n// ****************************************************************************\nlet DEBUG = process.env.REACH_DEBUG ? true : false;\nconst { hexlify, toUtf8Bytes, toUtf8String, isHexString } = ethers.utils;\nconst BigNumber = ethers.BigNumber;\n// Hex helpers\n// const un0x           = h => h.replace(/^0x/, ''); // unused\nconst hexTo0x = (h) => '0x' + h.replace(/^0x/, '');\nconst byteToHex = (b) => (b & 0xFF).toString(16).padStart(2, '0');\nconst byteArrayToHex = (b) => Array.from(b, byteToHex).join('');\nconst format_ai = (ai) => JSON.stringify(ai);\nconst forceHex = (x) => isHex(x) ? x : stringToHex(x);\n// ****************************************************************************\n// Utility exports\n// ****************************************************************************\nexport const envDefault = (v, d) => (v === undefined || v === null) ? d : v;\nexport const setDEBUG = (b) => {\n  if (b === false || b === true) {\n    DEBUG = b;\n  } else {\n    throw Error(`Expected bool, got ${JSON.stringify(b)}`);\n  }\n};\nexport const getDEBUG = () => { return DEBUG; };\nexport const debug = (...msgs) => {\n  if (getDEBUG()) {\n    // Print arrays/objects in full instead of the default depth of 2\n    const betterMsgs = msgs.map((msg) => ['object', 'array'].includes(typeof msg) ?\n      util.inspect(msg, false, null, true) :\n      msg);\n    void(betterMsgs);\n    // Print objects for indentation, colors, etc...\n    console.log(new Date(), `DEBUG:`, ...msgs);\n  }\n};\nexport const assert = (d, ai = null) => {\n  if (!d) {\n    throw Error(format_ai(ai));\n  }\n};\nexport const { isBigNumber } = BigNumber;\nexport const bigNumberify = (x) => BigNumber.from(x);\nexport const bigNumberToNumber = (x) => bigNumberify(x).toNumber();\nexport const checkedBigNumberify = (at, m, x) => {\n  const xb = bigNumberify(x);\n  if (xb.gte(0) && xb.lte(m)) {\n    return xb;\n  }\n  throw Error(`bigNumberify: ${x} out of range [0, ${m}] at ${at}`);\n};\n// Contracts\n// .canonicalize turns stuff into the \"canonical backend representation\"\nexport function protect(ctc, v, ai = null) {\n  try {\n    return ctc.canonicalize(v);\n  } catch (e) {\n    console.log(`Protect failed: expected ${ctc.name} but got ${JSON.stringify(v)} ${format_ai(ai)}`);\n    throw e;\n  }\n}\nexport const isHex = isHexString;\nexport const hexToString = toUtf8String;\nexport const stringToHex = (x) => hexlify(toUtf8Bytes(x));\nexport const makeDigest = (prep) => (t, v) => {\n  const args = [t, v];\n  debug('digest(', args, ') =>');\n  const kekCat = prep(t, v);\n  debug('digest(', args, ') => internal(', hexlify(kekCat), ')');\n  const r = ethers.utils.keccak256(kekCat);\n  debug('keccak(', args, ') => internal(', hexlify(kekCat), ') => ', r);\n  return r;\n};\nexport const hexToBigNumber = (h) => bigNumberify(hexTo0x(h));\nexport const uintToBytes = (i) => bigNumberToHex(i);\nexport const bigNumberToHex = (u, size = 32) => {\n  const width = 8 * size;\n  const format = `ufixed${width}x0`;\n  const nPos = bigNumberify(u).toTwos(width);\n  // They took away padZeros so we have to use FixedNumber\n  const nFix = ethers.FixedNumber.from(nPos.toString(), format);\n  // XXX why do we slice off the 0x?\n  return hexlify(nFix).slice(2);\n};\nexport const bytesEq = (x, y) => {\n  debug('bytesEq(', x, ',', y, ')');\n  return forceHex(x) === forceHex(y);\n};\nexport const digestEq = bytesEq;\nexport const makeRandom = (width) => {\n  const randomUInt = () => hexToBigNumber(byteArrayToHex(crypto.randomBytes(width)));\n  const hasRandom = {\n    random: randomUInt,\n  };\n  return { randomUInt, hasRandom };\n};\nexport const eq = (a, b) => bigNumberify(a).eq(bigNumberify(b));\nexport const add = (a, b) => bigNumberify(a).add(bigNumberify(b));\nexport const sub = (a, b) => bigNumberify(a).sub(bigNumberify(b));\nexport const mod = (a, b) => bigNumberify(a).mod(bigNumberify(b));\nexport const mul = (a, b) => bigNumberify(a).mul(bigNumberify(b));\nexport const div = (a, b) => bigNumberify(a).div(bigNumberify(b));\nexport const ge = (a, b) => bigNumberify(a).gte(bigNumberify(b));\nexport const gt = (a, b) => bigNumberify(a).gt(bigNumberify(b));\nexport const le = (a, b) => bigNumberify(a).lte(bigNumberify(b));\nexport const lt = (a, b) => bigNumberify(a).lt(bigNumberify(b));\n// Array helpers\nexport const argsSlice = (args, cnt) => cnt == 0 ? [] : args.slice(-1 * cnt);\nexport const argsSplit = (args, cnt) => cnt == 0 ? [args, []] : [args.slice(0, args.length - cnt), args.slice(-1 * cnt)];\nexport function Array_set(arr, idx, elem) {\n  const arrp = arr.slice();\n  arrp[idx] = elem;\n  return arrp;\n}\nexport const Array_zip = (x, y) => x.map((e, i) => [e, y[i]]);\nexport const mapRef = (m, f) => {\n  const v = m[f];\n  // console.log(`Reading map ${JSON.stringify(m)} field ${JSON.stringify(f)} => ${JSON.stringify(v)}`);\n  if (v === undefined) {\n    return ['None', null];\n  } else {\n    return ['Some', v];\n  }\n};\nexport const objectMap = (object, mapFn) => Object.keys(object).reduce(function(result, key) {\n  result[key] = mapFn(key, object[key]);\n  return result;\n}, {});\n// XXX this doesn't really belong here, but hard to relocate due to dep on bytesEq\nexport const mkAddressEq = (T_Address) => (x, y) => bytesEq(T_Address.canonicalize(x), T_Address.canonicalize(y));\nexport const parseFixedPoint = (x) => parseInt({ sign: x.sign, i: x.i.i }) / bigNumberify(x.i.scale).toNumber();\nexport const parseInt = (x) => bigNumberify(x.i).toNumber() * (x.sign ? 1 : (-1));\n"]},"metadata":{},"sourceType":"module"}