{"ast":null,"code":"const {\n  JSONRequest\n} = require('../jsonrequest');\n\nclass LookupAccountTransactions extends JSONRequest {\n  constructor(c, intDecoding, account) {\n    super(c, intDecoding);\n    this.account = account;\n  } // eslint-disable-next-line no-underscore-dangle\n\n\n  _path() {\n    return `/v2/accounts/${this.account}/transactions`;\n  } // notePrefix to filter with, as uint8array\n\n\n  notePrefix(prefix) {\n    this.query['note-prefix'] = prefix;\n    return this;\n  } // txtype to filter with, as string\n\n\n  txType(type) {\n    this.query['tx-type'] = type;\n    return this;\n  } // sigtype to filter with, as string\n\n\n  sigType(type) {\n    this.query['sig-type'] = type;\n    return this;\n  } // txid to filter with, as string\n\n\n  txid(txid) {\n    this.query.txid = txid;\n    return this;\n  } // round to filter with, as int\n\n\n  round(round) {\n    this.query.round = round;\n    return this;\n  } // min round to filter with, as int\n\n\n  minRound(round) {\n    this.query['min-round'] = round;\n    return this;\n  } // max round to filter with, as int\n\n\n  maxRound(round) {\n    this.query['max-round'] = round;\n    return this;\n  } // asset ID to filter with, as int\n\n\n  assetID(id) {\n    this.query['asset-id'] = id;\n    return this;\n  } // limit for filter, as int\n\n\n  limit(limit) {\n    this.query.limit = limit;\n    return this;\n  } // before-time to filter with, as rfc3339 string\n\n\n  beforeTime(before) {\n    this.query['before-time'] = before;\n    return this;\n  } // after-time to filter with, as rfc3339 string\n\n\n  afterTime(after) {\n    this.query['after-time'] = after;\n    return this;\n  } // filtered results should have an amount greater than this value, as int, representing microAlgos, unless an asset-id is provided, in which case units are in the asset's units\n\n\n  currencyGreaterThan(greater) {\n    this.query['currency-greater-than'] = greater;\n    return this;\n  } // filtered results should have an amount less than this value, as int, representing microAlgos, unless an asset-id is provided, in which case units are in the asset's units\n\n\n  currencyLessThan(lesser) {\n    this.query['currency-less-than'] = lesser;\n    return this;\n  } // used for pagination\n\n\n  nextToken(nextToken) {\n    this.query.next = nextToken;\n    return this;\n  } // whether or not to include rekeying transactions\n\n\n  rekeyTo(rekeyTo) {\n    this.query['rekey-to'] = rekeyTo;\n    return this;\n  }\n\n}\n\nmodule.exports = {\n  LookupAccountTransactions\n};","map":{"version":3,"sources":["/home/x/reach/kick/app/reach-react-template/node_modules/algosdk/src/client/v2/indexer/lookupAccountTransactions.js"],"names":["JSONRequest","require","LookupAccountTransactions","constructor","c","intDecoding","account","_path","notePrefix","prefix","query","txType","type","sigType","txid","round","minRound","maxRound","assetID","id","limit","beforeTime","before","afterTime","after","currencyGreaterThan","greater","currencyLessThan","lesser","nextToken","next","rekeyTo","module","exports"],"mappings":"AAAA,MAAM;AAAEA,EAAAA;AAAF,IAAkBC,OAAO,CAAC,gBAAD,CAA/B;;AAEA,MAAMC,yBAAN,SAAwCF,WAAxC,CAAoD;AAClDG,EAAAA,WAAW,CAACC,CAAD,EAAIC,WAAJ,EAAiBC,OAAjB,EAA0B;AACnC,UAAMF,CAAN,EAASC,WAAT;AACA,SAAKC,OAAL,GAAeA,OAAf;AACD,GAJiD,CAMlD;;;AACAC,EAAAA,KAAK,GAAG;AACN,WAAQ,gBAAe,KAAKD,OAAQ,eAApC;AACD,GATiD,CAWlD;;;AACAE,EAAAA,UAAU,CAACC,MAAD,EAAS;AACjB,SAAKC,KAAL,CAAW,aAAX,IAA4BD,MAA5B;AACA,WAAO,IAAP;AACD,GAfiD,CAiBlD;;;AACAE,EAAAA,MAAM,CAACC,IAAD,EAAO;AACX,SAAKF,KAAL,CAAW,SAAX,IAAwBE,IAAxB;AACA,WAAO,IAAP;AACD,GArBiD,CAuBlD;;;AACAC,EAAAA,OAAO,CAACD,IAAD,EAAO;AACZ,SAAKF,KAAL,CAAW,UAAX,IAAyBE,IAAzB;AACA,WAAO,IAAP;AACD,GA3BiD,CA6BlD;;;AACAE,EAAAA,IAAI,CAACA,IAAD,EAAO;AACT,SAAKJ,KAAL,CAAWI,IAAX,GAAkBA,IAAlB;AACA,WAAO,IAAP;AACD,GAjCiD,CAmClD;;;AACAC,EAAAA,KAAK,CAACA,KAAD,EAAQ;AACX,SAAKL,KAAL,CAAWK,KAAX,GAAmBA,KAAnB;AACA,WAAO,IAAP;AACD,GAvCiD,CAyClD;;;AACAC,EAAAA,QAAQ,CAACD,KAAD,EAAQ;AACd,SAAKL,KAAL,CAAW,WAAX,IAA0BK,KAA1B;AACA,WAAO,IAAP;AACD,GA7CiD,CA+ClD;;;AACAE,EAAAA,QAAQ,CAACF,KAAD,EAAQ;AACd,SAAKL,KAAL,CAAW,WAAX,IAA0BK,KAA1B;AACA,WAAO,IAAP;AACD,GAnDiD,CAqDlD;;;AACAG,EAAAA,OAAO,CAACC,EAAD,EAAK;AACV,SAAKT,KAAL,CAAW,UAAX,IAAyBS,EAAzB;AACA,WAAO,IAAP;AACD,GAzDiD,CA2DlD;;;AACAC,EAAAA,KAAK,CAACA,KAAD,EAAQ;AACX,SAAKV,KAAL,CAAWU,KAAX,GAAmBA,KAAnB;AACA,WAAO,IAAP;AACD,GA/DiD,CAiElD;;;AACAC,EAAAA,UAAU,CAACC,MAAD,EAAS;AACjB,SAAKZ,KAAL,CAAW,aAAX,IAA4BY,MAA5B;AACA,WAAO,IAAP;AACD,GArEiD,CAuElD;;;AACAC,EAAAA,SAAS,CAACC,KAAD,EAAQ;AACf,SAAKd,KAAL,CAAW,YAAX,IAA2Bc,KAA3B;AACA,WAAO,IAAP;AACD,GA3EiD,CA6ElD;;;AACAC,EAAAA,mBAAmB,CAACC,OAAD,EAAU;AAC3B,SAAKhB,KAAL,CAAW,uBAAX,IAAsCgB,OAAtC;AACA,WAAO,IAAP;AACD,GAjFiD,CAmFlD;;;AACAC,EAAAA,gBAAgB,CAACC,MAAD,EAAS;AACvB,SAAKlB,KAAL,CAAW,oBAAX,IAAmCkB,MAAnC;AACA,WAAO,IAAP;AACD,GAvFiD,CAyFlD;;;AACAC,EAAAA,SAAS,CAACA,SAAD,EAAY;AACnB,SAAKnB,KAAL,CAAWoB,IAAX,GAAkBD,SAAlB;AACA,WAAO,IAAP;AACD,GA7FiD,CA+FlD;;;AACAE,EAAAA,OAAO,CAACA,OAAD,EAAU;AACf,SAAKrB,KAAL,CAAW,UAAX,IAAyBqB,OAAzB;AACA,WAAO,IAAP;AACD;;AAnGiD;;AAsGpDC,MAAM,CAACC,OAAP,GAAiB;AAAE/B,EAAAA;AAAF,CAAjB","sourcesContent":["const { JSONRequest } = require('../jsonrequest');\n\nclass LookupAccountTransactions extends JSONRequest {\n  constructor(c, intDecoding, account) {\n    super(c, intDecoding);\n    this.account = account;\n  }\n\n  // eslint-disable-next-line no-underscore-dangle\n  _path() {\n    return `/v2/accounts/${this.account}/transactions`;\n  }\n\n  // notePrefix to filter with, as uint8array\n  notePrefix(prefix) {\n    this.query['note-prefix'] = prefix;\n    return this;\n  }\n\n  // txtype to filter with, as string\n  txType(type) {\n    this.query['tx-type'] = type;\n    return this;\n  }\n\n  // sigtype to filter with, as string\n  sigType(type) {\n    this.query['sig-type'] = type;\n    return this;\n  }\n\n  // txid to filter with, as string\n  txid(txid) {\n    this.query.txid = txid;\n    return this;\n  }\n\n  // round to filter with, as int\n  round(round) {\n    this.query.round = round;\n    return this;\n  }\n\n  // min round to filter with, as int\n  minRound(round) {\n    this.query['min-round'] = round;\n    return this;\n  }\n\n  // max round to filter with, as int\n  maxRound(round) {\n    this.query['max-round'] = round;\n    return this;\n  }\n\n  // asset ID to filter with, as int\n  assetID(id) {\n    this.query['asset-id'] = id;\n    return this;\n  }\n\n  // limit for filter, as int\n  limit(limit) {\n    this.query.limit = limit;\n    return this;\n  }\n\n  // before-time to filter with, as rfc3339 string\n  beforeTime(before) {\n    this.query['before-time'] = before;\n    return this;\n  }\n\n  // after-time to filter with, as rfc3339 string\n  afterTime(after) {\n    this.query['after-time'] = after;\n    return this;\n  }\n\n  // filtered results should have an amount greater than this value, as int, representing microAlgos, unless an asset-id is provided, in which case units are in the asset's units\n  currencyGreaterThan(greater) {\n    this.query['currency-greater-than'] = greater;\n    return this;\n  }\n\n  // filtered results should have an amount less than this value, as int, representing microAlgos, unless an asset-id is provided, in which case units are in the asset's units\n  currencyLessThan(lesser) {\n    this.query['currency-less-than'] = lesser;\n    return this;\n  }\n\n  // used for pagination\n  nextToken(nextToken) {\n    this.query.next = nextToken;\n    return this;\n  }\n\n  // whether or not to include rekeying transactions\n  rekeyTo(rekeyTo) {\n    this.query['rekey-to'] = rekeyTo;\n    return this;\n  }\n}\n\nmodule.exports = { LookupAccountTransactions };\n"]},"metadata":{},"sourceType":"script"}