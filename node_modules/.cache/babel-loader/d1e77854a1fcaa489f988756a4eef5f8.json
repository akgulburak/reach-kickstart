{"ast":null,"code":"class JSONRequest {\n  /**\n   * @param {HttpClient} client HTTPClient object.\n   * @param {\"default\" | \"safe\" | \"mixed\" | \"bigint\" | undefined} intDecoding The method to use\n   *   for decoding integers from this request's response. See the setIntDecoding method for more\n   *   details.\n   */\n  constructor(client, intDecoding = undefined) {\n    this.c = client;\n    this.query = {};\n    this.intDecoding = intDecoding || 'default';\n  }\n  /**\n   * @returns {string} The path of this request.\n   */\n  // eslint-disable-next-line no-underscore-dangle,class-methods-use-this\n\n\n  _path() {\n    throw new Error('Must be overriden by implementing class.');\n  }\n  /**\n   * Execute the request.\n   * @param {object} headers Additional headers to send in the request. Optional.\n   * @returns {Promise<object>} A promise which resolves to the response data.\n   */\n\n\n  async do(headers = {}) {\n    const jsonOptions = {};\n\n    if (this.intDecoding !== 'default') {\n      jsonOptions.intDecoding = this.intDecoding;\n    }\n\n    const res = await this.c.get( // eslint-disable-next-line no-underscore-dangle\n    this._path(), this.query, headers, jsonOptions);\n    return res.body;\n  }\n  /**\n   * Configure how integers in this request's JSON response will be decoded.\n   *\n   * The options are:\n   * * \"default\": Integers will be decoded according to JSON.parse, meaning they will all be\n   *   Numbers and any values greater than Number.MAX_SAFE_INTEGER will lose precision.\n   * * \"safe\": All integers will be decoded as Numbers, but if any values are greater than\n   *   Number.MAX_SAFE_INTEGER an error will be thrown.\n   * * \"mixed\": Integers will be decoded as Numbers if they are less than or equal to\n   *   Number.MAX_SAFE_INTEGER, otherwise they will be decoded as BigInts.\n   * * \"bigint\": All integers will be decoded as BigInts.\n   *\n   * @param {\"default\" | \"safe\" | \"mixed\" | \"bigint\"} method The method to use when parsing the\n   *   response for this request. Must be one of \"default\", \"safe\", \"mixed\", or \"bigint\".\n   */\n\n\n  setIntDecoding(method) {\n    if (method !== 'default' && method !== 'safe' && method !== 'mixed' && method !== 'bigint') throw new Error(`Invalid method for int decoding: ${method}`);\n    this.intDecoding = method;\n    return this;\n  }\n\n}\n\nmodule.exports = {\n  JSONRequest\n};","map":{"version":3,"sources":["/home/x/reach/kick/app/reach-react-template/node_modules/algosdk/src/client/v2/jsonrequest.js"],"names":["JSONRequest","constructor","client","intDecoding","undefined","c","query","_path","Error","do","headers","jsonOptions","res","get","body","setIntDecoding","method","module","exports"],"mappings":"AAAA,MAAMA,WAAN,CAAkB;AAChB;AACF;AACA;AACA;AACA;AACA;AACEC,EAAAA,WAAW,CAACC,MAAD,EAASC,WAAW,GAAGC,SAAvB,EAAkC;AAC3C,SAAKC,CAAL,GAASH,MAAT;AACA,SAAKI,KAAL,GAAa,EAAb;AACA,SAAKH,WAAL,GAAmBA,WAAW,IAAI,SAAlC;AACD;AAED;AACF;AACA;AACE;;;AACAI,EAAAA,KAAK,GAAG;AACN,UAAM,IAAIC,KAAJ,CAAU,0CAAV,CAAN;AACD;AAED;AACF;AACA;AACA;AACA;;;AACU,QAAFC,EAAE,CAACC,OAAO,GAAG,EAAX,EAAe;AACrB,UAAMC,WAAW,GAAG,EAApB;;AACA,QAAI,KAAKR,WAAL,KAAqB,SAAzB,EAAoC;AAClCQ,MAAAA,WAAW,CAACR,WAAZ,GAA0B,KAAKA,WAA/B;AACD;;AACD,UAAMS,GAAG,GAAG,MAAM,KAAKP,CAAL,CAAOQ,GAAP,EAChB;AACA,SAAKN,KAAL,EAFgB,EAGhB,KAAKD,KAHW,EAIhBI,OAJgB,EAKhBC,WALgB,CAAlB;AAOA,WAAOC,GAAG,CAACE,IAAX;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEC,EAAAA,cAAc,CAACC,MAAD,EAAS;AACrB,QACEA,MAAM,KAAK,SAAX,IACAA,MAAM,KAAK,MADX,IAEAA,MAAM,KAAK,OAFX,IAGAA,MAAM,KAAK,QAJb,EAME,MAAM,IAAIR,KAAJ,CAAW,oCAAmCQ,MAAO,EAArD,CAAN;AACF,SAAKb,WAAL,GAAmBa,MAAnB;AACA,WAAO,IAAP;AACD;;AAlEe;;AAqElBC,MAAM,CAACC,OAAP,GAAiB;AAAElB,EAAAA;AAAF,CAAjB","sourcesContent":["class JSONRequest {\n  /**\n   * @param {HttpClient} client HTTPClient object.\n   * @param {\"default\" | \"safe\" | \"mixed\" | \"bigint\" | undefined} intDecoding The method to use\n   *   for decoding integers from this request's response. See the setIntDecoding method for more\n   *   details.\n   */\n  constructor(client, intDecoding = undefined) {\n    this.c = client;\n    this.query = {};\n    this.intDecoding = intDecoding || 'default';\n  }\n\n  /**\n   * @returns {string} The path of this request.\n   */\n  // eslint-disable-next-line no-underscore-dangle,class-methods-use-this\n  _path() {\n    throw new Error('Must be overriden by implementing class.');\n  }\n\n  /**\n   * Execute the request.\n   * @param {object} headers Additional headers to send in the request. Optional.\n   * @returns {Promise<object>} A promise which resolves to the response data.\n   */\n  async do(headers = {}) {\n    const jsonOptions = {};\n    if (this.intDecoding !== 'default') {\n      jsonOptions.intDecoding = this.intDecoding;\n    }\n    const res = await this.c.get(\n      // eslint-disable-next-line no-underscore-dangle\n      this._path(),\n      this.query,\n      headers,\n      jsonOptions\n    );\n    return res.body;\n  }\n\n  /**\n   * Configure how integers in this request's JSON response will be decoded.\n   *\n   * The options are:\n   * * \"default\": Integers will be decoded according to JSON.parse, meaning they will all be\n   *   Numbers and any values greater than Number.MAX_SAFE_INTEGER will lose precision.\n   * * \"safe\": All integers will be decoded as Numbers, but if any values are greater than\n   *   Number.MAX_SAFE_INTEGER an error will be thrown.\n   * * \"mixed\": Integers will be decoded as Numbers if they are less than or equal to\n   *   Number.MAX_SAFE_INTEGER, otherwise they will be decoded as BigInts.\n   * * \"bigint\": All integers will be decoded as BigInts.\n   *\n   * @param {\"default\" | \"safe\" | \"mixed\" | \"bigint\"} method The method to use when parsing the\n   *   response for this request. Must be one of \"default\", \"safe\", \"mixed\", or \"bigint\".\n   */\n  setIntDecoding(method) {\n    if (\n      method !== 'default' &&\n      method !== 'safe' &&\n      method !== 'mixed' &&\n      method !== 'bigint'\n    )\n      throw new Error(`Invalid method for int decoding: ${method}`);\n    this.intDecoding = method;\n    return this;\n  }\n}\n\nmodule.exports = { JSONRequest };\n"]},"metadata":{},"sourceType":"script"}