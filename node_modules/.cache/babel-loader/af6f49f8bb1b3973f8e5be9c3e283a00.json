{"ast":null,"code":"import rawWaitPort from 'wait-port';\nimport url from 'url';\nimport { debug } from './shared.mjs';\nconst protocolPort = {\n  'https:': 443,\n  'http:': 80\n};\nexport default async function waitPort(uri, givenPort = undefined) {\n  const {\n    hostname,\n    port,\n    protocol\n  } = url.parse(uri);\n\n  if (!(protocol === 'http:' || protocol === 'https:')) {\n    throw Error(`Unsupported protocol ${protocol}`);\n  }\n\n  const thePort = port || givenPort;\n  const testPort = typeof thePort === 'string' && parseInt(thePort, 10) || typeof thePort === 'number' && thePort || protocolPort[protocol];\n  const args = {\n    host: hostname || undefined,\n    port: testPort,\n    output: 'silent',\n    timeout: 1000 * 60 * 1\n  };\n  debug('waitPort', {\n    uri,\n    givenPort,\n    thePort,\n    testPort\n  }, args);\n  await rawWaitPort(args);\n  debug('waitPort complete');\n}","map":{"version":3,"sources":["/home/x/reach/kick/github/node_modules/@reach-sh/stdlib/waitPort.mjs"],"names":["rawWaitPort","url","debug","protocolPort","waitPort","uri","givenPort","undefined","hostname","port","protocol","parse","Error","thePort","testPort","parseInt","args","host","output","timeout"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,WAAxB;AACA,OAAOC,GAAP,MAAgB,KAAhB;AACA,SAASC,KAAT,QAAsB,cAAtB;AACA,MAAMC,YAAY,GAAG;AACnB,YAAU,GADS;AAEnB,WAAS;AAFU,CAArB;AAIA,eAAe,eAAeC,QAAf,CAAwBC,GAAxB,EAA6BC,SAAS,GAAGC,SAAzC,EAAoD;AACjE,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,IAAZ;AAAkBC,IAAAA;AAAlB,MAA+BT,GAAG,CAACU,KAAJ,CAAUN,GAAV,CAArC;;AACA,MAAI,EAAEK,QAAQ,KAAK,OAAb,IAAwBA,QAAQ,KAAK,QAAvC,CAAJ,EAAsD;AACpD,UAAME,KAAK,CAAE,wBAAuBF,QAAS,EAAlC,CAAX;AACD;;AACD,QAAMG,OAAO,GAAGJ,IAAI,IAAIH,SAAxB;AACA,QAAMQ,QAAQ,GAAI,OAAOD,OAAP,KAAmB,QAAnB,IAA+BE,QAAQ,CAACF,OAAD,EAAU,EAAV,CAAxC,IAA2D,OAAOA,OAAP,KAAmB,QAAnB,IAA+BA,OAA1F,IAAsGV,YAAY,CAACO,QAAD,CAAnI;AACA,QAAMM,IAAI,GAAG;AACXC,IAAAA,IAAI,EAAET,QAAQ,IAAID,SADP;AAEXE,IAAAA,IAAI,EAAEK,QAFK;AAGXI,IAAAA,MAAM,EAAE,QAHG;AAIXC,IAAAA,OAAO,EAAE,OAAO,EAAP,GAAY;AAJV,GAAb;AAMAjB,EAAAA,KAAK,CAAC,UAAD,EAAa;AAAEG,IAAAA,GAAF;AAAOC,IAAAA,SAAP;AAAkBO,IAAAA,OAAlB;AAA2BC,IAAAA;AAA3B,GAAb,EAAoDE,IAApD,CAAL;AACA,QAAMhB,WAAW,CAACgB,IAAD,CAAjB;AACAd,EAAAA,KAAK,CAAC,mBAAD,CAAL;AACD","sourcesContent":["import rawWaitPort from 'wait-port';\nimport url from 'url';\nimport { debug } from './shared.mjs';\nconst protocolPort = {\n  'https:': 443,\n  'http:': 80,\n};\nexport default async function waitPort(uri, givenPort = undefined) {\n  const { hostname, port, protocol } = url.parse(uri);\n  if (!(protocol === 'http:' || protocol === 'https:')) {\n    throw Error(`Unsupported protocol ${protocol}`);\n  }\n  const thePort = port || givenPort;\n  const testPort = (typeof thePort === 'string' && parseInt(thePort, 10)) || (typeof thePort === 'number' && thePort) || protocolPort[protocol];\n  const args = {\n    host: hostname || undefined,\n    port: testPort,\n    output: 'silent',\n    timeout: 1000 * 60 * 1,\n  };\n  debug('waitPort', { uri, givenPort, thePort, testPort }, args);\n  await rawWaitPort(args);\n  debug('waitPort complete');\n}\n"]},"metadata":{},"sourceType":"module"}