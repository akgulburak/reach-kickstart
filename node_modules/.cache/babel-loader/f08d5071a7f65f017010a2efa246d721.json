{"ast":null,"code":"const client = require('../../client');\n\nconst mhc = require('./makeHealthCheck');\n\nconst lacbid = require('./lookupAccountByID');\n\nconst lact = require('./lookupAccountTransactions');\n\nconst lapp = require('./lookupApplications');\n\nconst lasb = require('./lookupAssetBalances');\n\nconst lasbid = require('./lookupAssetByID');\n\nconst last = require('./lookupAssetTransactions');\n\nconst lb = require('./lookupBlock');\n\nconst ltbid = require('./lookupTransactionByID');\n\nconst sfas = require('./searchForAssets');\n\nconst sfapp = require('./searchForApplications');\n\nconst sft = require('./searchForTransactions');\n\nconst sac = require('./searchAccounts');\n\nclass IndexerClient {\n  constructor(token, baseServer = 'http://127.0.0.1', port = 8080, headers = {}) {\n    // workaround to allow backwards compatibility for multiple headers\n    let tokenHeader = token;\n\n    if (typeof tokenHeader === 'string') {\n      tokenHeader = {\n        'X-Indexer-API-Token': tokenHeader\n      };\n    }\n\n    this.c = new client.HTTPClient(tokenHeader, baseServer, port, headers);\n    this.intDecoding = 'default';\n  }\n  /**\n   * Set the default int decoding method for all JSON requests this client creates.\n   * @param {\"default\" | \"safe\" | \"mixed\" | \"bigint\"} method The method to use when parsing the\n   *   response for request. Must be one of \"default\", \"safe\", \"mixed\", or \"bigint\". See\n   *   JSONRequest.setIntDecoding for more details about what each method does.\n   */\n\n\n  setIntEncoding(method) {\n    this.intDecoding = method;\n  }\n  /**\n   * Get the default int decoding method for all JSON requests this client creates.\n   */\n\n\n  getIntEncoding() {\n    return this.intDecoding;\n  }\n  /**\n   * Returns the health object for the service.\n   */\n\n\n  makeHealthCheck() {\n    return new mhc.MakeHealthCheck(this.c, this.intDecoding);\n  }\n  /**\n   * Returns holder balances for the given asset.\n   * @param {number} index The asset ID to look up.\n   */\n\n\n  lookupAssetBalances(index) {\n    return new lasb.LookupAssetBalances(this.c, this.intDecoding, index);\n  }\n  /**\n   * Returns transactions relating to the given asset.\n   * @param {number} index The asset ID to look up.\n   */\n\n\n  lookupAssetTransactions(index) {\n    return new last.LookupAssetTransactions(this.c, this.intDecoding, index);\n  }\n  /**\n   * Returns transactions relating to the given account.\n   * @param {string} account The address of the account.\n   */\n\n\n  lookupAccountTransactions(account) {\n    return new lact.LookupAccountTransactions(this.c, this.intDecoding, account);\n  }\n  /**\n   * Returns the block for the passed round.\n   * @param {number} round The number of the round to look up.\n   */\n\n\n  lookupBlock(round) {\n    return new lb.LookupBlock(this.c, this.intDecoding, round);\n  }\n  /**\n   * Returns information about the given transaction.\n   * @param {string} txID The ID of the transaction to look up.\n   */\n\n\n  lookupTransactionByID(txID) {\n    return new ltbid.LookupTransactionByID(this.c, this.intDecoding, txID);\n  }\n  /**\n   * Returns information about the given account.\n   * @param {string} account The address of the account to look up.\n   */\n\n\n  lookupAccountByID(account) {\n    return new lacbid.LookupAccountByID(this.c, this.intDecoding, account);\n  }\n  /**\n   * Returns information about the passed asset.\n   * @param {number} index The ID of the asset ot look up.\n   */\n\n\n  lookupAssetByID(index) {\n    return new lasbid.LookupAssetByID(this.c, this.intDecoding, index);\n  }\n  /**\n   * Returns information about the passed application.\n   * @param {number} index The ID of the application to look up.\n   */\n\n\n  lookupApplications(index) {\n    return new lapp.LookupApplications(this.c, this.intDecoding, index);\n  }\n  /**\n   * Returns information about indexed accounts.\n   */\n\n\n  searchAccounts() {\n    return new sac.SearchAccounts(this.c, this.intDecoding);\n  }\n  /**\n   * Returns information about indexed transactions.\n   */\n\n\n  searchForTransactions() {\n    return new sft.SearchForTransactions(this.c, this.intDecoding);\n  }\n  /**\n   * Returns information about indexed assets.\n   */\n\n\n  searchForAssets() {\n    return new sfas.SearchForAssets(this.c, this.intDecoding);\n  }\n  /**\n   * Returns information about indexed applications.\n   */\n\n\n  searchForApplications() {\n    return new sfapp.SearchForApplications(this.c, this.intDecoding);\n  }\n\n}\n\nmodule.exports = {\n  IndexerClient\n};","map":{"version":3,"sources":["/home/x/reach/kick/github/node_modules/algosdk/src/client/v2/indexer/indexer.js"],"names":["client","require","mhc","lacbid","lact","lapp","lasb","lasbid","last","lb","ltbid","sfas","sfapp","sft","sac","IndexerClient","constructor","token","baseServer","port","headers","tokenHeader","c","HTTPClient","intDecoding","setIntEncoding","method","getIntEncoding","makeHealthCheck","MakeHealthCheck","lookupAssetBalances","index","LookupAssetBalances","lookupAssetTransactions","LookupAssetTransactions","lookupAccountTransactions","account","LookupAccountTransactions","lookupBlock","round","LookupBlock","lookupTransactionByID","txID","LookupTransactionByID","lookupAccountByID","LookupAccountByID","lookupAssetByID","LookupAssetByID","lookupApplications","LookupApplications","searchAccounts","SearchAccounts","searchForTransactions","SearchForTransactions","searchForAssets","SearchForAssets","searchForApplications","SearchForApplications","module","exports"],"mappings":"AAAA,MAAMA,MAAM,GAAGC,OAAO,CAAC,cAAD,CAAtB;;AACA,MAAMC,GAAG,GAAGD,OAAO,CAAC,mBAAD,CAAnB;;AACA,MAAME,MAAM,GAAGF,OAAO,CAAC,qBAAD,CAAtB;;AACA,MAAMG,IAAI,GAAGH,OAAO,CAAC,6BAAD,CAApB;;AACA,MAAMI,IAAI,GAAGJ,OAAO,CAAC,sBAAD,CAApB;;AACA,MAAMK,IAAI,GAAGL,OAAO,CAAC,uBAAD,CAApB;;AACA,MAAMM,MAAM,GAAGN,OAAO,CAAC,mBAAD,CAAtB;;AACA,MAAMO,IAAI,GAAGP,OAAO,CAAC,2BAAD,CAApB;;AACA,MAAMQ,EAAE,GAAGR,OAAO,CAAC,eAAD,CAAlB;;AACA,MAAMS,KAAK,GAAGT,OAAO,CAAC,yBAAD,CAArB;;AACA,MAAMU,IAAI,GAAGV,OAAO,CAAC,mBAAD,CAApB;;AACA,MAAMW,KAAK,GAAGX,OAAO,CAAC,yBAAD,CAArB;;AACA,MAAMY,GAAG,GAAGZ,OAAO,CAAC,yBAAD,CAAnB;;AACA,MAAMa,GAAG,GAAGb,OAAO,CAAC,kBAAD,CAAnB;;AAEA,MAAMc,aAAN,CAAoB;AAClBC,EAAAA,WAAW,CACTC,KADS,EAETC,UAAU,GAAG,kBAFJ,EAGTC,IAAI,GAAG,IAHE,EAITC,OAAO,GAAG,EAJD,EAKT;AACA;AACA,QAAIC,WAAW,GAAGJ,KAAlB;;AACA,QAAI,OAAOI,WAAP,KAAuB,QAA3B,EAAqC;AACnCA,MAAAA,WAAW,GAAG;AAAE,+BAAuBA;AAAzB,OAAd;AACD;;AAED,SAAKC,CAAL,GAAS,IAAItB,MAAM,CAACuB,UAAX,CAAsBF,WAAtB,EAAmCH,UAAnC,EAA+CC,IAA/C,EAAqDC,OAArD,CAAT;AAEA,SAAKI,WAAL,GAAmB,SAAnB;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACEC,EAAAA,cAAc,CAACC,MAAD,EAAS;AACrB,SAAKF,WAAL,GAAmBE,MAAnB;AACD;AAED;AACF;AACA;;;AACEC,EAAAA,cAAc,GAAG;AACf,WAAO,KAAKH,WAAZ;AACD;AAED;AACF;AACA;;;AACEI,EAAAA,eAAe,GAAG;AAChB,WAAO,IAAI1B,GAAG,CAAC2B,eAAR,CAAwB,KAAKP,CAA7B,EAAgC,KAAKE,WAArC,CAAP;AACD;AAED;AACF;AACA;AACA;;;AACEM,EAAAA,mBAAmB,CAACC,KAAD,EAAQ;AACzB,WAAO,IAAIzB,IAAI,CAAC0B,mBAAT,CAA6B,KAAKV,CAAlC,EAAqC,KAAKE,WAA1C,EAAuDO,KAAvD,CAAP;AACD;AAED;AACF;AACA;AACA;;;AACEE,EAAAA,uBAAuB,CAACF,KAAD,EAAQ;AAC7B,WAAO,IAAIvB,IAAI,CAAC0B,uBAAT,CAAiC,KAAKZ,CAAtC,EAAyC,KAAKE,WAA9C,EAA2DO,KAA3D,CAAP;AACD;AAED;AACF;AACA;AACA;;;AACEI,EAAAA,yBAAyB,CAACC,OAAD,EAAU;AACjC,WAAO,IAAIhC,IAAI,CAACiC,yBAAT,CACL,KAAKf,CADA,EAEL,KAAKE,WAFA,EAGLY,OAHK,CAAP;AAKD;AAED;AACF;AACA;AACA;;;AACEE,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,WAAO,IAAI9B,EAAE,CAAC+B,WAAP,CAAmB,KAAKlB,CAAxB,EAA2B,KAAKE,WAAhC,EAA6Ce,KAA7C,CAAP;AACD;AAED;AACF;AACA;AACA;;;AACEE,EAAAA,qBAAqB,CAACC,IAAD,EAAO;AAC1B,WAAO,IAAIhC,KAAK,CAACiC,qBAAV,CAAgC,KAAKrB,CAArC,EAAwC,KAAKE,WAA7C,EAA0DkB,IAA1D,CAAP;AACD;AAED;AACF;AACA;AACA;;;AACEE,EAAAA,iBAAiB,CAACR,OAAD,EAAU;AACzB,WAAO,IAAIjC,MAAM,CAAC0C,iBAAX,CAA6B,KAAKvB,CAAlC,EAAqC,KAAKE,WAA1C,EAAuDY,OAAvD,CAAP;AACD;AAED;AACF;AACA;AACA;;;AACEU,EAAAA,eAAe,CAACf,KAAD,EAAQ;AACrB,WAAO,IAAIxB,MAAM,CAACwC,eAAX,CAA2B,KAAKzB,CAAhC,EAAmC,KAAKE,WAAxC,EAAqDO,KAArD,CAAP;AACD;AAED;AACF;AACA;AACA;;;AACEiB,EAAAA,kBAAkB,CAACjB,KAAD,EAAQ;AACxB,WAAO,IAAI1B,IAAI,CAAC4C,kBAAT,CAA4B,KAAK3B,CAAjC,EAAoC,KAAKE,WAAzC,EAAsDO,KAAtD,CAAP;AACD;AAED;AACF;AACA;;;AACEmB,EAAAA,cAAc,GAAG;AACf,WAAO,IAAIpC,GAAG,CAACqC,cAAR,CAAuB,KAAK7B,CAA5B,EAA+B,KAAKE,WAApC,CAAP;AACD;AAED;AACF;AACA;;;AACE4B,EAAAA,qBAAqB,GAAG;AACtB,WAAO,IAAIvC,GAAG,CAACwC,qBAAR,CAA8B,KAAK/B,CAAnC,EAAsC,KAAKE,WAA3C,CAAP;AACD;AAED;AACF;AACA;;;AACE8B,EAAAA,eAAe,GAAG;AAChB,WAAO,IAAI3C,IAAI,CAAC4C,eAAT,CAAyB,KAAKjC,CAA9B,EAAiC,KAAKE,WAAtC,CAAP;AACD;AAED;AACF;AACA;;;AACEgC,EAAAA,qBAAqB,GAAG;AACtB,WAAO,IAAI5C,KAAK,CAAC6C,qBAAV,CAAgC,KAAKnC,CAArC,EAAwC,KAAKE,WAA7C,CAAP;AACD;;AAxIiB;;AA0IpBkC,MAAM,CAACC,OAAP,GAAiB;AAAE5C,EAAAA;AAAF,CAAjB","sourcesContent":["const client = require('../../client');\nconst mhc = require('./makeHealthCheck');\nconst lacbid = require('./lookupAccountByID');\nconst lact = require('./lookupAccountTransactions');\nconst lapp = require('./lookupApplications');\nconst lasb = require('./lookupAssetBalances');\nconst lasbid = require('./lookupAssetByID');\nconst last = require('./lookupAssetTransactions');\nconst lb = require('./lookupBlock');\nconst ltbid = require('./lookupTransactionByID');\nconst sfas = require('./searchForAssets');\nconst sfapp = require('./searchForApplications');\nconst sft = require('./searchForTransactions');\nconst sac = require('./searchAccounts');\n\nclass IndexerClient {\n  constructor(\n    token,\n    baseServer = 'http://127.0.0.1',\n    port = 8080,\n    headers = {}\n  ) {\n    // workaround to allow backwards compatibility for multiple headers\n    let tokenHeader = token;\n    if (typeof tokenHeader === 'string') {\n      tokenHeader = { 'X-Indexer-API-Token': tokenHeader };\n    }\n\n    this.c = new client.HTTPClient(tokenHeader, baseServer, port, headers);\n\n    this.intDecoding = 'default';\n  }\n\n  /**\n   * Set the default int decoding method for all JSON requests this client creates.\n   * @param {\"default\" | \"safe\" | \"mixed\" | \"bigint\"} method The method to use when parsing the\n   *   response for request. Must be one of \"default\", \"safe\", \"mixed\", or \"bigint\". See\n   *   JSONRequest.setIntDecoding for more details about what each method does.\n   */\n  setIntEncoding(method) {\n    this.intDecoding = method;\n  }\n\n  /**\n   * Get the default int decoding method for all JSON requests this client creates.\n   */\n  getIntEncoding() {\n    return this.intDecoding;\n  }\n\n  /**\n   * Returns the health object for the service.\n   */\n  makeHealthCheck() {\n    return new mhc.MakeHealthCheck(this.c, this.intDecoding);\n  }\n\n  /**\n   * Returns holder balances for the given asset.\n   * @param {number} index The asset ID to look up.\n   */\n  lookupAssetBalances(index) {\n    return new lasb.LookupAssetBalances(this.c, this.intDecoding, index);\n  }\n\n  /**\n   * Returns transactions relating to the given asset.\n   * @param {number} index The asset ID to look up.\n   */\n  lookupAssetTransactions(index) {\n    return new last.LookupAssetTransactions(this.c, this.intDecoding, index);\n  }\n\n  /**\n   * Returns transactions relating to the given account.\n   * @param {string} account The address of the account.\n   */\n  lookupAccountTransactions(account) {\n    return new lact.LookupAccountTransactions(\n      this.c,\n      this.intDecoding,\n      account\n    );\n  }\n\n  /**\n   * Returns the block for the passed round.\n   * @param {number} round The number of the round to look up.\n   */\n  lookupBlock(round) {\n    return new lb.LookupBlock(this.c, this.intDecoding, round);\n  }\n\n  /**\n   * Returns information about the given transaction.\n   * @param {string} txID The ID of the transaction to look up.\n   */\n  lookupTransactionByID(txID) {\n    return new ltbid.LookupTransactionByID(this.c, this.intDecoding, txID);\n  }\n\n  /**\n   * Returns information about the given account.\n   * @param {string} account The address of the account to look up.\n   */\n  lookupAccountByID(account) {\n    return new lacbid.LookupAccountByID(this.c, this.intDecoding, account);\n  }\n\n  /**\n   * Returns information about the passed asset.\n   * @param {number} index The ID of the asset ot look up.\n   */\n  lookupAssetByID(index) {\n    return new lasbid.LookupAssetByID(this.c, this.intDecoding, index);\n  }\n\n  /**\n   * Returns information about the passed application.\n   * @param {number} index The ID of the application to look up.\n   */\n  lookupApplications(index) {\n    return new lapp.LookupApplications(this.c, this.intDecoding, index);\n  }\n\n  /**\n   * Returns information about indexed accounts.\n   */\n  searchAccounts() {\n    return new sac.SearchAccounts(this.c, this.intDecoding);\n  }\n\n  /**\n   * Returns information about indexed transactions.\n   */\n  searchForTransactions() {\n    return new sft.SearchForTransactions(this.c, this.intDecoding);\n  }\n\n  /**\n   * Returns information about indexed assets.\n   */\n  searchForAssets() {\n    return new sfas.SearchForAssets(this.c, this.intDecoding);\n  }\n\n  /**\n   * Returns information about indexed applications.\n   */\n  searchForApplications() {\n    return new sfapp.SearchForApplications(this.c, this.intDecoding);\n  }\n}\nmodule.exports = { IndexerClient };\n"]},"metadata":{},"sourceType":"script"}