{"ast":null,"code":"const {\n  Buffer\n} = require('buffer');\n/**\n * Sets the default header (if not previously set)\n * @param headers\n * @returns {*}\n */\n\n\nfunction setHeaders(headers) {\n  let hdrs = headers;\n\n  if (Object.keys(hdrs).every(key => key.toLowerCase() !== 'content-type')) {\n    hdrs = { ...headers\n    };\n    hdrs['Content-Type'] = 'text/plain';\n  }\n\n  return hdrs;\n}\n\nclass Compile {\n  constructor(c, source) {\n    this.c = c;\n    this.source = source;\n  }\n  /**\n   * Executes compile\n   * @param headers, optional\n   * @returns {Promise<*>}\n   */\n\n\n  async do(headers = {}) {\n    const txHeaders = setHeaders(headers);\n    const res = await this.c.post('/v2/teal/compile', Buffer.from(this.source), txHeaders);\n    return res.body;\n  }\n\n}\n\nmodule.exports = {\n  Compile,\n  setHeaders\n};","map":{"version":3,"sources":["/home/x/reach/kick/app/reach-react-template/node_modules/algosdk/src/client/v2/algod/compile.js"],"names":["Buffer","require","setHeaders","headers","hdrs","Object","keys","every","key","toLowerCase","Compile","constructor","c","source","do","txHeaders","res","post","from","body","module","exports"],"mappings":"AAAA,MAAM;AAAEA,EAAAA;AAAF,IAAaC,OAAO,CAAC,QAAD,CAA1B;AAEA;AACA;AACA;AACA;AACA;;;AACA,SAASC,UAAT,CAAoBC,OAApB,EAA6B;AAC3B,MAAIC,IAAI,GAAGD,OAAX;;AACA,MAAIE,MAAM,CAACC,IAAP,CAAYF,IAAZ,EAAkBG,KAAlB,CAAyBC,GAAD,IAASA,GAAG,CAACC,WAAJ,OAAsB,cAAvD,CAAJ,EAA4E;AAC1EL,IAAAA,IAAI,GAAG,EAAE,GAAGD;AAAL,KAAP;AACAC,IAAAA,IAAI,CAAC,cAAD,CAAJ,GAAuB,YAAvB;AACD;;AACD,SAAOA,IAAP;AACD;;AAED,MAAMM,OAAN,CAAc;AACZC,EAAAA,WAAW,CAACC,CAAD,EAAIC,MAAJ,EAAY;AACrB,SAAKD,CAAL,GAASA,CAAT;AACA,SAAKC,MAAL,GAAcA,MAAd;AACD;AAED;AACF;AACA;AACA;AACA;;;AACU,QAAFC,EAAE,CAACX,OAAO,GAAG,EAAX,EAAe;AACrB,UAAMY,SAAS,GAAGb,UAAU,CAACC,OAAD,CAA5B;AACA,UAAMa,GAAG,GAAG,MAAM,KAAKJ,CAAL,CAAOK,IAAP,CAChB,kBADgB,EAEhBjB,MAAM,CAACkB,IAAP,CAAY,KAAKL,MAAjB,CAFgB,EAGhBE,SAHgB,CAAlB;AAKA,WAAOC,GAAG,CAACG,IAAX;AACD;;AAnBW;;AAsBdC,MAAM,CAACC,OAAP,GAAiB;AAAEX,EAAAA,OAAF;AAAWR,EAAAA;AAAX,CAAjB","sourcesContent":["const { Buffer } = require('buffer');\n\n/**\n * Sets the default header (if not previously set)\n * @param headers\n * @returns {*}\n */\nfunction setHeaders(headers) {\n  let hdrs = headers;\n  if (Object.keys(hdrs).every((key) => key.toLowerCase() !== 'content-type')) {\n    hdrs = { ...headers };\n    hdrs['Content-Type'] = 'text/plain';\n  }\n  return hdrs;\n}\n\nclass Compile {\n  constructor(c, source) {\n    this.c = c;\n    this.source = source;\n  }\n\n  /**\n   * Executes compile\n   * @param headers, optional\n   * @returns {Promise<*>}\n   */\n  async do(headers = {}) {\n    const txHeaders = setHeaders(headers);\n    const res = await this.c.post(\n      '/v2/teal/compile',\n      Buffer.from(this.source),\n      txHeaders\n    );\n    return res.body;\n  }\n}\n\nmodule.exports = { Compile, setHeaders };\n"]},"metadata":{},"sourceType":"script"}