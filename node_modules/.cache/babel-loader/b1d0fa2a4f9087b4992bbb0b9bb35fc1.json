{"ast":null,"code":"const client = require('../../client');\n\nconst ai = require('./accountInformation');\n\nconst blk = require('./block');\n\nconst compile = require('./compile');\n\nconst dryrun = require('./dryrun');\n\nconst gasbid = require('./getAssetByID');\n\nconst gapbid = require('./getApplicationByID');\n\nconst hc = require('./healthCheck');\n\nconst pti = require('./pendingTransactionInformation');\n\nconst pt = require('./pendingTransactions');\n\nconst ptba = require('./pendingTransactionsByAddress');\n\nconst srt = require('./sendRawTransaction');\n\nconst status = require('./status');\n\nconst sab = require('./statusAfterBlock');\n\nconst sp = require('./suggestedParams');\n\nconst supply = require('./supply');\n\nconst versions = require('./versions');\n\nconst genesis = require('./genesis');\n\nconst proof = require('./proof');\n\nclass AlgodClient {\n  constructor(token = '', baseServer = 'http://r2.algorand.network', port = 4180, headers = {}) {\n    // workaround to allow backwards compatibility for multiple headers\n    let tokenHeader = token;\n\n    if (typeof tokenHeader === 'string') {\n      tokenHeader = {\n        'X-Algo-API-Token': tokenHeader\n      };\n    } // Get client\n\n\n    this.c = new client.HTTPClient(tokenHeader, baseServer, port, headers);\n    this.intDecoding = 'default';\n  }\n  /**\n   * Set the default int decoding method for all JSON requests this client creates.\n   * @param {\"default\" | \"safe\" | \"mixed\" | \"bigint\"} method The method to use when parsing the\n   *   response for request. Must be one of \"default\", \"safe\", \"mixed\", or \"bigint\". See\n   *   JSONRequest.setIntDecoding for more details about what each method does.\n   */\n\n\n  setIntEncoding(method) {\n    this.intDecoding = method;\n  }\n  /**\n   * Get the default int decoding method for all JSON requests this client creates.\n   */\n\n\n  getIntEncoding() {\n    return this.intDecoding;\n  }\n\n  healthCheck() {\n    return new hc.HealthCheck(this.c);\n  }\n\n  versionsCheck() {\n    return new versions.Versions(this.c);\n  }\n\n  sendRawTransaction(stxOrStxs) {\n    return new srt.SendRawTransaction(this.c, stxOrStxs);\n  }\n  /**\n   * Returns the given account's information.\n   * @param {string} account The address of the account to look up.\n   */\n\n\n  accountInformation(account) {\n    return new ai.AccountInformation(this.c, this.intDecoding, account);\n  }\n  /**\n   * Gets the block info for the given round.\n   * @param {number} roundNumber The round number of the block to get.\n   */\n\n\n  block(roundNumber) {\n    return new blk.Block(this.c, roundNumber);\n  }\n  /**\n   * Returns the transaction information for a specific pending transaction.\n   * @param {string} txid The TxID string of the pending transaction to look up.\n   */\n\n\n  pendingTransactionInformation(txid) {\n    return new pti.PendingTransactionInformation(this.c, txid);\n  }\n  /**\n   * Returns transactions that are pending in the pool.\n   */\n\n\n  pendingTransactionsInformation() {\n    return new pt.PendingTransactions(this.c);\n  }\n  /**\n   * Returns transactions that are pending in the pool sent by a specific sender.\n   * @param {string} address The address of the sender.\n   */\n\n\n  pendingTransactionByAddress(address) {\n    return new ptba.PendingTransactionsByAddress(this.c, address);\n  }\n  /**\n   * Retrieves the StatusResponse from the running node.\n   */\n\n\n  status() {\n    return new status.Status(this.c, this.intDecoding);\n  }\n  /**\n   * Waits for a specific round to occur then returns the StatusResponse for that round.\n   * @param {number} round The number of the round to wait for.\n   */\n\n\n  statusAfterBlock(round) {\n    return new sab.StatusAfterBlock(this.c, this.intDecoding, round);\n  }\n  /**\n   * Returns the common needed parameters for a new transaction.\n   */\n\n\n  getTransactionParams() {\n    return new sp.SuggestedParams(this.c);\n  }\n  /**\n   * Gets the supply details for the specified node's ledger.\n   */\n\n\n  supply() {\n    return new supply.Supply(this.c, this.intDecoding);\n  }\n\n  compile(source) {\n    return new compile.Compile(this.c, source);\n  }\n\n  dryrun(dr) {\n    return new dryrun.Dryrun(this.c, dr);\n  }\n  /**\n   * Given an asset ID, return asset information including creator, name, total supply and\n   * special addresses.\n   * @param {number} index The asset ID to look up.\n   */\n\n\n  getAssetByID(index) {\n    return new gasbid.GetAssetByID(this.c, this.intDecoding, index);\n  }\n  /**\n   * Given an application ID, it returns application information including creator, approval\n   * and clear programs, global and local schemas, and global state.\n   * @param {number} index The application ID to look up.\n   */\n\n\n  getApplicationByID(index) {\n    return new gapbid.GetApplicationByID(this.c, this.intDecoding, index);\n  }\n  /**\n   * Returns the entire genesis file.\n   */\n\n\n  genesis() {\n    return new genesis.Genesis(this.c, this.intDecoding);\n  }\n  /**\n   * Get the proof for a given transaction in a round.\n   * @param {number} round The round in which the transaction appears.\n   * @param {string} txID The transaction ID for which to generate a proof.\n   */\n\n\n  getProof(round, txID) {\n    return new proof.Proof(this.c, this.intDecoding, round, txID);\n  }\n\n}\n\nmodule.exports = {\n  AlgodClient\n};","map":{"version":3,"sources":["/home/x/reach/kick/app/reach-react-template/node_modules/algosdk/src/client/v2/algod/algod.js"],"names":["client","require","ai","blk","compile","dryrun","gasbid","gapbid","hc","pti","pt","ptba","srt","status","sab","sp","supply","versions","genesis","proof","AlgodClient","constructor","token","baseServer","port","headers","tokenHeader","c","HTTPClient","intDecoding","setIntEncoding","method","getIntEncoding","healthCheck","HealthCheck","versionsCheck","Versions","sendRawTransaction","stxOrStxs","SendRawTransaction","accountInformation","account","AccountInformation","block","roundNumber","Block","pendingTransactionInformation","txid","PendingTransactionInformation","pendingTransactionsInformation","PendingTransactions","pendingTransactionByAddress","address","PendingTransactionsByAddress","Status","statusAfterBlock","round","StatusAfterBlock","getTransactionParams","SuggestedParams","Supply","source","Compile","dr","Dryrun","getAssetByID","index","GetAssetByID","getApplicationByID","GetApplicationByID","Genesis","getProof","txID","Proof","module","exports"],"mappings":"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","sourcesContent":["const client = require('../../client');\nconst ai = require('./accountInformation');\nconst blk = require('./block');\nconst compile = require('./compile');\nconst dryrun = require('./dryrun');\nconst gasbid = require('./getAssetByID');\nconst gapbid = require('./getApplicationByID');\nconst hc = require('./healthCheck');\nconst pti = require('./pendingTransactionInformation');\nconst pt = require('./pendingTransactions');\nconst ptba = require('./pendingTransactionsByAddress');\nconst srt = require('./sendRawTransaction');\nconst status = require('./status');\nconst sab = require('./statusAfterBlock');\nconst sp = require('./suggestedParams');\nconst supply = require('./supply');\nconst versions = require('./versions');\nconst genesis = require('./genesis');\nconst proof = require('./proof');\n\nclass AlgodClient {\n  constructor(\n    token = '',\n    baseServer = 'http://r2.algorand.network',\n    port = 4180,\n    headers = {}\n  ) {\n    // workaround to allow backwards compatibility for multiple headers\n    let tokenHeader = token;\n    if (typeof tokenHeader === 'string') {\n      tokenHeader = { 'X-Algo-API-Token': tokenHeader };\n    }\n\n    // Get client\n    this.c = new client.HTTPClient(tokenHeader, baseServer, port, headers);\n\n    this.intDecoding = 'default';\n  }\n\n  /**\n   * Set the default int decoding method for all JSON requests this client creates.\n   * @param {\"default\" | \"safe\" | \"mixed\" | \"bigint\"} method The method to use when parsing the\n   *   response for request. Must be one of \"default\", \"safe\", \"mixed\", or \"bigint\". See\n   *   JSONRequest.setIntDecoding for more details about what each method does.\n   */\n  setIntEncoding(method) {\n    this.intDecoding = method;\n  }\n\n  /**\n   * Get the default int decoding method for all JSON requests this client creates.\n   */\n  getIntEncoding() {\n    return this.intDecoding;\n  }\n\n  healthCheck() {\n    return new hc.HealthCheck(this.c);\n  }\n\n  versionsCheck() {\n    return new versions.Versions(this.c);\n  }\n\n  sendRawTransaction(stxOrStxs) {\n    return new srt.SendRawTransaction(this.c, stxOrStxs);\n  }\n\n  /**\n   * Returns the given account's information.\n   * @param {string} account The address of the account to look up.\n   */\n  accountInformation(account) {\n    return new ai.AccountInformation(this.c, this.intDecoding, account);\n  }\n\n  /**\n   * Gets the block info for the given round.\n   * @param {number} roundNumber The round number of the block to get.\n   */\n  block(roundNumber) {\n    return new blk.Block(this.c, roundNumber);\n  }\n\n  /**\n   * Returns the transaction information for a specific pending transaction.\n   * @param {string} txid The TxID string of the pending transaction to look up.\n   */\n  pendingTransactionInformation(txid) {\n    return new pti.PendingTransactionInformation(this.c, txid);\n  }\n\n  /**\n   * Returns transactions that are pending in the pool.\n   */\n  pendingTransactionsInformation() {\n    return new pt.PendingTransactions(this.c);\n  }\n\n  /**\n   * Returns transactions that are pending in the pool sent by a specific sender.\n   * @param {string} address The address of the sender.\n   */\n  pendingTransactionByAddress(address) {\n    return new ptba.PendingTransactionsByAddress(this.c, address);\n  }\n\n  /**\n   * Retrieves the StatusResponse from the running node.\n   */\n  status() {\n    return new status.Status(this.c, this.intDecoding);\n  }\n\n  /**\n   * Waits for a specific round to occur then returns the StatusResponse for that round.\n   * @param {number} round The number of the round to wait for.\n   */\n  statusAfterBlock(round) {\n    return new sab.StatusAfterBlock(this.c, this.intDecoding, round);\n  }\n\n  /**\n   * Returns the common needed parameters for a new transaction.\n   */\n  getTransactionParams() {\n    return new sp.SuggestedParams(this.c);\n  }\n\n  /**\n   * Gets the supply details for the specified node's ledger.\n   */\n  supply() {\n    return new supply.Supply(this.c, this.intDecoding);\n  }\n\n  compile(source) {\n    return new compile.Compile(this.c, source);\n  }\n\n  dryrun(dr) {\n    return new dryrun.Dryrun(this.c, dr);\n  }\n\n  /**\n   * Given an asset ID, return asset information including creator, name, total supply and\n   * special addresses.\n   * @param {number} index The asset ID to look up.\n   */\n  getAssetByID(index) {\n    return new gasbid.GetAssetByID(this.c, this.intDecoding, index);\n  }\n\n  /**\n   * Given an application ID, it returns application information including creator, approval\n   * and clear programs, global and local schemas, and global state.\n   * @param {number} index The application ID to look up.\n   */\n  getApplicationByID(index) {\n    return new gapbid.GetApplicationByID(this.c, this.intDecoding, index);\n  }\n\n  /**\n   * Returns the entire genesis file.\n   */\n  genesis() {\n    return new genesis.Genesis(this.c, this.intDecoding);\n  }\n\n  /**\n   * Get the proof for a given transaction in a round.\n   * @param {number} round The round in which the transaction appears.\n   * @param {string} txID The transaction ID for which to generate a proof.\n   */\n  getProof(round, txID) {\n    return new proof.Proof(this.c, this.intDecoding, round, txID);\n  }\n}\n\nmodule.exports = { AlgodClient };\n"]},"metadata":{},"sourceType":"script"}