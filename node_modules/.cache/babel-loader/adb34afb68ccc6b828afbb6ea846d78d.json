{"ast":null,"code":"const {\n  Buffer\n} = require('buffer');\n\nconst base32 = require('hi-base32');\n\nconst address = require('./encoding/address');\n\nconst encoding = require('./encoding/encoding');\n\nconst nacl = require('./nacl/naclWrappers');\n\nconst utils = require('./utils/utils');\n\nconst ALGORAND_TRANSACTION_LENGTH = 52;\nconst ALGORAND_MIN_TX_FEE = 1000; // version v5\n\nconst ALGORAND_TRANSACTION_LEASE_LENGTH = 32;\nconst ALGORAND_MAX_ASSET_DECIMALS = 19;\nconst NUM_ADDL_BYTES_AFTER_SIGNING = 75; // NUM_ADDL_BYTES_AFTER_SIGNING is the number of bytes added to a txn after signing it\n\nconst ALGORAND_TRANSACTION_LEASE_LABEL_LENGTH = 5;\nconst ALGORAND_TRANSACTION_ADDRESS_LENGTH = 32;\nconst ALGORAND_TRANSACTION_REKEY_LABEL_LENGTH = 5;\nconst ASSET_METADATA_HASH_LENGTH = 32;\n/**\n * Transaction enables construction of Algorand transactions\n * */\n\nclass Transaction {\n  /* eslint-disable no-param-reassign */\n  constructor({\n    from,\n    to,\n    fee,\n    amount,\n    firstRound,\n    lastRound,\n    note,\n    genesisID,\n    genesisHash,\n    lease,\n    closeRemainderTo,\n    voteKey,\n    selectionKey,\n    voteFirst,\n    voteLast,\n    voteKeyDilution,\n    assetIndex,\n    assetTotal,\n    assetDecimals,\n    assetDefaultFrozen,\n    assetManager,\n    assetReserve,\n    assetFreeze,\n    assetClawback,\n    assetUnitName,\n    assetName,\n    assetURL,\n    assetMetadataHash,\n    freezeAccount,\n    freezeState,\n    assetRevocationTarget,\n    appIndex,\n    appOnComplete,\n    appLocalInts,\n    appLocalByteSlices,\n    appGlobalInts,\n    appGlobalByteSlices,\n    appApprovalProgram,\n    appClearProgram,\n    appArgs,\n    appAccounts,\n    appForeignApps,\n    appForeignAssets,\n    type = 'pay',\n    flatFee = false,\n    suggestedParams = undefined,\n    reKeyTo = undefined,\n    nonParticipation = false\n  }) {\n    this.name = 'Transaction';\n    this.tag = Buffer.from('TX');\n\n    if (suggestedParams !== undefined) {\n      genesisHash = suggestedParams.genesisHash;\n      fee = suggestedParams.fee;\n      if (suggestedParams.flatFee !== undefined) flatFee = suggestedParams.flatFee;\n      firstRound = suggestedParams.firstRound;\n      lastRound = suggestedParams.lastRound;\n      genesisID = suggestedParams.genesisID;\n    }\n\n    from = address.decodeAddress(from);\n    if (to !== undefined) to = address.decodeAddress(to);\n    if (closeRemainderTo !== undefined) closeRemainderTo = address.decodeAddress(closeRemainderTo);\n    if (assetManager !== undefined) assetManager = address.decodeAddress(assetManager);\n    if (assetReserve !== undefined) assetReserve = address.decodeAddress(assetReserve);\n    if (assetFreeze !== undefined) assetFreeze = address.decodeAddress(assetFreeze);\n    if (assetClawback !== undefined) assetClawback = address.decodeAddress(assetClawback);\n    if (assetRevocationTarget !== undefined) assetRevocationTarget = address.decodeAddress(assetRevocationTarget);\n    if (freezeAccount !== undefined) freezeAccount = address.decodeAddress(freezeAccount);\n    if (reKeyTo !== undefined) reKeyTo = address.decodeAddress(reKeyTo);\n    if (genesisHash === undefined) throw Error('genesis hash must be specified and in a base64 string.');\n    genesisHash = Buffer.from(genesisHash, 'base64');\n    if (amount !== undefined && (!(Number.isSafeInteger(amount) || typeof amount === 'bigint' && amount <= 0xffffffffffffffffn) || amount < 0)) throw Error('Amount must be a positive number and smaller than 2^64-1');\n    if (!Number.isSafeInteger(fee) || fee < 0) throw Error('fee must be a positive number and smaller than 2^53-1');\n    if (!Number.isSafeInteger(firstRound) || firstRound < 0) throw Error('firstRound must be a positive number');\n    if (!Number.isSafeInteger(lastRound) || lastRound < 0) throw Error('lastRound must be a positive number');\n    if (assetTotal !== undefined && (!(Number.isSafeInteger(assetTotal) || typeof assetTotal === 'bigint' && assetTotal <= 0xffffffffffffffffn) || assetTotal < 0)) throw Error('Total asset issuance must be a positive number and smaller than 2^64-1');\n    if (assetDecimals !== undefined && (!Number.isSafeInteger(assetDecimals) || assetDecimals < 0 || assetDecimals > ALGORAND_MAX_ASSET_DECIMALS)) throw Error(`assetDecimals must be a positive number and smaller than ${ALGORAND_MAX_ASSET_DECIMALS.toString()}`);\n    if (assetIndex !== undefined && (!Number.isSafeInteger(assetIndex) || assetIndex < 0)) throw Error('Asset index must be a positive number and smaller than 2^53-1');\n    if (appIndex !== undefined && (!Number.isSafeInteger(appIndex) || appIndex < 0)) throw Error('Application index must be a positive number and smaller than 2^53-1');\n    if (appLocalInts !== undefined && (!Number.isSafeInteger(appLocalInts) || appLocalInts < 0)) throw Error('Application local ints count must be a positive number and smaller than 2^53-1');\n    if (appLocalByteSlices !== undefined && (!Number.isSafeInteger(appLocalByteSlices) || appLocalByteSlices < 0)) throw Error('Application local byte slices count must be a positive number and smaller than 2^53-1');\n    if (appGlobalInts !== undefined && (!Number.isSafeInteger(appGlobalInts) || appGlobalInts < 0)) throw Error('Application global ints count must be a positive number and smaller than 2^53-1');\n    if (appGlobalByteSlices !== undefined && (!Number.isSafeInteger(appGlobalByteSlices) || appGlobalByteSlices < 0)) throw Error('Application global byte slices count must be a positive number and smaller than 2^53-1');\n\n    if (appApprovalProgram !== undefined) {\n      if (appApprovalProgram.constructor !== Uint8Array) throw Error('appApprovalProgram must be a Uint8Array.');\n    }\n\n    if (appClearProgram !== undefined) {\n      if (appClearProgram.constructor !== Uint8Array) throw Error('appClearProgram must be a Uint8Array.');\n    }\n\n    if (appArgs !== undefined) {\n      if (!Array.isArray(appArgs)) throw Error('appArgs must be an Array of Uint8Array.');\n      appArgs = appArgs.slice();\n      appArgs.forEach(arg => {\n        if (arg.constructor !== Uint8Array) throw Error('each element of AppArgs must be a Uint8Array.');\n      });\n    } else {\n      appArgs = new Uint8Array(0);\n    }\n\n    if (appAccounts !== undefined) {\n      if (!Array.isArray(appAccounts)) throw Error('appAccounts must be an Array of addresses.');\n      appAccounts = appAccounts.map(addressAsString => address.decodeAddress(addressAsString));\n    }\n\n    if (appForeignApps !== undefined) {\n      if (!Array.isArray(appForeignApps)) throw Error('appForeignApps must be an Array of integers.');\n      appForeignApps = appForeignApps.slice();\n      appForeignApps.forEach(foreignAppIndex => {\n        if (!Number.isSafeInteger(foreignAppIndex) || foreignAppIndex < 0) throw Error('each foreign application index must be a positive number and smaller than 2^53-1');\n      });\n    }\n\n    if (appForeignAssets !== undefined) {\n      if (!Array.isArray(appForeignAssets)) throw Error('appForeignAssets must be an Array of integers.');\n      appForeignAssets = appForeignAssets.slice();\n      appForeignAssets.forEach(foreignAssetIndex => {\n        if (!Number.isSafeInteger(foreignAssetIndex) || foreignAssetIndex < 0) throw Error('each foreign asset index must be a positive number and smaller than 2^53-1');\n      });\n    }\n\n    if (assetMetadataHash !== undefined && assetMetadataHash.length !== 0) {\n      if (typeof assetMetadataHash === 'string') {\n        const encoded = Buffer.from(assetMetadataHash);\n\n        if (encoded.byteLength !== ASSET_METADATA_HASH_LENGTH) {\n          throw Error(`assetMetadataHash must be a ${ASSET_METADATA_HASH_LENGTH} byte Uint8Array or string.`);\n        }\n\n        assetMetadataHash = new Uint8Array(encoded);\n      } else if (assetMetadataHash.constructor !== Uint8Array || assetMetadataHash.byteLength !== ASSET_METADATA_HASH_LENGTH) throw Error(`assetMetadataHash must be a ${ASSET_METADATA_HASH_LENGTH} byte Uint8Array or string.`);\n    } else {\n      assetMetadataHash = undefined;\n    }\n\n    if (note !== undefined) {\n      if (note.constructor !== Uint8Array) throw Error('note must be a Uint8Array.');\n    } else {\n      note = new Uint8Array(0);\n    }\n\n    if (lease !== undefined) {\n      if (lease.constructor !== Uint8Array) throw Error('lease must be a Uint8Array.');\n      if (lease.length !== ALGORAND_TRANSACTION_LEASE_LENGTH) throw Error(`lease must be of length ${ALGORAND_TRANSACTION_LEASE_LENGTH.toString()}.`);\n    } else {\n      lease = new Uint8Array(0);\n    }\n\n    if (voteKey !== undefined) {\n      voteKey = Buffer.from(voteKey, 'base64');\n    }\n\n    if (selectionKey !== undefined) {\n      selectionKey = Buffer.from(selectionKey, 'base64');\n    }\n\n    if (nonParticipation && (voteKey || selectionKey || voteFirst || voteLast || voteKeyDilution)) {\n      throw new Error('nonParticipation is true but participation params are present.');\n    }\n\n    Object.assign(this, {\n      from,\n      to,\n      fee,\n      amount,\n      firstRound,\n      lastRound,\n      note,\n      genesisID,\n      genesisHash,\n      lease,\n      closeRemainderTo,\n      voteKey,\n      selectionKey,\n      voteFirst,\n      voteLast,\n      voteKeyDilution,\n      assetIndex,\n      assetTotal,\n      assetDecimals,\n      assetDefaultFrozen,\n      assetManager,\n      assetReserve,\n      assetFreeze,\n      assetClawback,\n      assetUnitName,\n      assetName,\n      assetURL,\n      assetMetadataHash,\n      freezeAccount,\n      freezeState,\n      assetRevocationTarget,\n      appIndex,\n      appOnComplete,\n      appLocalInts,\n      appLocalByteSlices,\n      appGlobalInts,\n      appGlobalByteSlices,\n      appApprovalProgram,\n      appClearProgram,\n      appArgs,\n      appAccounts,\n      appForeignApps,\n      appForeignAssets,\n      type,\n      reKeyTo,\n      nonParticipation\n    }); // Modify Fee\n\n    if (!flatFee) {\n      this.fee *= this.estimateSize();\n    } // If suggested fee too small and will be rejected, set to min tx fee\n\n\n    if (this.fee < ALGORAND_MIN_TX_FEE) {\n      this.fee = ALGORAND_MIN_TX_FEE;\n    } // say we are aware of groups\n\n\n    this.group = undefined;\n  }\n  /* eslint-disable no-param-reassign */\n  // eslint-disable-next-line camelcase\n\n\n  get_obj_for_encoding() {\n    if (this.type === 'pay') {\n      const txn = {\n        amt: this.amount,\n        fee: this.fee,\n        fv: this.firstRound,\n        lv: this.lastRound,\n        note: Buffer.from(this.note),\n        snd: Buffer.from(this.from.publicKey),\n        type: 'pay',\n        gen: this.genesisID,\n        gh: this.genesisHash,\n        lx: Buffer.from(this.lease),\n        grp: this.group\n      }; // parse close address\n\n      if (this.closeRemainderTo !== undefined && address.encodeAddress(this.closeRemainderTo.publicKey) !== address.ALGORAND_ZERO_ADDRESS_STRING) {\n        txn.close = Buffer.from(this.closeRemainderTo.publicKey);\n      }\n\n      if (this.reKeyTo !== undefined) {\n        txn.rekey = Buffer.from(this.reKeyTo.publicKey);\n      } // allowed zero values\n\n\n      if (this.to !== undefined) txn.rcv = Buffer.from(this.to.publicKey);\n      if (!txn.note.length) delete txn.note;\n      if (!txn.amt) delete txn.amt;\n      if (!txn.fee) delete txn.fee;\n      if (!txn.gen) delete txn.gen;\n      if (txn.grp === undefined) delete txn.grp;\n      if (!txn.lx.length) delete txn.lx;\n      if (!txn.rekey) delete txn.rekey;\n      return txn;\n    }\n\n    if (this.type === 'keyreg') {\n      const txn = {\n        fee: this.fee,\n        fv: this.firstRound,\n        lv: this.lastRound,\n        note: Buffer.from(this.note),\n        snd: Buffer.from(this.from.publicKey),\n        type: this.type,\n        gen: this.genesisID,\n        gh: this.genesisHash,\n        lx: Buffer.from(this.lease),\n        grp: this.group,\n        votekey: this.voteKey,\n        selkey: this.selectionKey,\n        votefst: this.voteFirst,\n        votelst: this.voteLast,\n        votekd: this.voteKeyDilution\n      }; // allowed zero values\n\n      if (!txn.note.length) delete txn.note;\n      if (!txn.lx.length) delete txn.lx;\n      if (!txn.fee) delete txn.fee;\n      if (!txn.gen) delete txn.gen;\n      if (txn.grp === undefined) delete txn.grp;\n\n      if (this.reKeyTo !== undefined) {\n        txn.rekey = Buffer.from(this.reKeyTo.publicKey);\n      }\n\n      if (this.nonParticipation) {\n        txn.nonpart = true;\n        delete txn.votekey;\n        delete txn.selkey;\n        delete txn.votefst;\n        delete txn.votelst;\n        delete txn.votekd;\n      }\n\n      return txn;\n    }\n\n    if (this.type === 'acfg') {\n      // asset creation, or asset reconfigure, or asset destruction\n      const txn = {\n        fee: this.fee,\n        fv: this.firstRound,\n        lv: this.lastRound,\n        note: Buffer.from(this.note),\n        snd: Buffer.from(this.from.publicKey),\n        type: this.type,\n        gen: this.genesisID,\n        gh: this.genesisHash,\n        lx: Buffer.from(this.lease),\n        grp: this.group,\n        caid: this.assetIndex,\n        apar: {\n          t: this.assetTotal,\n          df: this.assetDefaultFrozen,\n          dc: this.assetDecimals\n        }\n      };\n      if (this.assetManager !== undefined) txn.apar.m = Buffer.from(this.assetManager.publicKey);\n      if (this.assetReserve !== undefined) txn.apar.r = Buffer.from(this.assetReserve.publicKey);\n      if (this.assetFreeze !== undefined) txn.apar.f = Buffer.from(this.assetFreeze.publicKey);\n      if (this.assetClawback !== undefined) txn.apar.c = Buffer.from(this.assetClawback.publicKey);\n      if (this.assetName !== undefined) txn.apar.an = this.assetName;\n      if (this.assetUnitName !== undefined) txn.apar.un = this.assetUnitName;\n      if (this.assetURL !== undefined) txn.apar.au = this.assetURL;\n      if (this.assetMetadataHash !== undefined) txn.apar.am = Buffer.from(this.assetMetadataHash); // allowed zero values\n\n      if (!txn.note.length) delete txn.note;\n      if (!txn.lx.length) delete txn.lx;\n      if (!txn.amt) delete txn.amt;\n      if (!txn.fee) delete txn.fee;\n      if (!txn.gen) delete txn.gen;\n\n      if (this.reKeyTo !== undefined) {\n        txn.rekey = Buffer.from(this.reKeyTo.publicKey);\n      }\n\n      if (!txn.caid) delete txn.caid;\n\n      if (!txn.apar.t && !txn.apar.un && !txn.apar.an && !txn.apar.df && !txn.apar.m && !txn.apar.r && !txn.apar.f && !txn.apar.c && !txn.apar.au && !txn.apar.am && !txn.apar.dc) {\n        delete txn.apar;\n      } else {\n        if (!txn.apar.t) delete txn.apar.t;\n        if (!txn.apar.dc) delete txn.apar.dc;\n        if (!txn.apar.un) delete txn.apar.un;\n        if (!txn.apar.an) delete txn.apar.an;\n        if (!txn.apar.df) delete txn.apar.df;\n        if (!txn.apar.m) delete txn.apar.m;\n        if (!txn.apar.r) delete txn.apar.r;\n        if (!txn.apar.f) delete txn.apar.f;\n        if (!txn.apar.c) delete txn.apar.c;\n        if (!txn.apar.au) delete txn.apar.au;\n        if (!txn.apar.am) delete txn.apar.am;\n      }\n\n      if (txn.grp === undefined) delete txn.grp;\n      return txn;\n    }\n\n    if (this.type === 'axfer') {\n      // asset transfer, acceptance, revocation, mint, or burn\n      const txn = {\n        aamt: this.amount,\n        fee: this.fee,\n        fv: this.firstRound,\n        lv: this.lastRound,\n        note: Buffer.from(this.note),\n        snd: Buffer.from(this.from.publicKey),\n        arcv: Buffer.from(this.to.publicKey),\n        type: this.type,\n        gen: this.genesisID,\n        gh: this.genesisHash,\n        lx: Buffer.from(this.lease),\n        grp: this.group,\n        xaid: this.assetIndex\n      };\n      if (this.closeRemainderTo !== undefined) txn.aclose = Buffer.from(this.closeRemainderTo.publicKey);\n      if (this.assetRevocationTarget !== undefined) txn.asnd = Buffer.from(this.assetRevocationTarget.publicKey); // allowed zero values\n\n      if (!txn.note.length) delete txn.note;\n      if (!txn.lx.length) delete txn.lx;\n      if (!txn.aamt) delete txn.aamt;\n      if (!txn.amt) delete txn.amt;\n      if (!txn.fee) delete txn.fee;\n      if (!txn.gen) delete txn.gen;\n      if (txn.grp === undefined) delete txn.grp;\n      if (!txn.aclose) delete txn.aclose;\n      if (!txn.asnd) delete txn.asnd;\n      if (!txn.rekey) delete txn.rekey;\n\n      if (this.reKeyTo !== undefined) {\n        txn.rekey = Buffer.from(this.reKeyTo.publicKey);\n      }\n\n      return txn;\n    }\n\n    if (this.type === 'afrz') {\n      // asset freeze or unfreeze\n      const txn = {\n        fee: this.fee,\n        fv: this.firstRound,\n        lv: this.lastRound,\n        note: Buffer.from(this.note),\n        snd: Buffer.from(this.from.publicKey),\n        type: this.type,\n        gen: this.genesisID,\n        gh: this.genesisHash,\n        lx: Buffer.from(this.lease),\n        grp: this.group,\n        faid: this.assetIndex,\n        afrz: this.freezeState\n      };\n      if (this.freezeAccount !== undefined) txn.fadd = Buffer.from(this.freezeAccount.publicKey); // allowed zero values\n\n      if (!txn.note.length) delete txn.note;\n      if (!txn.lx.length) delete txn.lx;\n      if (!txn.amt) delete txn.amt;\n      if (!txn.fee) delete txn.fee;\n      if (!txn.gen) delete txn.gen;\n      if (!txn.afrz) delete txn.afrz;\n      if (txn.grp === undefined) delete txn.grp;\n\n      if (this.reKeyTo !== undefined) {\n        txn.rekey = Buffer.from(this.reKeyTo.publicKey);\n      }\n\n      return txn;\n    }\n\n    if (this.type === 'appl') {\n      // application call of some kind\n      const txn = {\n        fee: this.fee,\n        fv: this.firstRound,\n        lv: this.lastRound,\n        note: Buffer.from(this.note),\n        snd: Buffer.from(this.from.publicKey),\n        type: this.type,\n        gen: this.genesisID,\n        gh: this.genesisHash,\n        lx: Buffer.from(this.lease),\n        grp: this.group,\n        apid: this.appIndex,\n        apan: this.appOnComplete,\n        apls: {\n          nui: this.appLocalInts,\n          nbs: this.appLocalByteSlices\n        },\n        apgs: {\n          nui: this.appGlobalInts,\n          nbs: this.appGlobalByteSlices\n        },\n        apfa: this.appForeignApps,\n        apas: this.appForeignAssets\n      };\n\n      if (this.reKeyTo !== undefined) {\n        txn.rekey = Buffer.from(this.reKeyTo.publicKey);\n      }\n\n      if (this.appApprovalProgram !== undefined) {\n        txn.apap = Buffer.from(this.appApprovalProgram);\n      }\n\n      if (this.appClearProgram !== undefined) {\n        txn.apsu = Buffer.from(this.appClearProgram);\n      }\n\n      if (this.appArgs !== undefined) {\n        txn.apaa = this.appArgs.map(arg => Buffer.from(arg));\n      }\n\n      if (this.appAccounts !== undefined) {\n        txn.apat = this.appAccounts.map(decodedAddress => Buffer.from(decodedAddress.publicKey));\n      } // allowed zero values\n\n\n      if (!txn.note.length) delete txn.note;\n      if (!txn.lx.length) delete txn.lx;\n      if (!txn.amt) delete txn.amt;\n      if (!txn.fee) delete txn.fee;\n      if (!txn.gen) delete txn.gen;\n      if (!txn.apid) delete txn.apid;\n      if (!txn.apls.nui) delete txn.apls.nui;\n      if (!txn.apls.nbs) delete txn.apls.nbs;\n      if (!txn.apls.nui && !txn.apls.nbs) delete txn.apls;\n      if (!txn.apgs.nui) delete txn.apgs.nui;\n      if (!txn.apgs.nbs) delete txn.apgs.nbs;\n      if (!txn.apaa || !txn.apaa.length) delete txn.apaa;\n      if (!txn.apgs.nui && !txn.apgs.nbs) delete txn.apgs;\n      if (!txn.apap) delete txn.apap;\n      if (!txn.apsu) delete txn.apsu;\n      if (!txn.apan) delete txn.apan;\n      if (!txn.apfa) delete txn.apfa;\n      if (!txn.apas) delete txn.apas;\n      if (txn.grp === undefined) delete txn.grp;\n      return txn;\n    }\n\n    return undefined;\n  } // eslint-disable-next-line camelcase\n\n\n  static from_obj_for_encoding(txnForEnc) {\n    const txn = Object.create(this.prototype);\n    txn.name = 'Transaction';\n    txn.tag = Buffer.from('TX');\n    txn.genesisID = txnForEnc.gen;\n    txn.genesisHash = Buffer.from(txnForEnc.gh);\n    txn.type = txnForEnc.type;\n    txn.fee = txnForEnc.fee;\n    txn.firstRound = txnForEnc.fv;\n    txn.lastRound = txnForEnc.lv;\n    txn.note = new Uint8Array(txnForEnc.note);\n    txn.lease = new Uint8Array(txnForEnc.lx);\n    txn.from = address.decodeAddress(address.encodeAddress(new Uint8Array(txnForEnc.snd)));\n    if (txnForEnc.grp !== undefined) txn.group = Buffer.from(txnForEnc.grp);\n    if (txnForEnc.rekey !== undefined) txn.reKeyTo = address.decodeAddress(address.encodeAddress(new Uint8Array(txnForEnc.rekey)));\n\n    if (txnForEnc.type === 'pay') {\n      txn.amount = txnForEnc.amt;\n      txn.to = address.decodeAddress(address.encodeAddress(new Uint8Array(txnForEnc.rcv)));\n      if (txnForEnc.close !== undefined) txn.closeRemainderTo = address.decodeAddress(address.encodeAddress(txnForEnc.close));\n    } else if (txnForEnc.type === 'keyreg') {\n      txn.voteKey = Buffer.from(txnForEnc.votekey);\n      txn.selectionKey = Buffer.from(txnForEnc.selkey);\n      txn.voteKeyDilution = txnForEnc.votekd;\n      txn.voteFirst = txnForEnc.votefst;\n      txn.voteLast = txnForEnc.votelst;\n      txn.nonParticipation = txnForEnc.nonpart;\n    } else if (txnForEnc.type === 'acfg') {\n      // asset creation, or asset reconfigure, or asset destruction\n      if (txnForEnc.caid !== undefined) {\n        txn.assetIndex = txnForEnc.caid;\n      }\n\n      if (txnForEnc.apar !== undefined) {\n        txn.assetTotal = txnForEnc.apar.t;\n        txn.assetDefaultFrozen = txnForEnc.apar.df;\n        if (txnForEnc.apar.dc !== undefined) txn.assetDecimals = txnForEnc.apar.dc;\n        if (txnForEnc.apar.m !== undefined) txn.assetManager = address.decodeAddress(address.encodeAddress(new Uint8Array(txnForEnc.apar.m)));\n        if (txnForEnc.apar.r !== undefined) txn.assetReserve = address.decodeAddress(address.encodeAddress(new Uint8Array(txnForEnc.apar.r)));\n        if (txnForEnc.apar.f !== undefined) txn.assetFreeze = address.decodeAddress(address.encodeAddress(new Uint8Array(txnForEnc.apar.f)));\n        if (txnForEnc.apar.c !== undefined) txn.assetClawback = address.decodeAddress(address.encodeAddress(new Uint8Array(txnForEnc.apar.c)));\n        if (txnForEnc.apar.un !== undefined) txn.assetUnitName = txnForEnc.apar.un;\n        if (txnForEnc.apar.an !== undefined) txn.assetName = txnForEnc.apar.an;\n        if (txnForEnc.apar.au !== undefined) txn.assetURL = txnForEnc.apar.au;\n        if (txnForEnc.apar.am !== undefined) txn.assetMetadataHash = txnForEnc.apar.am;\n      }\n    } else if (txnForEnc.type === 'axfer') {\n      // asset transfer, acceptance, revocation, mint, or burn\n      if (txnForEnc.xaid !== undefined) {\n        txn.assetIndex = txnForEnc.xaid;\n      }\n\n      if (txnForEnc.aamt !== undefined) txn.amount = txnForEnc.aamt;\n\n      if (txnForEnc.aclose !== undefined) {\n        txn.closeRemainderTo = address.decodeAddress(address.encodeAddress(new Uint8Array(txnForEnc.aclose)));\n      }\n\n      if (txnForEnc.asnd !== undefined) {\n        txn.assetRevocationTarget = address.decodeAddress(address.encodeAddress(new Uint8Array(txnForEnc.asnd)));\n      }\n\n      txn.to = address.decodeAddress(address.encodeAddress(new Uint8Array(txnForEnc.arcv)));\n    } else if (txnForEnc.type === 'afrz') {\n      if (txnForEnc.afrz !== undefined) {\n        txn.freezeState = txnForEnc.afrz;\n      }\n\n      if (txnForEnc.faid !== undefined) {\n        txn.assetIndex = txnForEnc.faid;\n      }\n\n      txn.freezeAccount = address.decodeAddress(address.encodeAddress(new Uint8Array(txnForEnc.fadd)));\n    } else if (txnForEnc.type === 'appl') {\n      if (txnForEnc.apid !== undefined) {\n        txn.appIndex = txnForEnc.apid;\n      }\n\n      if (txnForEnc.apan !== undefined) {\n        txn.appOnComplete = txnForEnc.apan;\n      }\n\n      if (txnForEnc.apls !== undefined) {\n        if (txnForEnc.apls.nui !== undefined) txn.appLocalInts = txnForEnc.apls.nui;\n        if (txnForEnc.apls.nbs !== undefined) txn.appLocalByteSlices = txnForEnc.apls.nbs;\n      }\n\n      if (txnForEnc.apgs !== undefined) {\n        if (txnForEnc.apgs.nui !== undefined) txn.appGlobalInts = txnForEnc.apgs.nui;\n        if (txnForEnc.apgs.nbs !== undefined) txn.appGlobalByteSlices = txnForEnc.apgs.nbs;\n      }\n\n      if (txnForEnc.apap !== undefined) {\n        txn.appApprovalProgram = new Uint8Array(txnForEnc.apap);\n      }\n\n      if (txnForEnc.apsu !== undefined) {\n        txn.appClearProgram = new Uint8Array(txnForEnc.apsu);\n      }\n\n      if (txnForEnc.apaa !== undefined) {\n        txn.appArgs = txnForEnc.apaa.map(arg => new Uint8Array(arg));\n      }\n\n      if (txnForEnc.apat !== undefined) {\n        txn.appAccounts = txnForEnc.apat.map(addressBytes => address.decodeAddress(address.encodeAddress(new Uint8Array(addressBytes))));\n      }\n\n      if (txnForEnc.apfa !== undefined) {\n        txn.appForeignApps = txnForEnc.apfa;\n      }\n\n      if (txnForEnc.apas !== undefined) {\n        txn.appForeignAssets = txnForEnc.apas;\n      }\n    }\n\n    return txn;\n  }\n\n  estimateSize() {\n    return this.toByte().length + NUM_ADDL_BYTES_AFTER_SIGNING;\n  }\n\n  bytesToSign() {\n    const encodedMsg = this.toByte();\n    return Buffer.from(utils.concatArrays(this.tag, encodedMsg));\n  }\n\n  toByte() {\n    return encoding.encode(this.get_obj_for_encoding());\n  } // returns the raw signature\n\n\n  rawSignTxn(sk) {\n    const toBeSigned = this.bytesToSign();\n    const sig = nacl.sign(toBeSigned, sk);\n    return Buffer.from(sig);\n  }\n\n  signTxn(sk) {\n    // construct signed message\n    const sTxn = {\n      sig: this.rawSignTxn(sk),\n      txn: this.get_obj_for_encoding()\n    }; // add AuthAddr if signing with a different key than From indicates\n\n    const keypair = nacl.keyPairFromSecretKey(sk);\n    const pubKeyFromSk = keypair.publicKey;\n\n    if (address.encodeAddress(pubKeyFromSk) !== address.encodeAddress(this.from.publicKey)) {\n      sTxn.sgnr = Buffer.from(pubKeyFromSk);\n    }\n\n    return new Uint8Array(encoding.encode(sTxn));\n  }\n\n  rawTxID() {\n    const enMsg = this.toByte();\n    const gh = Buffer.from(utils.concatArrays(this.tag, enMsg));\n    return Buffer.from(nacl.genericHash(gh));\n  }\n\n  txID() {\n    const hash = this.rawTxID();\n    return base32.encode(hash).slice(0, ALGORAND_TRANSACTION_LENGTH);\n  } // add a lease to a transaction not yet having\n  // supply feePerByte to increment fee accordingly\n\n\n  addLease(lease, feePerByte = 0) {\n    if (lease !== undefined) {\n      if (lease.constructor !== Uint8Array) throw Error('lease must be a Uint8Array.');\n      if (lease.length !== ALGORAND_TRANSACTION_LEASE_LENGTH) throw Error(`lease must be of length ${ALGORAND_TRANSACTION_LEASE_LENGTH.toString()}.`);\n    } else {\n      lease = new Uint8Array(0);\n    }\n\n    this.lease = lease;\n\n    if (feePerByte !== 0) {\n      this.fee += (ALGORAND_TRANSACTION_LEASE_LABEL_LENGTH + ALGORAND_TRANSACTION_LEASE_LENGTH) * feePerByte;\n    }\n  } // add the rekey-to field to a transaction not yet having it\n  // supply feePerByte to increment fee accordingly\n\n\n  addRekey(reKeyTo, feePerByte = 0) {\n    if (reKeyTo !== undefined) {\n      this.reKeyTo = address.decodeAddress(reKeyTo);\n    }\n\n    if (feePerByte !== 0) {\n      this.fee += (ALGORAND_TRANSACTION_REKEY_LABEL_LENGTH + ALGORAND_TRANSACTION_ADDRESS_LENGTH) * feePerByte;\n    }\n  } // build display dict for prettyPrint and toString\n  // eslint-disable-next-line no-underscore-dangle\n\n\n  _getDictForDisplay() {\n    const forPrinting = { ...this\n    };\n    forPrinting.tag = forPrinting.tag.toString();\n    forPrinting.from = address.encodeAddress(forPrinting.from.publicKey);\n    if (forPrinting.to !== undefined) forPrinting.to = address.encodeAddress(forPrinting.to.publicKey); // things that need fixing:\n\n    if (forPrinting.closeRemainderTo !== undefined) forPrinting.closeRemainderTo = address.encodeAddress(forPrinting.closeRemainderTo.publicKey);\n    if (forPrinting.assetManager !== undefined) forPrinting.assetManager = address.encodeAddress(forPrinting.assetManager.publicKey);\n    if (forPrinting.assetReserve !== undefined) forPrinting.assetReserve = address.encodeAddress(forPrinting.assetReserve.publicKey);\n    if (forPrinting.assetFreeze !== undefined) forPrinting.assetFreeze = address.encodeAddress(forPrinting.assetFreeze.publicKey);\n    if (forPrinting.assetClawback !== undefined) forPrinting.assetClawback = address.encodeAddress(forPrinting.assetClawback.publicKey);\n    if (forPrinting.assetRevocationTarget !== undefined) forPrinting.assetRevocationTarget = address.encodeAddress(forPrinting.assetRevocationTarget.publicKey);\n    if (forPrinting.reKeyTo !== undefined) forPrinting.reKeyTo = address.encodeAddress(forPrinting.reKeyTo.publicKey);\n    forPrinting.genesisHash = forPrinting.genesisHash.toString('base64');\n    return forPrinting;\n  } // pretty print the transaction to console\n\n\n  prettyPrint() {\n    // eslint-disable-next-line no-underscore-dangle,no-console\n    console.log(this._getDictForDisplay());\n  } // get string representation\n\n\n  toString() {\n    // eslint-disable-next-line no-underscore-dangle\n    return JSON.stringify(this._getDictForDisplay());\n  }\n\n}\n/**\n * encodeUnsignedTransaction takes a completed txnBuilder.Transaction object, such as from the makeFoo\n * family of transactions, and converts it to a Buffer\n * @param transactionObject the completed Transaction object\n * @returns {Uint8Array}\n */\n\n\nfunction encodeUnsignedTransaction(transactionObject) {\n  const objToEncode = transactionObject.get_obj_for_encoding();\n  return encoding.encode(objToEncode);\n}\n/**\n * decodeUnsignedTransaction takes a Buffer (as if from encodeUnsignedTransaction) and converts it to a txnBuilder.Transaction object\n * @param transactionBuffer the Uint8Array containing a transaction\n * @returns {Transaction}\n */\n\n\nfunction decodeUnsignedTransaction(transactionBuffer) {\n  const partlyDecodedObject = encoding.decode(transactionBuffer);\n  return Transaction.from_obj_for_encoding(partlyDecodedObject);\n}\n/**\n * decodeSignedTransaction takes a Buffer (from transaction.signTxn) and converts it to an object\n * containing the Transaction (txn), the signature (sig), and the auth-addr field if applicable (sgnr)\n * @param transactionBuffer the Uint8Array containing a transaction\n * @returns {Object} containing a Transaction, the signature, and possibly an auth-addr field\n */\n\n\nfunction decodeSignedTransaction(transactionBuffer) {\n  const stxnDecoded = encoding.decode(transactionBuffer);\n  stxnDecoded.txn = Transaction.from_obj_for_encoding(stxnDecoded.txn);\n  return stxnDecoded;\n}\n\nmodule.exports = {\n  Transaction,\n  ALGORAND_MIN_TX_FEE,\n  encodeUnsignedTransaction,\n  decodeUnsignedTransaction,\n  decodeSignedTransaction\n};","map":{"version":3,"sources":["/home/x/reach/kick/app/reach-react-template/node_modules/algosdk/src/transaction.js"],"names":["Buffer","require","base32","address","encoding","nacl","utils","ALGORAND_TRANSACTION_LENGTH","ALGORAND_MIN_TX_FEE","ALGORAND_TRANSACTION_LEASE_LENGTH","ALGORAND_MAX_ASSET_DECIMALS","NUM_ADDL_BYTES_AFTER_SIGNING","ALGORAND_TRANSACTION_LEASE_LABEL_LENGTH","ALGORAND_TRANSACTION_ADDRESS_LENGTH","ALGORAND_TRANSACTION_REKEY_LABEL_LENGTH","ASSET_METADATA_HASH_LENGTH","Transaction","constructor","from","to","fee","amount","firstRound","lastRound","note","genesisID","genesisHash","lease","closeRemainderTo","voteKey","selectionKey","voteFirst","voteLast","voteKeyDilution","assetIndex","assetTotal","assetDecimals","assetDefaultFrozen","assetManager","assetReserve","assetFreeze","assetClawback","assetUnitName","assetName","assetURL","assetMetadataHash","freezeAccount","freezeState","assetRevocationTarget","appIndex","appOnComplete","appLocalInts","appLocalByteSlices","appGlobalInts","appGlobalByteSlices","appApprovalProgram","appClearProgram","appArgs","appAccounts","appForeignApps","appForeignAssets","type","flatFee","suggestedParams","undefined","reKeyTo","nonParticipation","name","tag","decodeAddress","Error","Number","isSafeInteger","toString","Uint8Array","Array","isArray","slice","forEach","arg","map","addressAsString","foreignAppIndex","foreignAssetIndex","length","encoded","byteLength","Object","assign","estimateSize","group","get_obj_for_encoding","txn","amt","fv","lv","snd","publicKey","gen","gh","lx","grp","encodeAddress","ALGORAND_ZERO_ADDRESS_STRING","close","rekey","rcv","votekey","selkey","votefst","votelst","votekd","nonpart","caid","apar","t","df","dc","m","r","f","c","an","un","au","am","aamt","arcv","xaid","aclose","asnd","faid","afrz","fadd","apid","apan","apls","nui","nbs","apgs","apfa","apas","apap","apsu","apaa","apat","decodedAddress","from_obj_for_encoding","txnForEnc","create","prototype","addressBytes","toByte","bytesToSign","encodedMsg","concatArrays","encode","rawSignTxn","sk","toBeSigned","sig","sign","signTxn","sTxn","keypair","keyPairFromSecretKey","pubKeyFromSk","sgnr","rawTxID","enMsg","genericHash","txID","hash","addLease","feePerByte","addRekey","_getDictForDisplay","forPrinting","prettyPrint","console","log","JSON","stringify","encodeUnsignedTransaction","transactionObject","objToEncode","decodeUnsignedTransaction","transactionBuffer","partlyDecodedObject","decode","decodeSignedTransaction","stxnDecoded","module","exports"],"mappings":"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","sourcesContent":["const { Buffer } = require('buffer');\nconst base32 = require('hi-base32');\nconst address = require('./encoding/address');\nconst encoding = require('./encoding/encoding');\nconst nacl = require('./nacl/naclWrappers');\nconst utils = require('./utils/utils');\n\nconst ALGORAND_TRANSACTION_LENGTH = 52;\nconst ALGORAND_MIN_TX_FEE = 1000; // version v5\nconst ALGORAND_TRANSACTION_LEASE_LENGTH = 32;\nconst ALGORAND_MAX_ASSET_DECIMALS = 19;\nconst NUM_ADDL_BYTES_AFTER_SIGNING = 75; // NUM_ADDL_BYTES_AFTER_SIGNING is the number of bytes added to a txn after signing it\nconst ALGORAND_TRANSACTION_LEASE_LABEL_LENGTH = 5;\nconst ALGORAND_TRANSACTION_ADDRESS_LENGTH = 32;\nconst ALGORAND_TRANSACTION_REKEY_LABEL_LENGTH = 5;\nconst ASSET_METADATA_HASH_LENGTH = 32;\n/**\n * Transaction enables construction of Algorand transactions\n * */\nclass Transaction {\n  /* eslint-disable no-param-reassign */\n  constructor({\n    from,\n    to,\n    fee,\n    amount,\n    firstRound,\n    lastRound,\n    note,\n    genesisID,\n    genesisHash,\n    lease,\n    closeRemainderTo,\n    voteKey,\n    selectionKey,\n    voteFirst,\n    voteLast,\n    voteKeyDilution,\n    assetIndex,\n    assetTotal,\n    assetDecimals,\n    assetDefaultFrozen,\n    assetManager,\n    assetReserve,\n    assetFreeze,\n    assetClawback,\n    assetUnitName,\n    assetName,\n    assetURL,\n    assetMetadataHash,\n    freezeAccount,\n    freezeState,\n    assetRevocationTarget,\n    appIndex,\n    appOnComplete,\n    appLocalInts,\n    appLocalByteSlices,\n    appGlobalInts,\n    appGlobalByteSlices,\n    appApprovalProgram,\n    appClearProgram,\n    appArgs,\n    appAccounts,\n    appForeignApps,\n    appForeignAssets,\n    type = 'pay',\n    flatFee = false,\n    suggestedParams = undefined,\n    reKeyTo = undefined,\n    nonParticipation = false,\n  }) {\n    this.name = 'Transaction';\n    this.tag = Buffer.from('TX');\n\n    if (suggestedParams !== undefined) {\n      genesisHash = suggestedParams.genesisHash;\n      fee = suggestedParams.fee;\n      if (suggestedParams.flatFee !== undefined)\n        flatFee = suggestedParams.flatFee;\n      firstRound = suggestedParams.firstRound;\n      lastRound = suggestedParams.lastRound;\n      genesisID = suggestedParams.genesisID;\n    }\n\n    from = address.decodeAddress(from);\n    if (to !== undefined) to = address.decodeAddress(to);\n    if (closeRemainderTo !== undefined)\n      closeRemainderTo = address.decodeAddress(closeRemainderTo);\n    if (assetManager !== undefined)\n      assetManager = address.decodeAddress(assetManager);\n    if (assetReserve !== undefined)\n      assetReserve = address.decodeAddress(assetReserve);\n    if (assetFreeze !== undefined)\n      assetFreeze = address.decodeAddress(assetFreeze);\n    if (assetClawback !== undefined)\n      assetClawback = address.decodeAddress(assetClawback);\n    if (assetRevocationTarget !== undefined)\n      assetRevocationTarget = address.decodeAddress(assetRevocationTarget);\n    if (freezeAccount !== undefined)\n      freezeAccount = address.decodeAddress(freezeAccount);\n    if (reKeyTo !== undefined) reKeyTo = address.decodeAddress(reKeyTo);\n    if (genesisHash === undefined)\n      throw Error('genesis hash must be specified and in a base64 string.');\n\n    genesisHash = Buffer.from(genesisHash, 'base64');\n\n    if (\n      amount !== undefined &&\n      (!(\n        Number.isSafeInteger(amount) ||\n        (typeof amount === 'bigint' && amount <= 0xffffffffffffffffn)\n      ) ||\n        amount < 0)\n    )\n      throw Error('Amount must be a positive number and smaller than 2^64-1');\n    if (!Number.isSafeInteger(fee) || fee < 0)\n      throw Error('fee must be a positive number and smaller than 2^53-1');\n    if (!Number.isSafeInteger(firstRound) || firstRound < 0)\n      throw Error('firstRound must be a positive number');\n    if (!Number.isSafeInteger(lastRound) || lastRound < 0)\n      throw Error('lastRound must be a positive number');\n    if (\n      assetTotal !== undefined &&\n      (!(\n        Number.isSafeInteger(assetTotal) ||\n        (typeof assetTotal === 'bigint' && assetTotal <= 0xffffffffffffffffn)\n      ) ||\n        assetTotal < 0)\n    )\n      throw Error(\n        'Total asset issuance must be a positive number and smaller than 2^64-1'\n      );\n    if (\n      assetDecimals !== undefined &&\n      (!Number.isSafeInteger(assetDecimals) ||\n        assetDecimals < 0 ||\n        assetDecimals > ALGORAND_MAX_ASSET_DECIMALS)\n    )\n      throw Error(\n        `assetDecimals must be a positive number and smaller than ${ALGORAND_MAX_ASSET_DECIMALS.toString()}`\n      );\n    if (\n      assetIndex !== undefined &&\n      (!Number.isSafeInteger(assetIndex) || assetIndex < 0)\n    )\n      throw Error(\n        'Asset index must be a positive number and smaller than 2^53-1'\n      );\n    if (\n      appIndex !== undefined &&\n      (!Number.isSafeInteger(appIndex) || appIndex < 0)\n    )\n      throw Error(\n        'Application index must be a positive number and smaller than 2^53-1'\n      );\n    if (\n      appLocalInts !== undefined &&\n      (!Number.isSafeInteger(appLocalInts) || appLocalInts < 0)\n    )\n      throw Error(\n        'Application local ints count must be a positive number and smaller than 2^53-1'\n      );\n    if (\n      appLocalByteSlices !== undefined &&\n      (!Number.isSafeInteger(appLocalByteSlices) || appLocalByteSlices < 0)\n    )\n      throw Error(\n        'Application local byte slices count must be a positive number and smaller than 2^53-1'\n      );\n    if (\n      appGlobalInts !== undefined &&\n      (!Number.isSafeInteger(appGlobalInts) || appGlobalInts < 0)\n    )\n      throw Error(\n        'Application global ints count must be a positive number and smaller than 2^53-1'\n      );\n    if (\n      appGlobalByteSlices !== undefined &&\n      (!Number.isSafeInteger(appGlobalByteSlices) || appGlobalByteSlices < 0)\n    )\n      throw Error(\n        'Application global byte slices count must be a positive number and smaller than 2^53-1'\n      );\n    if (appApprovalProgram !== undefined) {\n      if (appApprovalProgram.constructor !== Uint8Array)\n        throw Error('appApprovalProgram must be a Uint8Array.');\n    }\n    if (appClearProgram !== undefined) {\n      if (appClearProgram.constructor !== Uint8Array)\n        throw Error('appClearProgram must be a Uint8Array.');\n    }\n    if (appArgs !== undefined) {\n      if (!Array.isArray(appArgs))\n        throw Error('appArgs must be an Array of Uint8Array.');\n      appArgs = appArgs.slice();\n      appArgs.forEach((arg) => {\n        if (arg.constructor !== Uint8Array)\n          throw Error('each element of AppArgs must be a Uint8Array.');\n      });\n    } else {\n      appArgs = new Uint8Array(0);\n    }\n    if (appAccounts !== undefined) {\n      if (!Array.isArray(appAccounts))\n        throw Error('appAccounts must be an Array of addresses.');\n      appAccounts = appAccounts.map((addressAsString) =>\n        address.decodeAddress(addressAsString)\n      );\n    }\n    if (appForeignApps !== undefined) {\n      if (!Array.isArray(appForeignApps))\n        throw Error('appForeignApps must be an Array of integers.');\n      appForeignApps = appForeignApps.slice();\n      appForeignApps.forEach((foreignAppIndex) => {\n        if (!Number.isSafeInteger(foreignAppIndex) || foreignAppIndex < 0)\n          throw Error(\n            'each foreign application index must be a positive number and smaller than 2^53-1'\n          );\n      });\n    }\n    if (appForeignAssets !== undefined) {\n      if (!Array.isArray(appForeignAssets))\n        throw Error('appForeignAssets must be an Array of integers.');\n      appForeignAssets = appForeignAssets.slice();\n      appForeignAssets.forEach((foreignAssetIndex) => {\n        if (!Number.isSafeInteger(foreignAssetIndex) || foreignAssetIndex < 0)\n          throw Error(\n            'each foreign asset index must be a positive number and smaller than 2^53-1'\n          );\n      });\n    }\n    if (assetMetadataHash !== undefined && assetMetadataHash.length !== 0) {\n      if (typeof assetMetadataHash === 'string') {\n        const encoded = Buffer.from(assetMetadataHash);\n        if (encoded.byteLength !== ASSET_METADATA_HASH_LENGTH) {\n          throw Error(\n            `assetMetadataHash must be a ${ASSET_METADATA_HASH_LENGTH} byte Uint8Array or string.`\n          );\n        }\n        assetMetadataHash = new Uint8Array(encoded);\n      } else if (\n        assetMetadataHash.constructor !== Uint8Array ||\n        assetMetadataHash.byteLength !== ASSET_METADATA_HASH_LENGTH\n      )\n        throw Error(\n          `assetMetadataHash must be a ${ASSET_METADATA_HASH_LENGTH} byte Uint8Array or string.`\n        );\n    } else {\n      assetMetadataHash = undefined;\n    }\n    if (note !== undefined) {\n      if (note.constructor !== Uint8Array)\n        throw Error('note must be a Uint8Array.');\n    } else {\n      note = new Uint8Array(0);\n    }\n    if (lease !== undefined) {\n      if (lease.constructor !== Uint8Array)\n        throw Error('lease must be a Uint8Array.');\n      if (lease.length !== ALGORAND_TRANSACTION_LEASE_LENGTH)\n        throw Error(\n          `lease must be of length ${ALGORAND_TRANSACTION_LEASE_LENGTH.toString()}.`\n        );\n    } else {\n      lease = new Uint8Array(0);\n    }\n    if (voteKey !== undefined) {\n      voteKey = Buffer.from(voteKey, 'base64');\n    }\n    if (selectionKey !== undefined) {\n      selectionKey = Buffer.from(selectionKey, 'base64');\n    }\n    if (\n      nonParticipation &&\n      (voteKey || selectionKey || voteFirst || voteLast || voteKeyDilution)\n    ) {\n      throw new Error(\n        'nonParticipation is true but participation params are present.'\n      );\n    }\n\n    Object.assign(this, {\n      from,\n      to,\n      fee,\n      amount,\n      firstRound,\n      lastRound,\n      note,\n      genesisID,\n      genesisHash,\n      lease,\n      closeRemainderTo,\n      voteKey,\n      selectionKey,\n      voteFirst,\n      voteLast,\n      voteKeyDilution,\n      assetIndex,\n      assetTotal,\n      assetDecimals,\n      assetDefaultFrozen,\n      assetManager,\n      assetReserve,\n      assetFreeze,\n      assetClawback,\n      assetUnitName,\n      assetName,\n      assetURL,\n      assetMetadataHash,\n      freezeAccount,\n      freezeState,\n      assetRevocationTarget,\n      appIndex,\n      appOnComplete,\n      appLocalInts,\n      appLocalByteSlices,\n      appGlobalInts,\n      appGlobalByteSlices,\n      appApprovalProgram,\n      appClearProgram,\n      appArgs,\n      appAccounts,\n      appForeignApps,\n      appForeignAssets,\n      type,\n      reKeyTo,\n      nonParticipation,\n    });\n\n    // Modify Fee\n    if (!flatFee) {\n      this.fee *= this.estimateSize();\n    }\n    // If suggested fee too small and will be rejected, set to min tx fee\n    if (this.fee < ALGORAND_MIN_TX_FEE) {\n      this.fee = ALGORAND_MIN_TX_FEE;\n    }\n\n    // say we are aware of groups\n    this.group = undefined;\n  }\n  /* eslint-disable no-param-reassign */\n\n  // eslint-disable-next-line camelcase\n  get_obj_for_encoding() {\n    if (this.type === 'pay') {\n      const txn = {\n        amt: this.amount,\n        fee: this.fee,\n        fv: this.firstRound,\n        lv: this.lastRound,\n        note: Buffer.from(this.note),\n        snd: Buffer.from(this.from.publicKey),\n        type: 'pay',\n        gen: this.genesisID,\n        gh: this.genesisHash,\n        lx: Buffer.from(this.lease),\n        grp: this.group,\n      };\n\n      // parse close address\n      if (\n        this.closeRemainderTo !== undefined &&\n        address.encodeAddress(this.closeRemainderTo.publicKey) !==\n          address.ALGORAND_ZERO_ADDRESS_STRING\n      ) {\n        txn.close = Buffer.from(this.closeRemainderTo.publicKey);\n      }\n      if (this.reKeyTo !== undefined) {\n        txn.rekey = Buffer.from(this.reKeyTo.publicKey);\n      }\n      // allowed zero values\n      if (this.to !== undefined) txn.rcv = Buffer.from(this.to.publicKey);\n      if (!txn.note.length) delete txn.note;\n      if (!txn.amt) delete txn.amt;\n      if (!txn.fee) delete txn.fee;\n      if (!txn.gen) delete txn.gen;\n      if (txn.grp === undefined) delete txn.grp;\n      if (!txn.lx.length) delete txn.lx;\n      if (!txn.rekey) delete txn.rekey;\n      return txn;\n    }\n    if (this.type === 'keyreg') {\n      const txn = {\n        fee: this.fee,\n        fv: this.firstRound,\n        lv: this.lastRound,\n        note: Buffer.from(this.note),\n        snd: Buffer.from(this.from.publicKey),\n        type: this.type,\n        gen: this.genesisID,\n        gh: this.genesisHash,\n        lx: Buffer.from(this.lease),\n        grp: this.group,\n        votekey: this.voteKey,\n        selkey: this.selectionKey,\n        votefst: this.voteFirst,\n        votelst: this.voteLast,\n        votekd: this.voteKeyDilution,\n      };\n      // allowed zero values\n      if (!txn.note.length) delete txn.note;\n      if (!txn.lx.length) delete txn.lx;\n      if (!txn.fee) delete txn.fee;\n      if (!txn.gen) delete txn.gen;\n      if (txn.grp === undefined) delete txn.grp;\n      if (this.reKeyTo !== undefined) {\n        txn.rekey = Buffer.from(this.reKeyTo.publicKey);\n      }\n      if (this.nonParticipation) {\n        txn.nonpart = true;\n        delete txn.votekey;\n        delete txn.selkey;\n        delete txn.votefst;\n        delete txn.votelst;\n        delete txn.votekd;\n      }\n      return txn;\n    }\n    if (this.type === 'acfg') {\n      // asset creation, or asset reconfigure, or asset destruction\n      const txn = {\n        fee: this.fee,\n        fv: this.firstRound,\n        lv: this.lastRound,\n        note: Buffer.from(this.note),\n        snd: Buffer.from(this.from.publicKey),\n        type: this.type,\n        gen: this.genesisID,\n        gh: this.genesisHash,\n        lx: Buffer.from(this.lease),\n        grp: this.group,\n        caid: this.assetIndex,\n        apar: {\n          t: this.assetTotal,\n          df: this.assetDefaultFrozen,\n          dc: this.assetDecimals,\n        },\n      };\n      if (this.assetManager !== undefined)\n        txn.apar.m = Buffer.from(this.assetManager.publicKey);\n      if (this.assetReserve !== undefined)\n        txn.apar.r = Buffer.from(this.assetReserve.publicKey);\n      if (this.assetFreeze !== undefined)\n        txn.apar.f = Buffer.from(this.assetFreeze.publicKey);\n      if (this.assetClawback !== undefined)\n        txn.apar.c = Buffer.from(this.assetClawback.publicKey);\n      if (this.assetName !== undefined) txn.apar.an = this.assetName;\n      if (this.assetUnitName !== undefined) txn.apar.un = this.assetUnitName;\n      if (this.assetURL !== undefined) txn.apar.au = this.assetURL;\n      if (this.assetMetadataHash !== undefined)\n        txn.apar.am = Buffer.from(this.assetMetadataHash);\n\n      // allowed zero values\n      if (!txn.note.length) delete txn.note;\n      if (!txn.lx.length) delete txn.lx;\n      if (!txn.amt) delete txn.amt;\n      if (!txn.fee) delete txn.fee;\n      if (!txn.gen) delete txn.gen;\n      if (this.reKeyTo !== undefined) {\n        txn.rekey = Buffer.from(this.reKeyTo.publicKey);\n      }\n\n      if (!txn.caid) delete txn.caid;\n      if (\n        !txn.apar.t &&\n        !txn.apar.un &&\n        !txn.apar.an &&\n        !txn.apar.df &&\n        !txn.apar.m &&\n        !txn.apar.r &&\n        !txn.apar.f &&\n        !txn.apar.c &&\n        !txn.apar.au &&\n        !txn.apar.am &&\n        !txn.apar.dc\n      ) {\n        delete txn.apar;\n      } else {\n        if (!txn.apar.t) delete txn.apar.t;\n        if (!txn.apar.dc) delete txn.apar.dc;\n        if (!txn.apar.un) delete txn.apar.un;\n        if (!txn.apar.an) delete txn.apar.an;\n        if (!txn.apar.df) delete txn.apar.df;\n        if (!txn.apar.m) delete txn.apar.m;\n        if (!txn.apar.r) delete txn.apar.r;\n        if (!txn.apar.f) delete txn.apar.f;\n        if (!txn.apar.c) delete txn.apar.c;\n        if (!txn.apar.au) delete txn.apar.au;\n        if (!txn.apar.am) delete txn.apar.am;\n      }\n      if (txn.grp === undefined) delete txn.grp;\n\n      return txn;\n    }\n    if (this.type === 'axfer') {\n      // asset transfer, acceptance, revocation, mint, or burn\n      const txn = {\n        aamt: this.amount,\n        fee: this.fee,\n        fv: this.firstRound,\n        lv: this.lastRound,\n        note: Buffer.from(this.note),\n        snd: Buffer.from(this.from.publicKey),\n        arcv: Buffer.from(this.to.publicKey),\n        type: this.type,\n        gen: this.genesisID,\n        gh: this.genesisHash,\n        lx: Buffer.from(this.lease),\n        grp: this.group,\n        xaid: this.assetIndex,\n      };\n      if (this.closeRemainderTo !== undefined)\n        txn.aclose = Buffer.from(this.closeRemainderTo.publicKey);\n      if (this.assetRevocationTarget !== undefined)\n        txn.asnd = Buffer.from(this.assetRevocationTarget.publicKey);\n      // allowed zero values\n      if (!txn.note.length) delete txn.note;\n      if (!txn.lx.length) delete txn.lx;\n      if (!txn.aamt) delete txn.aamt;\n      if (!txn.amt) delete txn.amt;\n      if (!txn.fee) delete txn.fee;\n      if (!txn.gen) delete txn.gen;\n      if (txn.grp === undefined) delete txn.grp;\n      if (!txn.aclose) delete txn.aclose;\n      if (!txn.asnd) delete txn.asnd;\n      if (!txn.rekey) delete txn.rekey;\n      if (this.reKeyTo !== undefined) {\n        txn.rekey = Buffer.from(this.reKeyTo.publicKey);\n      }\n      return txn;\n    }\n    if (this.type === 'afrz') {\n      // asset freeze or unfreeze\n      const txn = {\n        fee: this.fee,\n        fv: this.firstRound,\n        lv: this.lastRound,\n        note: Buffer.from(this.note),\n        snd: Buffer.from(this.from.publicKey),\n        type: this.type,\n        gen: this.genesisID,\n        gh: this.genesisHash,\n        lx: Buffer.from(this.lease),\n        grp: this.group,\n        faid: this.assetIndex,\n        afrz: this.freezeState,\n      };\n      if (this.freezeAccount !== undefined)\n        txn.fadd = Buffer.from(this.freezeAccount.publicKey);\n      // allowed zero values\n      if (!txn.note.length) delete txn.note;\n      if (!txn.lx.length) delete txn.lx;\n      if (!txn.amt) delete txn.amt;\n      if (!txn.fee) delete txn.fee;\n      if (!txn.gen) delete txn.gen;\n      if (!txn.afrz) delete txn.afrz;\n      if (txn.grp === undefined) delete txn.grp;\n      if (this.reKeyTo !== undefined) {\n        txn.rekey = Buffer.from(this.reKeyTo.publicKey);\n      }\n      return txn;\n    }\n    if (this.type === 'appl') {\n      // application call of some kind\n      const txn = {\n        fee: this.fee,\n        fv: this.firstRound,\n        lv: this.lastRound,\n        note: Buffer.from(this.note),\n        snd: Buffer.from(this.from.publicKey),\n        type: this.type,\n        gen: this.genesisID,\n        gh: this.genesisHash,\n        lx: Buffer.from(this.lease),\n        grp: this.group,\n        apid: this.appIndex,\n        apan: this.appOnComplete,\n        apls: {\n          nui: this.appLocalInts,\n          nbs: this.appLocalByteSlices,\n        },\n        apgs: {\n          nui: this.appGlobalInts,\n          nbs: this.appGlobalByteSlices,\n        },\n        apfa: this.appForeignApps,\n        apas: this.appForeignAssets,\n      };\n      if (this.reKeyTo !== undefined) {\n        txn.rekey = Buffer.from(this.reKeyTo.publicKey);\n      }\n      if (this.appApprovalProgram !== undefined) {\n        txn.apap = Buffer.from(this.appApprovalProgram);\n      }\n      if (this.appClearProgram !== undefined) {\n        txn.apsu = Buffer.from(this.appClearProgram);\n      }\n      if (this.appArgs !== undefined) {\n        txn.apaa = this.appArgs.map((arg) => Buffer.from(arg));\n      }\n      if (this.appAccounts !== undefined) {\n        txn.apat = this.appAccounts.map((decodedAddress) =>\n          Buffer.from(decodedAddress.publicKey)\n        );\n      }\n      // allowed zero values\n      if (!txn.note.length) delete txn.note;\n      if (!txn.lx.length) delete txn.lx;\n      if (!txn.amt) delete txn.amt;\n      if (!txn.fee) delete txn.fee;\n      if (!txn.gen) delete txn.gen;\n      if (!txn.apid) delete txn.apid;\n      if (!txn.apls.nui) delete txn.apls.nui;\n      if (!txn.apls.nbs) delete txn.apls.nbs;\n      if (!txn.apls.nui && !txn.apls.nbs) delete txn.apls;\n      if (!txn.apgs.nui) delete txn.apgs.nui;\n      if (!txn.apgs.nbs) delete txn.apgs.nbs;\n      if (!txn.apaa || !txn.apaa.length) delete txn.apaa;\n      if (!txn.apgs.nui && !txn.apgs.nbs) delete txn.apgs;\n      if (!txn.apap) delete txn.apap;\n      if (!txn.apsu) delete txn.apsu;\n      if (!txn.apan) delete txn.apan;\n      if (!txn.apfa) delete txn.apfa;\n      if (!txn.apas) delete txn.apas;\n      if (txn.grp === undefined) delete txn.grp;\n      return txn;\n    }\n\n    return undefined;\n  }\n\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(txnForEnc) {\n    const txn = Object.create(this.prototype);\n    txn.name = 'Transaction';\n    txn.tag = Buffer.from('TX');\n\n    txn.genesisID = txnForEnc.gen;\n    txn.genesisHash = Buffer.from(txnForEnc.gh);\n    txn.type = txnForEnc.type;\n    txn.fee = txnForEnc.fee;\n    txn.firstRound = txnForEnc.fv;\n    txn.lastRound = txnForEnc.lv;\n    txn.note = new Uint8Array(txnForEnc.note);\n    txn.lease = new Uint8Array(txnForEnc.lx);\n    txn.from = address.decodeAddress(\n      address.encodeAddress(new Uint8Array(txnForEnc.snd))\n    );\n    if (txnForEnc.grp !== undefined) txn.group = Buffer.from(txnForEnc.grp);\n    if (txnForEnc.rekey !== undefined)\n      txn.reKeyTo = address.decodeAddress(\n        address.encodeAddress(new Uint8Array(txnForEnc.rekey))\n      );\n\n    if (txnForEnc.type === 'pay') {\n      txn.amount = txnForEnc.amt;\n      txn.to = address.decodeAddress(\n        address.encodeAddress(new Uint8Array(txnForEnc.rcv))\n      );\n      if (txnForEnc.close !== undefined)\n        txn.closeRemainderTo = address.decodeAddress(\n          address.encodeAddress(txnForEnc.close)\n        );\n    } else if (txnForEnc.type === 'keyreg') {\n      txn.voteKey = Buffer.from(txnForEnc.votekey);\n      txn.selectionKey = Buffer.from(txnForEnc.selkey);\n      txn.voteKeyDilution = txnForEnc.votekd;\n      txn.voteFirst = txnForEnc.votefst;\n      txn.voteLast = txnForEnc.votelst;\n      txn.nonParticipation = txnForEnc.nonpart;\n    } else if (txnForEnc.type === 'acfg') {\n      // asset creation, or asset reconfigure, or asset destruction\n      if (txnForEnc.caid !== undefined) {\n        txn.assetIndex = txnForEnc.caid;\n      }\n      if (txnForEnc.apar !== undefined) {\n        txn.assetTotal = txnForEnc.apar.t;\n        txn.assetDefaultFrozen = txnForEnc.apar.df;\n        if (txnForEnc.apar.dc !== undefined)\n          txn.assetDecimals = txnForEnc.apar.dc;\n        if (txnForEnc.apar.m !== undefined)\n          txn.assetManager = address.decodeAddress(\n            address.encodeAddress(new Uint8Array(txnForEnc.apar.m))\n          );\n        if (txnForEnc.apar.r !== undefined)\n          txn.assetReserve = address.decodeAddress(\n            address.encodeAddress(new Uint8Array(txnForEnc.apar.r))\n          );\n        if (txnForEnc.apar.f !== undefined)\n          txn.assetFreeze = address.decodeAddress(\n            address.encodeAddress(new Uint8Array(txnForEnc.apar.f))\n          );\n        if (txnForEnc.apar.c !== undefined)\n          txn.assetClawback = address.decodeAddress(\n            address.encodeAddress(new Uint8Array(txnForEnc.apar.c))\n          );\n        if (txnForEnc.apar.un !== undefined)\n          txn.assetUnitName = txnForEnc.apar.un;\n        if (txnForEnc.apar.an !== undefined) txn.assetName = txnForEnc.apar.an;\n        if (txnForEnc.apar.au !== undefined) txn.assetURL = txnForEnc.apar.au;\n        if (txnForEnc.apar.am !== undefined)\n          txn.assetMetadataHash = txnForEnc.apar.am;\n      }\n    } else if (txnForEnc.type === 'axfer') {\n      // asset transfer, acceptance, revocation, mint, or burn\n      if (txnForEnc.xaid !== undefined) {\n        txn.assetIndex = txnForEnc.xaid;\n      }\n      if (txnForEnc.aamt !== undefined) txn.amount = txnForEnc.aamt;\n      if (txnForEnc.aclose !== undefined) {\n        txn.closeRemainderTo = address.decodeAddress(\n          address.encodeAddress(new Uint8Array(txnForEnc.aclose))\n        );\n      }\n      if (txnForEnc.asnd !== undefined) {\n        txn.assetRevocationTarget = address.decodeAddress(\n          address.encodeAddress(new Uint8Array(txnForEnc.asnd))\n        );\n      }\n      txn.to = address.decodeAddress(\n        address.encodeAddress(new Uint8Array(txnForEnc.arcv))\n      );\n    } else if (txnForEnc.type === 'afrz') {\n      if (txnForEnc.afrz !== undefined) {\n        txn.freezeState = txnForEnc.afrz;\n      }\n      if (txnForEnc.faid !== undefined) {\n        txn.assetIndex = txnForEnc.faid;\n      }\n      txn.freezeAccount = address.decodeAddress(\n        address.encodeAddress(new Uint8Array(txnForEnc.fadd))\n      );\n    } else if (txnForEnc.type === 'appl') {\n      if (txnForEnc.apid !== undefined) {\n        txn.appIndex = txnForEnc.apid;\n      }\n      if (txnForEnc.apan !== undefined) {\n        txn.appOnComplete = txnForEnc.apan;\n      }\n      if (txnForEnc.apls !== undefined) {\n        if (txnForEnc.apls.nui !== undefined)\n          txn.appLocalInts = txnForEnc.apls.nui;\n        if (txnForEnc.apls.nbs !== undefined)\n          txn.appLocalByteSlices = txnForEnc.apls.nbs;\n      }\n      if (txnForEnc.apgs !== undefined) {\n        if (txnForEnc.apgs.nui !== undefined)\n          txn.appGlobalInts = txnForEnc.apgs.nui;\n        if (txnForEnc.apgs.nbs !== undefined)\n          txn.appGlobalByteSlices = txnForEnc.apgs.nbs;\n      }\n      if (txnForEnc.apap !== undefined) {\n        txn.appApprovalProgram = new Uint8Array(txnForEnc.apap);\n      }\n      if (txnForEnc.apsu !== undefined) {\n        txn.appClearProgram = new Uint8Array(txnForEnc.apsu);\n      }\n      if (txnForEnc.apaa !== undefined) {\n        txn.appArgs = txnForEnc.apaa.map((arg) => new Uint8Array(arg));\n      }\n      if (txnForEnc.apat !== undefined) {\n        txn.appAccounts = txnForEnc.apat.map((addressBytes) =>\n          address.decodeAddress(\n            address.encodeAddress(new Uint8Array(addressBytes))\n          )\n        );\n      }\n      if (txnForEnc.apfa !== undefined) {\n        txn.appForeignApps = txnForEnc.apfa;\n      }\n      if (txnForEnc.apas !== undefined) {\n        txn.appForeignAssets = txnForEnc.apas;\n      }\n    }\n    return txn;\n  }\n\n  estimateSize() {\n    return this.toByte().length + NUM_ADDL_BYTES_AFTER_SIGNING;\n  }\n\n  bytesToSign() {\n    const encodedMsg = this.toByte();\n    return Buffer.from(utils.concatArrays(this.tag, encodedMsg));\n  }\n\n  toByte() {\n    return encoding.encode(this.get_obj_for_encoding());\n  }\n\n  // returns the raw signature\n  rawSignTxn(sk) {\n    const toBeSigned = this.bytesToSign();\n    const sig = nacl.sign(toBeSigned, sk);\n    return Buffer.from(sig);\n  }\n\n  signTxn(sk) {\n    // construct signed message\n    const sTxn = {\n      sig: this.rawSignTxn(sk),\n      txn: this.get_obj_for_encoding(),\n    };\n    // add AuthAddr if signing with a different key than From indicates\n    const keypair = nacl.keyPairFromSecretKey(sk);\n    const pubKeyFromSk = keypair.publicKey;\n    if (\n      address.encodeAddress(pubKeyFromSk) !==\n      address.encodeAddress(this.from.publicKey)\n    ) {\n      sTxn.sgnr = Buffer.from(pubKeyFromSk);\n    }\n    return new Uint8Array(encoding.encode(sTxn));\n  }\n\n  rawTxID() {\n    const enMsg = this.toByte();\n    const gh = Buffer.from(utils.concatArrays(this.tag, enMsg));\n    return Buffer.from(nacl.genericHash(gh));\n  }\n\n  txID() {\n    const hash = this.rawTxID();\n    return base32.encode(hash).slice(0, ALGORAND_TRANSACTION_LENGTH);\n  }\n\n  // add a lease to a transaction not yet having\n  // supply feePerByte to increment fee accordingly\n  addLease(lease, feePerByte = 0) {\n    if (lease !== undefined) {\n      if (lease.constructor !== Uint8Array)\n        throw Error('lease must be a Uint8Array.');\n      if (lease.length !== ALGORAND_TRANSACTION_LEASE_LENGTH)\n        throw Error(\n          `lease must be of length ${ALGORAND_TRANSACTION_LEASE_LENGTH.toString()}.`\n        );\n    } else {\n      lease = new Uint8Array(0);\n    }\n    this.lease = lease;\n    if (feePerByte !== 0) {\n      this.fee +=\n        (ALGORAND_TRANSACTION_LEASE_LABEL_LENGTH +\n          ALGORAND_TRANSACTION_LEASE_LENGTH) *\n        feePerByte;\n    }\n  }\n\n  // add the rekey-to field to a transaction not yet having it\n  // supply feePerByte to increment fee accordingly\n  addRekey(reKeyTo, feePerByte = 0) {\n    if (reKeyTo !== undefined) {\n      this.reKeyTo = address.decodeAddress(reKeyTo);\n    }\n    if (feePerByte !== 0) {\n      this.fee +=\n        (ALGORAND_TRANSACTION_REKEY_LABEL_LENGTH +\n          ALGORAND_TRANSACTION_ADDRESS_LENGTH) *\n        feePerByte;\n    }\n  }\n\n  // build display dict for prettyPrint and toString\n  // eslint-disable-next-line no-underscore-dangle\n  _getDictForDisplay() {\n    const forPrinting = {\n      ...this,\n    };\n    forPrinting.tag = forPrinting.tag.toString();\n    forPrinting.from = address.encodeAddress(forPrinting.from.publicKey);\n    if (forPrinting.to !== undefined)\n      forPrinting.to = address.encodeAddress(forPrinting.to.publicKey);\n    // things that need fixing:\n    if (forPrinting.closeRemainderTo !== undefined)\n      forPrinting.closeRemainderTo = address.encodeAddress(\n        forPrinting.closeRemainderTo.publicKey\n      );\n    if (forPrinting.assetManager !== undefined)\n      forPrinting.assetManager = address.encodeAddress(\n        forPrinting.assetManager.publicKey\n      );\n    if (forPrinting.assetReserve !== undefined)\n      forPrinting.assetReserve = address.encodeAddress(\n        forPrinting.assetReserve.publicKey\n      );\n    if (forPrinting.assetFreeze !== undefined)\n      forPrinting.assetFreeze = address.encodeAddress(\n        forPrinting.assetFreeze.publicKey\n      );\n    if (forPrinting.assetClawback !== undefined)\n      forPrinting.assetClawback = address.encodeAddress(\n        forPrinting.assetClawback.publicKey\n      );\n    if (forPrinting.assetRevocationTarget !== undefined)\n      forPrinting.assetRevocationTarget = address.encodeAddress(\n        forPrinting.assetRevocationTarget.publicKey\n      );\n    if (forPrinting.reKeyTo !== undefined)\n      forPrinting.reKeyTo = address.encodeAddress(\n        forPrinting.reKeyTo.publicKey\n      );\n    forPrinting.genesisHash = forPrinting.genesisHash.toString('base64');\n    return forPrinting;\n  }\n\n  // pretty print the transaction to console\n  prettyPrint() {\n    // eslint-disable-next-line no-underscore-dangle,no-console\n    console.log(this._getDictForDisplay());\n  }\n\n  // get string representation\n  toString() {\n    // eslint-disable-next-line no-underscore-dangle\n    return JSON.stringify(this._getDictForDisplay());\n  }\n}\n\n/**\n * encodeUnsignedTransaction takes a completed txnBuilder.Transaction object, such as from the makeFoo\n * family of transactions, and converts it to a Buffer\n * @param transactionObject the completed Transaction object\n * @returns {Uint8Array}\n */\nfunction encodeUnsignedTransaction(transactionObject) {\n  const objToEncode = transactionObject.get_obj_for_encoding();\n  return encoding.encode(objToEncode);\n}\n\n/**\n * decodeUnsignedTransaction takes a Buffer (as if from encodeUnsignedTransaction) and converts it to a txnBuilder.Transaction object\n * @param transactionBuffer the Uint8Array containing a transaction\n * @returns {Transaction}\n */\nfunction decodeUnsignedTransaction(transactionBuffer) {\n  const partlyDecodedObject = encoding.decode(transactionBuffer);\n  return Transaction.from_obj_for_encoding(partlyDecodedObject);\n}\n\n/**\n * decodeSignedTransaction takes a Buffer (from transaction.signTxn) and converts it to an object\n * containing the Transaction (txn), the signature (sig), and the auth-addr field if applicable (sgnr)\n * @param transactionBuffer the Uint8Array containing a transaction\n * @returns {Object} containing a Transaction, the signature, and possibly an auth-addr field\n */\nfunction decodeSignedTransaction(transactionBuffer) {\n  const stxnDecoded = encoding.decode(transactionBuffer);\n  stxnDecoded.txn = Transaction.from_obj_for_encoding(stxnDecoded.txn);\n  return stxnDecoded;\n}\n\nmodule.exports = {\n  Transaction,\n  ALGORAND_MIN_TX_FEE,\n  encodeUnsignedTransaction,\n  decodeUnsignedTransaction,\n  decodeSignedTransaction,\n};\n"]},"metadata":{},"sourceType":"script"}