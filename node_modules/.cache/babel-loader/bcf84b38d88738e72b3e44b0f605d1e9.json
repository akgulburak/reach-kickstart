{"ast":null,"code":"import { process } from './shim.mjs';\nimport { envDefault } from './shared.mjs'; // Order is significant, earlier = default for shared prefix\n// e.g. ETH defaults to ETH-test-dockerized-geth\n\nconst knownConnectorModes = ['ETH-test-dockerized-geth', 'ETH-live', 'ETH-browser', 'ALGO-test-dockerized-algod', 'ALGO-live', 'ALGO-browser'];\n\nfunction isKnownConnector(s) {\n  return s === 'ETH' || s === 'ALGO';\n}\n\nconst connectorModeDefaults = {}; // Populate connectorModeDefaults\n\nfor (const knownConnectorMode of knownConnectorModes) {\n  let prefix = null;\n\n  for (const piece of knownConnectorMode.split('-')) {\n    prefix = prefix ? `${prefix}-${piece}` : piece;\n\n    if (!connectorModeDefaults[prefix]) {\n      connectorModeDefaults[prefix] = knownConnectorMode;\n    }\n  }\n}\n\nexport function canonicalizeConnectorMode(connectorMode) {\n  const canonicalized = connectorModeDefaults[connectorMode];\n\n  if (canonicalized) {\n    return canonicalized;\n  } else {\n    throw Error(`Unrecognized REACH_CONNECTOR_MODE='${connectorMode}'`);\n  }\n}\nexport function getConnectorMode() {\n  const connectorMode = envDefault(process.env.REACH_CONNECTOR_MODE, 'ETH');\n  return canonicalizeConnectorMode(connectorMode);\n} // The connectorMode arg is optional;\n// It will use REACH_CONNECTOR_MODE if 0 args.\n\nexport function getConnector(connectorMode) {\n  connectorMode = connectorMode || getConnectorMode();\n  const connector = connectorMode.split('-')[0];\n\n  if (isKnownConnector(connector)) {\n    return connector;\n  } else {\n    throw Error(`impossible: unknown connector: ${connector}`);\n  }\n}","map":{"version":3,"sources":["/home/x/reach/kick/app/reach-react-template/node_modules/@reach-sh/stdlib/ConnectorMode.mjs"],"names":["process","envDefault","knownConnectorModes","isKnownConnector","s","connectorModeDefaults","knownConnectorMode","prefix","piece","split","canonicalizeConnectorMode","connectorMode","canonicalized","Error","getConnectorMode","env","REACH_CONNECTOR_MODE","getConnector","connector"],"mappings":"AAAA,SAASA,OAAT,QAAwB,YAAxB;AACA,SAASC,UAAT,QAA2B,cAA3B,C,CACA;AACA;;AACA,MAAMC,mBAAmB,GAAG,CAC1B,0BAD0B,EAE1B,UAF0B,EAG1B,aAH0B,EAI1B,4BAJ0B,EAK1B,WAL0B,EAM1B,cAN0B,CAA5B;;AASA,SAASC,gBAAT,CAA0BC,CAA1B,EAA6B;AAC3B,SAAQA,CAAC,KAAK,KAAN,IAAeA,CAAC,KAAK,MAA7B;AACD;;AACD,MAAMC,qBAAqB,GAAG,EAA9B,C,CACA;;AACA,KAAK,MAAMC,kBAAX,IAAiCJ,mBAAjC,EAAsD;AACpD,MAAIK,MAAM,GAAG,IAAb;;AACA,OAAK,MAAMC,KAAX,IAAoBF,kBAAkB,CAACG,KAAnB,CAAyB,GAAzB,CAApB,EAAmD;AACjDF,IAAAA,MAAM,GAAGA,MAAM,GAAI,GAAEA,MAAO,IAAGC,KAAM,EAAtB,GAA0BA,KAAzC;;AACA,QAAI,CAACH,qBAAqB,CAACE,MAAD,CAA1B,EAAoC;AAClCF,MAAAA,qBAAqB,CAACE,MAAD,CAArB,GAAgCD,kBAAhC;AACD;AACF;AACF;;AACD,OAAO,SAASI,yBAAT,CAAmCC,aAAnC,EAAkD;AACvD,QAAMC,aAAa,GAAGP,qBAAqB,CAACM,aAAD,CAA3C;;AACA,MAAIC,aAAJ,EAAmB;AACjB,WAAOA,aAAP;AACD,GAFD,MAEO;AACL,UAAMC,KAAK,CAAE,sCAAqCF,aAAc,GAArD,CAAX;AACD;AACF;AACD,OAAO,SAASG,gBAAT,GAA4B;AACjC,QAAMH,aAAa,GAAGV,UAAU,CAACD,OAAO,CAACe,GAAR,CAAYC,oBAAb,EAAmC,KAAnC,CAAhC;AACA,SAAON,yBAAyB,CAACC,aAAD,CAAhC;AACD,C,CACD;AACA;;AACA,OAAO,SAASM,YAAT,CAAsBN,aAAtB,EAAqC;AAC1CA,EAAAA,aAAa,GAAGA,aAAa,IAAIG,gBAAgB,EAAjD;AACA,QAAMI,SAAS,GAAGP,aAAa,CAACF,KAAd,CAAoB,GAApB,EAAyB,CAAzB,CAAlB;;AACA,MAAIN,gBAAgB,CAACe,SAAD,CAApB,EAAiC;AAC/B,WAAOA,SAAP;AACD,GAFD,MAEO;AACL,UAAML,KAAK,CAAE,kCAAiCK,SAAU,EAA7C,CAAX;AACD;AACF","sourcesContent":["import { process } from './shim.mjs';\nimport { envDefault } from './shared.mjs';\n// Order is significant, earlier = default for shared prefix\n// e.g. ETH defaults to ETH-test-dockerized-geth\nconst knownConnectorModes = [\n  'ETH-test-dockerized-geth',\n  'ETH-live',\n  'ETH-browser',\n  'ALGO-test-dockerized-algod',\n  'ALGO-live',\n  'ALGO-browser',\n];\n\nfunction isKnownConnector(s) {\n  return (s === 'ETH' || s === 'ALGO');\n}\nconst connectorModeDefaults = {};\n// Populate connectorModeDefaults\nfor (const knownConnectorMode of knownConnectorModes) {\n  let prefix = null;\n  for (const piece of knownConnectorMode.split('-')) {\n    prefix = prefix ? `${prefix}-${piece}` : piece;\n    if (!connectorModeDefaults[prefix]) {\n      connectorModeDefaults[prefix] = knownConnectorMode;\n    }\n  }\n}\nexport function canonicalizeConnectorMode(connectorMode) {\n  const canonicalized = connectorModeDefaults[connectorMode];\n  if (canonicalized) {\n    return canonicalized;\n  } else {\n    throw Error(`Unrecognized REACH_CONNECTOR_MODE='${connectorMode}'`);\n  }\n}\nexport function getConnectorMode() {\n  const connectorMode = envDefault(process.env.REACH_CONNECTOR_MODE, 'ETH');\n  return canonicalizeConnectorMode(connectorMode);\n}\n// The connectorMode arg is optional;\n// It will use REACH_CONNECTOR_MODE if 0 args.\nexport function getConnector(connectorMode) {\n  connectorMode = connectorMode || getConnectorMode();\n  const connector = connectorMode.split('-')[0];\n  if (isKnownConnector(connector)) {\n    return connector;\n  } else {\n    throw Error(`impossible: unknown connector: ${connector}`);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}