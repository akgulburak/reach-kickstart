{"ast":null,"code":"/*\n * [hi-base32]{@link https://github.com/emn178/hi-base32}\n *\n * @version 0.5.0\n * @author Chen, Yi-Cyuan [emn178@gmail.com]\n * @copyright Chen, Yi-Cyuan 2015-2018\n * @license MIT\n */\n\n/*jslint bitwise: true */\n(function () {\n  'use strict';\n\n  var root = typeof window === 'object' ? window : {};\n  var NODE_JS = !root.HI_BASE32_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;\n\n  if (NODE_JS) {\n    root = global;\n  }\n\n  var COMMON_JS = !root.HI_BASE32_NO_COMMON_JS && typeof module === 'object' && module.exports;\n  var AMD = typeof define === 'function' && define.amd;\n  var BASE32_ENCODE_CHAR = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'.split('');\n  var BASE32_DECODE_CHAR = {\n    'A': 0,\n    'B': 1,\n    'C': 2,\n    'D': 3,\n    'E': 4,\n    'F': 5,\n    'G': 6,\n    'H': 7,\n    'I': 8,\n    'J': 9,\n    'K': 10,\n    'L': 11,\n    'M': 12,\n    'N': 13,\n    'O': 14,\n    'P': 15,\n    'Q': 16,\n    'R': 17,\n    'S': 18,\n    'T': 19,\n    'U': 20,\n    'V': 21,\n    'W': 22,\n    'X': 23,\n    'Y': 24,\n    'Z': 25,\n    '2': 26,\n    '3': 27,\n    '4': 28,\n    '5': 29,\n    '6': 30,\n    '7': 31\n  };\n  var blocks = [0, 0, 0, 0, 0, 0, 0, 0];\n\n  var throwInvalidUtf8 = function (position, partial) {\n    if (partial.length > 10) {\n      partial = '...' + partial.substr(-10);\n    }\n\n    var err = new Error('Decoded data is not valid UTF-8.' + ' Maybe try base32.decode.asBytes()?' + ' Partial data after reading ' + position + ' bytes: ' + partial + ' <-');\n    err.position = position;\n    throw err;\n  };\n\n  var toUtf8String = function (bytes) {\n    var str = '',\n        length = bytes.length,\n        i = 0,\n        followingChars = 0,\n        b,\n        c;\n\n    while (i < length) {\n      b = bytes[i++];\n\n      if (b <= 0x7F) {\n        str += String.fromCharCode(b);\n        continue;\n      } else if (b > 0xBF && b <= 0xDF) {\n        c = b & 0x1F;\n        followingChars = 1;\n      } else if (b <= 0xEF) {\n        c = b & 0x0F;\n        followingChars = 2;\n      } else if (b <= 0xF7) {\n        c = b & 0x07;\n        followingChars = 3;\n      } else {\n        throwInvalidUtf8(i, str);\n      }\n\n      for (var j = 0; j < followingChars; ++j) {\n        b = bytes[i++];\n\n        if (b < 0x80 || b > 0xBF) {\n          throwInvalidUtf8(i, str);\n        }\n\n        c <<= 6;\n        c += b & 0x3F;\n      }\n\n      if (c >= 0xD800 && c <= 0xDFFF) {\n        throwInvalidUtf8(i, str);\n      }\n\n      if (c > 0x10FFFF) {\n        throwInvalidUtf8(i, str);\n      }\n\n      if (c <= 0xFFFF) {\n        str += String.fromCharCode(c);\n      } else {\n        c -= 0x10000;\n        str += String.fromCharCode((c >> 10) + 0xD800);\n        str += String.fromCharCode((c & 0x3FF) + 0xDC00);\n      }\n    }\n\n    return str;\n  };\n\n  var decodeAsBytes = function (base32Str) {\n    if (base32Str === '') {\n      return [];\n    } else if (!/^[A-Z2-7=]+$/.test(base32Str)) {\n      throw new Error('Invalid base32 characters');\n    }\n\n    base32Str = base32Str.replace(/=/g, '');\n    var v1,\n        v2,\n        v3,\n        v4,\n        v5,\n        v6,\n        v7,\n        v8,\n        bytes = [],\n        index = 0,\n        length = base32Str.length; // 4 char to 3 bytes\n\n    for (var i = 0, count = length >> 3 << 3; i < count;) {\n      v1 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v2 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v3 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v4 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v5 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v6 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v7 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v8 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      bytes[index++] = (v1 << 3 | v2 >>> 2) & 255;\n      bytes[index++] = (v2 << 6 | v3 << 1 | v4 >>> 4) & 255;\n      bytes[index++] = (v4 << 4 | v5 >>> 1) & 255;\n      bytes[index++] = (v5 << 7 | v6 << 2 | v7 >>> 3) & 255;\n      bytes[index++] = (v7 << 5 | v8) & 255;\n    } // remain bytes\n\n\n    var remain = length - count;\n\n    if (remain === 2) {\n      v1 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v2 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      bytes[index++] = (v1 << 3 | v2 >>> 2) & 255;\n    } else if (remain === 4) {\n      v1 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v2 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v3 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v4 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      bytes[index++] = (v1 << 3 | v2 >>> 2) & 255;\n      bytes[index++] = (v2 << 6 | v3 << 1 | v4 >>> 4) & 255;\n    } else if (remain === 5) {\n      v1 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v2 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v3 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v4 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v5 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      bytes[index++] = (v1 << 3 | v2 >>> 2) & 255;\n      bytes[index++] = (v2 << 6 | v3 << 1 | v4 >>> 4) & 255;\n      bytes[index++] = (v4 << 4 | v5 >>> 1) & 255;\n    } else if (remain === 7) {\n      v1 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v2 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v3 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v4 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v5 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v6 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v7 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      bytes[index++] = (v1 << 3 | v2 >>> 2) & 255;\n      bytes[index++] = (v2 << 6 | v3 << 1 | v4 >>> 4) & 255;\n      bytes[index++] = (v4 << 4 | v5 >>> 1) & 255;\n      bytes[index++] = (v5 << 7 | v6 << 2 | v7 >>> 3) & 255;\n    }\n\n    return bytes;\n  };\n\n  var encodeAscii = function (str) {\n    var v1,\n        v2,\n        v3,\n        v4,\n        v5,\n        base32Str = '',\n        length = str.length;\n\n    for (var i = 0, count = parseInt(length / 5) * 5; i < count;) {\n      v1 = str.charCodeAt(i++);\n      v2 = str.charCodeAt(i++);\n      v3 = str.charCodeAt(i++);\n      v4 = str.charCodeAt(i++);\n      v5 = str.charCodeAt(i++);\n      base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] + BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] + BASE32_ENCODE_CHAR[v2 >>> 1 & 31] + BASE32_ENCODE_CHAR[(v2 << 4 | v3 >>> 4) & 31] + BASE32_ENCODE_CHAR[(v3 << 1 | v4 >>> 7) & 31] + BASE32_ENCODE_CHAR[v4 >>> 2 & 31] + BASE32_ENCODE_CHAR[(v4 << 3 | v5 >>> 5) & 31] + BASE32_ENCODE_CHAR[v5 & 31];\n    } // remain char\n\n\n    var remain = length - count;\n\n    if (remain === 1) {\n      v1 = str.charCodeAt(i);\n      base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] + BASE32_ENCODE_CHAR[v1 << 2 & 31] + '======';\n    } else if (remain === 2) {\n      v1 = str.charCodeAt(i++);\n      v2 = str.charCodeAt(i);\n      base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] + BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] + BASE32_ENCODE_CHAR[v2 >>> 1 & 31] + BASE32_ENCODE_CHAR[v2 << 4 & 31] + '====';\n    } else if (remain === 3) {\n      v1 = str.charCodeAt(i++);\n      v2 = str.charCodeAt(i++);\n      v3 = str.charCodeAt(i);\n      base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] + BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] + BASE32_ENCODE_CHAR[v2 >>> 1 & 31] + BASE32_ENCODE_CHAR[(v2 << 4 | v3 >>> 4) & 31] + BASE32_ENCODE_CHAR[v3 << 1 & 31] + '===';\n    } else if (remain === 4) {\n      v1 = str.charCodeAt(i++);\n      v2 = str.charCodeAt(i++);\n      v3 = str.charCodeAt(i++);\n      v4 = str.charCodeAt(i);\n      base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] + BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] + BASE32_ENCODE_CHAR[v2 >>> 1 & 31] + BASE32_ENCODE_CHAR[(v2 << 4 | v3 >>> 4) & 31] + BASE32_ENCODE_CHAR[(v3 << 1 | v4 >>> 7) & 31] + BASE32_ENCODE_CHAR[v4 >>> 2 & 31] + BASE32_ENCODE_CHAR[v4 << 3 & 31] + '=';\n    }\n\n    return base32Str;\n  };\n\n  var encodeUtf8 = function (str) {\n    var v1,\n        v2,\n        v3,\n        v4,\n        v5,\n        code,\n        end = false,\n        base32Str = '',\n        index = 0,\n        i,\n        start = 0,\n        bytes = 0,\n        length = str.length;\n\n    if (str === '') {\n      return base32Str;\n    }\n\n    do {\n      blocks[0] = blocks[5];\n      blocks[1] = blocks[6];\n      blocks[2] = blocks[7];\n\n      for (i = start; index < length && i < 5; ++index) {\n        code = str.charCodeAt(index);\n\n        if (code < 0x80) {\n          blocks[i++] = code;\n        } else if (code < 0x800) {\n          blocks[i++] = 0xc0 | code >> 6;\n          blocks[i++] = 0x80 | code & 0x3f;\n        } else if (code < 0xd800 || code >= 0xe000) {\n          blocks[i++] = 0xe0 | code >> 12;\n          blocks[i++] = 0x80 | code >> 6 & 0x3f;\n          blocks[i++] = 0x80 | code & 0x3f;\n        } else {\n          code = 0x10000 + ((code & 0x3ff) << 10 | str.charCodeAt(++index) & 0x3ff);\n          blocks[i++] = 0xf0 | code >> 18;\n          blocks[i++] = 0x80 | code >> 12 & 0x3f;\n          blocks[i++] = 0x80 | code >> 6 & 0x3f;\n          blocks[i++] = 0x80 | code & 0x3f;\n        }\n      }\n\n      bytes += i - start;\n      start = i - 5;\n\n      if (index === length) {\n        ++index;\n      }\n\n      if (index > length && i < 6) {\n        end = true;\n      }\n\n      v1 = blocks[0];\n\n      if (i > 4) {\n        v2 = blocks[1];\n        v3 = blocks[2];\n        v4 = blocks[3];\n        v5 = blocks[4];\n        base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] + BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] + BASE32_ENCODE_CHAR[v2 >>> 1 & 31] + BASE32_ENCODE_CHAR[(v2 << 4 | v3 >>> 4) & 31] + BASE32_ENCODE_CHAR[(v3 << 1 | v4 >>> 7) & 31] + BASE32_ENCODE_CHAR[v4 >>> 2 & 31] + BASE32_ENCODE_CHAR[(v4 << 3 | v5 >>> 5) & 31] + BASE32_ENCODE_CHAR[v5 & 31];\n      } else if (i === 1) {\n        base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] + BASE32_ENCODE_CHAR[v1 << 2 & 31] + '======';\n      } else if (i === 2) {\n        v2 = blocks[1];\n        base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] + BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] + BASE32_ENCODE_CHAR[v2 >>> 1 & 31] + BASE32_ENCODE_CHAR[v2 << 4 & 31] + '====';\n      } else if (i === 3) {\n        v2 = blocks[1];\n        v3 = blocks[2];\n        base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] + BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] + BASE32_ENCODE_CHAR[v2 >>> 1 & 31] + BASE32_ENCODE_CHAR[(v2 << 4 | v3 >>> 4) & 31] + BASE32_ENCODE_CHAR[v3 << 1 & 31] + '===';\n      } else {\n        v2 = blocks[1];\n        v3 = blocks[2];\n        v4 = blocks[3];\n        base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] + BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] + BASE32_ENCODE_CHAR[v2 >>> 1 & 31] + BASE32_ENCODE_CHAR[(v2 << 4 | v3 >>> 4) & 31] + BASE32_ENCODE_CHAR[(v3 << 1 | v4 >>> 7) & 31] + BASE32_ENCODE_CHAR[v4 >>> 2 & 31] + BASE32_ENCODE_CHAR[v4 << 3 & 31] + '=';\n      }\n    } while (!end);\n\n    return base32Str;\n  };\n\n  var encodeBytes = function (bytes) {\n    var v1,\n        v2,\n        v3,\n        v4,\n        v5,\n        base32Str = '',\n        length = bytes.length;\n\n    for (var i = 0, count = parseInt(length / 5) * 5; i < count;) {\n      v1 = bytes[i++];\n      v2 = bytes[i++];\n      v3 = bytes[i++];\n      v4 = bytes[i++];\n      v5 = bytes[i++];\n      base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] + BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] + BASE32_ENCODE_CHAR[v2 >>> 1 & 31] + BASE32_ENCODE_CHAR[(v2 << 4 | v3 >>> 4) & 31] + BASE32_ENCODE_CHAR[(v3 << 1 | v4 >>> 7) & 31] + BASE32_ENCODE_CHAR[v4 >>> 2 & 31] + BASE32_ENCODE_CHAR[(v4 << 3 | v5 >>> 5) & 31] + BASE32_ENCODE_CHAR[v5 & 31];\n    } // remain char\n\n\n    var remain = length - count;\n\n    if (remain === 1) {\n      v1 = bytes[i];\n      base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] + BASE32_ENCODE_CHAR[v1 << 2 & 31] + '======';\n    } else if (remain === 2) {\n      v1 = bytes[i++];\n      v2 = bytes[i];\n      base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] + BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] + BASE32_ENCODE_CHAR[v2 >>> 1 & 31] + BASE32_ENCODE_CHAR[v2 << 4 & 31] + '====';\n    } else if (remain === 3) {\n      v1 = bytes[i++];\n      v2 = bytes[i++];\n      v3 = bytes[i];\n      base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] + BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] + BASE32_ENCODE_CHAR[v2 >>> 1 & 31] + BASE32_ENCODE_CHAR[(v2 << 4 | v3 >>> 4) & 31] + BASE32_ENCODE_CHAR[v3 << 1 & 31] + '===';\n    } else if (remain === 4) {\n      v1 = bytes[i++];\n      v2 = bytes[i++];\n      v3 = bytes[i++];\n      v4 = bytes[i];\n      base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] + BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] + BASE32_ENCODE_CHAR[v2 >>> 1 & 31] + BASE32_ENCODE_CHAR[(v2 << 4 | v3 >>> 4) & 31] + BASE32_ENCODE_CHAR[(v3 << 1 | v4 >>> 7) & 31] + BASE32_ENCODE_CHAR[v4 >>> 2 & 31] + BASE32_ENCODE_CHAR[v4 << 3 & 31] + '=';\n    }\n\n    return base32Str;\n  };\n\n  var encode = function (input, asciiOnly) {\n    var notString = typeof input !== 'string';\n\n    if (notString && input.constructor === ArrayBuffer) {\n      input = new Uint8Array(input);\n    }\n\n    if (notString) {\n      return encodeBytes(input);\n    } else if (asciiOnly) {\n      return encodeAscii(input);\n    } else {\n      return encodeUtf8(input);\n    }\n  };\n\n  var decode = function (base32Str, asciiOnly) {\n    if (!asciiOnly) {\n      return toUtf8String(decodeAsBytes(base32Str));\n    }\n\n    if (base32Str === '') {\n      return '';\n    } else if (!/^[A-Z2-7=]+$/.test(base32Str)) {\n      throw new Error('Invalid base32 characters');\n    }\n\n    var v1,\n        v2,\n        v3,\n        v4,\n        v5,\n        v6,\n        v7,\n        v8,\n        str = '',\n        length = base32Str.indexOf('=');\n\n    if (length === -1) {\n      length = base32Str.length;\n    } // 8 char to 5 bytes\n\n\n    for (var i = 0, count = length >> 3 << 3; i < count;) {\n      v1 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v2 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v3 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v4 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v5 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v6 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v7 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v8 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      str += String.fromCharCode((v1 << 3 | v2 >>> 2) & 255) + String.fromCharCode((v2 << 6 | v3 << 1 | v4 >>> 4) & 255) + String.fromCharCode((v4 << 4 | v5 >>> 1) & 255) + String.fromCharCode((v5 << 7 | v6 << 2 | v7 >>> 3) & 255) + String.fromCharCode((v7 << 5 | v8) & 255);\n    } // remain bytes\n\n\n    var remain = length - count;\n\n    if (remain === 2) {\n      v1 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v2 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      str += String.fromCharCode((v1 << 3 | v2 >>> 2) & 255);\n    } else if (remain === 4) {\n      v1 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v2 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v3 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v4 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      str += String.fromCharCode((v1 << 3 | v2 >>> 2) & 255) + String.fromCharCode((v2 << 6 | v3 << 1 | v4 >>> 4) & 255);\n    } else if (remain === 5) {\n      v1 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v2 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v3 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v4 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v5 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      str += String.fromCharCode((v1 << 3 | v2 >>> 2) & 255) + String.fromCharCode((v2 << 6 | v3 << 1 | v4 >>> 4) & 255) + String.fromCharCode((v4 << 4 | v5 >>> 1) & 255);\n    } else if (remain === 7) {\n      v1 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v2 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v3 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v4 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v5 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v6 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v7 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      str += String.fromCharCode((v1 << 3 | v2 >>> 2) & 255) + String.fromCharCode((v2 << 6 | v3 << 1 | v4 >>> 4) & 255) + String.fromCharCode((v4 << 4 | v5 >>> 1) & 255) + String.fromCharCode((v5 << 7 | v6 << 2 | v7 >>> 3) & 255);\n    }\n\n    return str;\n  };\n\n  var exports = {\n    encode: encode,\n    decode: decode\n  };\n  decode.asBytes = decodeAsBytes;\n\n  if (COMMON_JS) {\n    module.exports = exports;\n  } else {\n    root.base32 = exports;\n\n    if (AMD) {\n      define(function () {\n        return exports;\n      });\n    }\n  }\n})();","map":{"version":3,"sources":["/home/x/reach/kick/app/reach-react-template/node_modules/hi-base32/src/base32.js"],"names":["root","window","NODE_JS","HI_BASE32_NO_NODE_JS","process","versions","node","global","COMMON_JS","HI_BASE32_NO_COMMON_JS","module","exports","AMD","define","amd","BASE32_ENCODE_CHAR","split","BASE32_DECODE_CHAR","blocks","throwInvalidUtf8","position","partial","length","substr","err","Error","toUtf8String","bytes","str","i","followingChars","b","c","String","fromCharCode","j","decodeAsBytes","base32Str","test","replace","v1","v2","v3","v4","v5","v6","v7","v8","index","count","charAt","remain","encodeAscii","parseInt","charCodeAt","encodeUtf8","code","end","start","encodeBytes","encode","input","asciiOnly","notString","constructor","ArrayBuffer","Uint8Array","decode","indexOf","asBytes","base32"],"mappings":"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","sourcesContent":["/*\n * [hi-base32]{@link https://github.com/emn178/hi-base32}\n *\n * @version 0.5.0\n * @author Chen, Yi-Cyuan [emn178@gmail.com]\n * @copyright Chen, Yi-Cyuan 2015-2018\n * @license MIT\n */\n/*jslint bitwise: true */\n(function () {\n  'use strict';\n\n  var root = typeof window === 'object' ? window : {};\n  var NODE_JS = !root.HI_BASE32_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;\n  if (NODE_JS) {\n    root = global;\n  }\n  var COMMON_JS = !root.HI_BASE32_NO_COMMON_JS && typeof module === 'object' && module.exports;\n  var AMD = typeof define === 'function' && define.amd;\n  var BASE32_ENCODE_CHAR = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'.split('');\n  var BASE32_DECODE_CHAR = {\n    'A': 0, 'B': 1, 'C': 2, 'D': 3, 'E': 4, 'F': 5, 'G': 6, 'H': 7, 'I': 8,\n    'J': 9, 'K': 10, 'L': 11, 'M': 12, 'N': 13, 'O': 14, 'P': 15, 'Q': 16,\n    'R': 17, 'S': 18, 'T': 19, 'U': 20, 'V': 21, 'W': 22, 'X': 23, 'Y': 24,\n    'Z': 25, '2': 26, '3': 27, '4': 28, '5': 29, '6': 30, '7': 31\n  };\n\n  var blocks = [0, 0, 0, 0, 0, 0, 0, 0];\n\n  var throwInvalidUtf8 = function (position, partial) {\n    if (partial.length > 10) {\n      partial = '...' + partial.substr(-10);\n    }\n    var err = new Error('Decoded data is not valid UTF-8.'\n      + ' Maybe try base32.decode.asBytes()?'\n      + ' Partial data after reading ' + position + ' bytes: ' + partial + ' <-');\n    err.position = position;\n    throw err;\n  };\n\n  var toUtf8String = function (bytes) {\n    var str = '', length = bytes.length, i = 0, followingChars = 0, b, c;\n    while (i < length) {\n      b = bytes[i++];\n      if (b <= 0x7F) {\n        str += String.fromCharCode(b);\n        continue;\n      } else if (b > 0xBF && b <= 0xDF) {\n        c = b & 0x1F;\n        followingChars = 1;\n      } else if (b <= 0xEF) {\n        c = b & 0x0F;\n        followingChars = 2;\n      } else if (b <= 0xF7) {\n        c = b & 0x07;\n        followingChars = 3;\n      } else {\n        throwInvalidUtf8(i, str);\n      }\n\n      for (var j = 0; j < followingChars; ++j) {\n        b = bytes[i++];\n        if (b < 0x80 || b > 0xBF) {\n          throwInvalidUtf8(i, str);\n        }\n        c <<= 6;\n        c += b & 0x3F;\n      }\n      if (c >= 0xD800 && c <= 0xDFFF) {\n        throwInvalidUtf8(i, str);\n      }\n      if (c > 0x10FFFF) {\n        throwInvalidUtf8(i, str);\n      }\n\n      if (c <= 0xFFFF) {\n        str += String.fromCharCode(c);\n      } else {\n        c -= 0x10000;\n        str += String.fromCharCode((c >> 10) + 0xD800);\n        str += String.fromCharCode((c & 0x3FF) + 0xDC00);\n      }\n    }\n    return str;\n  };\n\n  var decodeAsBytes = function (base32Str) {\n    if (base32Str === '') {\n      return [];\n    } else if (!/^[A-Z2-7=]+$/.test(base32Str)) {\n      throw new Error('Invalid base32 characters');\n    }\n    base32Str = base32Str.replace(/=/g, '');\n    var v1, v2, v3, v4, v5, v6, v7, v8, bytes = [], index = 0, length = base32Str.length;\n\n    // 4 char to 3 bytes\n    for (var i = 0, count = length >> 3 << 3; i < count;) {\n      v1 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v2 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v3 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v4 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v5 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v6 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v7 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v8 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      bytes[index++] = (v1 << 3 | v2 >>> 2) & 255;\n      bytes[index++] = (v2 << 6 | v3 << 1 | v4 >>> 4) & 255;\n      bytes[index++] = (v4 << 4 | v5 >>> 1) & 255;\n      bytes[index++] = (v5 << 7 | v6 << 2 | v7 >>> 3) & 255;\n      bytes[index++] = (v7 << 5 | v8) & 255;\n    }\n\n    // remain bytes\n    var remain = length - count;\n    if (remain === 2) {\n      v1 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v2 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      bytes[index++] = (v1 << 3 | v2 >>> 2) & 255;\n    } else if (remain === 4) {\n      v1 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v2 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v3 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v4 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      bytes[index++] = (v1 << 3 | v2 >>> 2) & 255;\n      bytes[index++] = (v2 << 6 | v3 << 1 | v4 >>> 4) & 255;\n    } else if (remain === 5) {\n      v1 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v2 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v3 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v4 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v5 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      bytes[index++] = (v1 << 3 | v2 >>> 2) & 255;\n      bytes[index++] = (v2 << 6 | v3 << 1 | v4 >>> 4) & 255;\n      bytes[index++] = (v4 << 4 | v5 >>> 1) & 255;\n    } else if (remain === 7) {\n      v1 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v2 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v3 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v4 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v5 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v6 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v7 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      bytes[index++] = (v1 << 3 | v2 >>> 2) & 255;\n      bytes[index++] = (v2 << 6 | v3 << 1 | v4 >>> 4) & 255;\n      bytes[index++] = (v4 << 4 | v5 >>> 1) & 255;\n      bytes[index++] = (v5 << 7 | v6 << 2 | v7 >>> 3) & 255;\n    }\n    return bytes;\n  };\n\n  var encodeAscii = function (str) {\n    var v1, v2, v3, v4, v5, base32Str = '', length = str.length;\n    for (var i = 0, count = parseInt(length / 5) * 5; i < count;) {\n      v1 = str.charCodeAt(i++);\n      v2 = str.charCodeAt(i++);\n      v3 = str.charCodeAt(i++);\n      v4 = str.charCodeAt(i++);\n      v5 = str.charCodeAt(i++);\n      base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] +\n        BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] +\n        BASE32_ENCODE_CHAR[(v2 >>> 1) & 31] +\n        BASE32_ENCODE_CHAR[(v2 << 4 | v3 >>> 4) & 31] +\n        BASE32_ENCODE_CHAR[(v3 << 1 | v4 >>> 7) & 31] +\n        BASE32_ENCODE_CHAR[(v4 >>> 2) & 31] +\n        BASE32_ENCODE_CHAR[(v4 << 3 | v5 >>> 5) & 31] +\n        BASE32_ENCODE_CHAR[v5 & 31];\n    }\n\n    // remain char\n    var remain = length - count;\n    if (remain === 1) {\n      v1 = str.charCodeAt(i);\n      base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] +\n        BASE32_ENCODE_CHAR[(v1 << 2) & 31] +\n        '======';\n    } else if (remain === 2) {\n      v1 = str.charCodeAt(i++);\n      v2 = str.charCodeAt(i);\n      base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] +\n        BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] +\n        BASE32_ENCODE_CHAR[(v2 >>> 1) & 31] +\n        BASE32_ENCODE_CHAR[(v2 << 4) & 31] +\n        '====';\n    } else if (remain === 3) {\n      v1 = str.charCodeAt(i++);\n      v2 = str.charCodeAt(i++);\n      v3 = str.charCodeAt(i);\n      base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] +\n        BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] +\n        BASE32_ENCODE_CHAR[(v2 >>> 1) & 31] +\n        BASE32_ENCODE_CHAR[(v2 << 4 | v3 >>> 4) & 31] +\n        BASE32_ENCODE_CHAR[(v3 << 1) & 31] +\n        '===';\n    } else if (remain === 4) {\n      v1 = str.charCodeAt(i++);\n      v2 = str.charCodeAt(i++);\n      v3 = str.charCodeAt(i++);\n      v4 = str.charCodeAt(i);\n      base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] +\n        BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] +\n        BASE32_ENCODE_CHAR[(v2 >>> 1) & 31] +\n        BASE32_ENCODE_CHAR[(v2 << 4 | v3 >>> 4) & 31] +\n        BASE32_ENCODE_CHAR[(v3 << 1 | v4 >>> 7) & 31] +\n        BASE32_ENCODE_CHAR[(v4 >>> 2) & 31] +\n        BASE32_ENCODE_CHAR[(v4 << 3) & 31] +\n        '=';\n    }\n    return base32Str;\n  };\n\n  var encodeUtf8 = function (str) {\n    var v1, v2, v3, v4, v5, code, end = false, base32Str = '',\n      index = 0, i, start = 0, bytes = 0, length = str.length;\n      if (str === '') {\n        return base32Str;\n      }\n    do {\n      blocks[0] = blocks[5];\n      blocks[1] = blocks[6];\n      blocks[2] = blocks[7];\n      for (i = start; index < length && i < 5; ++index) {\n        code = str.charCodeAt(index);\n        if (code < 0x80) {\n          blocks[i++] = code;\n        } else if (code < 0x800) {\n          blocks[i++] = 0xc0 | (code >> 6);\n          blocks[i++] = 0x80 | (code & 0x3f);\n        } else if (code < 0xd800 || code >= 0xe000) {\n          blocks[i++] = 0xe0 | (code >> 12);\n          blocks[i++] = 0x80 | ((code >> 6) & 0x3f);\n          blocks[i++] = 0x80 | (code & 0x3f);\n        } else {\n          code = 0x10000 + (((code & 0x3ff) << 10) | (str.charCodeAt(++index) & 0x3ff));\n          blocks[i++] = 0xf0 | (code >> 18);\n          blocks[i++] = 0x80 | ((code >> 12) & 0x3f);\n          blocks[i++] = 0x80 | ((code >> 6) & 0x3f);\n          blocks[i++] = 0x80 | (code & 0x3f);\n        }\n      }\n      bytes += i - start;\n      start = i - 5;\n      if (index === length) {\n        ++index;\n      }\n      if (index > length && i < 6) {\n        end = true;\n      }\n      v1 = blocks[0];\n      if (i > 4) {\n        v2 = blocks[1];\n        v3 = blocks[2];\n        v4 = blocks[3];\n        v5 = blocks[4];\n        base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] +\n          BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] +\n          BASE32_ENCODE_CHAR[(v2 >>> 1) & 31] +\n          BASE32_ENCODE_CHAR[(v2 << 4 | v3 >>> 4) & 31] +\n          BASE32_ENCODE_CHAR[(v3 << 1 | v4 >>> 7) & 31] +\n          BASE32_ENCODE_CHAR[(v4 >>> 2) & 31] +\n          BASE32_ENCODE_CHAR[(v4 << 3 | v5 >>> 5) & 31] +\n          BASE32_ENCODE_CHAR[v5 & 31];\n      } else if (i === 1) {\n        base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] +\n          BASE32_ENCODE_CHAR[(v1 << 2) & 31] +\n          '======';\n      } else if (i === 2) {\n        v2 = blocks[1];\n        base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] +\n          BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] +\n          BASE32_ENCODE_CHAR[(v2 >>> 1) & 31] +\n          BASE32_ENCODE_CHAR[(v2 << 4) & 31] +\n          '====';\n      } else if (i === 3) {\n        v2 = blocks[1];\n        v3 = blocks[2];\n        base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] +\n          BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] +\n          BASE32_ENCODE_CHAR[(v2 >>> 1) & 31] +\n          BASE32_ENCODE_CHAR[(v2 << 4 | v3 >>> 4) & 31] +\n          BASE32_ENCODE_CHAR[(v3 << 1) & 31] +\n          '===';\n      } else {\n        v2 = blocks[1];\n        v3 = blocks[2];\n        v4 = blocks[3];\n        base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] +\n          BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] +\n          BASE32_ENCODE_CHAR[(v2 >>> 1) & 31] +\n          BASE32_ENCODE_CHAR[(v2 << 4 | v3 >>> 4) & 31] +\n          BASE32_ENCODE_CHAR[(v3 << 1 | v4 >>> 7) & 31] +\n          BASE32_ENCODE_CHAR[(v4 >>> 2) & 31] +\n          BASE32_ENCODE_CHAR[(v4 << 3) & 31] +\n          '=';\n      }\n    } while (!end);\n    return base32Str;\n  };\n\n  var encodeBytes = function (bytes) {\n    var v1, v2, v3, v4, v5, base32Str = '', length = bytes.length;\n    for (var i = 0, count = parseInt(length / 5) * 5; i < count;) {\n      v1 = bytes[i++];\n      v2 = bytes[i++];\n      v3 = bytes[i++];\n      v4 = bytes[i++];\n      v5 = bytes[i++];\n      base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] +\n        BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] +\n        BASE32_ENCODE_CHAR[(v2 >>> 1) & 31] +\n        BASE32_ENCODE_CHAR[(v2 << 4 | v3 >>> 4) & 31] +\n        BASE32_ENCODE_CHAR[(v3 << 1 | v4 >>> 7) & 31] +\n        BASE32_ENCODE_CHAR[(v4 >>> 2) & 31] +\n        BASE32_ENCODE_CHAR[(v4 << 3 | v5 >>> 5) & 31] +\n        BASE32_ENCODE_CHAR[v5 & 31];\n    }\n\n    // remain char\n    var remain = length - count;\n    if (remain === 1) {\n      v1 = bytes[i];\n      base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] +\n        BASE32_ENCODE_CHAR[(v1 << 2) & 31] +\n        '======';\n    } else if (remain === 2) {\n      v1 = bytes[i++];\n      v2 = bytes[i];\n      base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] +\n        BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] +\n        BASE32_ENCODE_CHAR[(v2 >>> 1) & 31] +\n        BASE32_ENCODE_CHAR[(v2 << 4) & 31] +\n        '====';\n    } else if (remain === 3) {\n      v1 = bytes[i++];\n      v2 = bytes[i++];\n      v3 = bytes[i];\n      base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] +\n        BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] +\n        BASE32_ENCODE_CHAR[(v2 >>> 1) & 31] +\n        BASE32_ENCODE_CHAR[(v2 << 4 | v3 >>> 4) & 31] +\n        BASE32_ENCODE_CHAR[(v3 << 1) & 31] +\n        '===';\n    } else if (remain === 4) {\n      v1 = bytes[i++];\n      v2 = bytes[i++];\n      v3 = bytes[i++];\n      v4 = bytes[i];\n      base32Str += BASE32_ENCODE_CHAR[v1 >>> 3] +\n        BASE32_ENCODE_CHAR[(v1 << 2 | v2 >>> 6) & 31] +\n        BASE32_ENCODE_CHAR[(v2 >>> 1) & 31] +\n        BASE32_ENCODE_CHAR[(v2 << 4 | v3 >>> 4) & 31] +\n        BASE32_ENCODE_CHAR[(v3 << 1 | v4 >>> 7) & 31] +\n        BASE32_ENCODE_CHAR[(v4 >>> 2) & 31] +\n        BASE32_ENCODE_CHAR[(v4 << 3) & 31] +\n        '=';\n    }\n    return base32Str;\n  };\n\n  var encode = function (input, asciiOnly) {\n    var notString = typeof(input) !== 'string';\n    if (notString && input.constructor === ArrayBuffer) {\n      input = new Uint8Array(input);\n    }\n    if (notString) {\n      return encodeBytes(input);\n    } else if (asciiOnly) {\n      return encodeAscii(input);\n    } else {\n      return encodeUtf8(input);\n    }\n  };\n\n  var decode = function (base32Str, asciiOnly) {\n    if (!asciiOnly) {\n      return toUtf8String(decodeAsBytes(base32Str));\n    }\n    if (base32Str === '') {\n      return '';\n    } else if (!/^[A-Z2-7=]+$/.test(base32Str)) {\n      throw new Error('Invalid base32 characters');\n    }\n    var v1, v2, v3, v4, v5, v6, v7, v8, str = '', length = base32Str.indexOf('=');\n    if (length === -1) {\n      length = base32Str.length;\n    }\n\n    // 8 char to 5 bytes\n    for (var i = 0, count = length >> 3 << 3; i < count;) {\n      v1 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v2 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v3 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v4 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v5 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v6 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v7 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v8 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      str += String.fromCharCode((v1 << 3 | v2 >>> 2) & 255) +\n        String.fromCharCode((v2 << 6 | v3 << 1 | v4 >>> 4) & 255) +\n        String.fromCharCode((v4 << 4 | v5 >>> 1) & 255) +\n        String.fromCharCode((v5 << 7 | v6 << 2 | v7 >>> 3) & 255) +\n        String.fromCharCode((v7 << 5 | v8) & 255);\n    }\n\n    // remain bytes\n    var remain = length - count;\n    if (remain === 2) {\n      v1 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v2 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      str += String.fromCharCode((v1 << 3 | v2 >>> 2) & 255);\n    } else if (remain === 4) {\n      v1 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v2 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v3 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v4 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      str += String.fromCharCode((v1 << 3 | v2 >>> 2) & 255) +\n        String.fromCharCode((v2 << 6 | v3 << 1 | v4 >>> 4) & 255);\n    } else if (remain === 5) {\n      v1 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v2 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v3 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v4 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v5 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      str += String.fromCharCode((v1 << 3 | v2 >>> 2) & 255) +\n        String.fromCharCode((v2 << 6 | v3 << 1 | v4 >>> 4) & 255) +\n        String.fromCharCode((v4 << 4 | v5 >>> 1) & 255);\n    } else if (remain === 7) {\n      v1 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v2 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v3 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v4 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v5 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v6 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      v7 = BASE32_DECODE_CHAR[base32Str.charAt(i++)];\n      str += String.fromCharCode((v1 << 3 | v2 >>> 2) & 255) +\n        String.fromCharCode((v2 << 6 | v3 << 1 | v4 >>> 4) & 255) +\n        String.fromCharCode((v4 << 4 | v5 >>> 1) & 255) +\n        String.fromCharCode((v5 << 7 | v6 << 2 | v7 >>> 3) & 255);\n    }\n    return str;\n  };\n\n  var exports = {\n    encode: encode,\n    decode: decode\n  };\n  decode.asBytes = decodeAsBytes;\n\n  if (COMMON_JS) {\n    module.exports = exports;\n  } else {\n    root.base32 = exports;\n    if (AMD) {\n      define(function() {\n        return exports;\n      });\n    }\n  }\n})();\n"]},"metadata":{},"sourceType":"script"}