{"ast":null,"code":"const {\n  JSONRequest\n} = require('../jsonrequest');\n\nclass SearchForTransactions extends JSONRequest {\n  // eslint-disable-next-line no-underscore-dangle,class-methods-use-this\n  _path() {\n    return '/v2/transactions';\n  } // notePrefix to filter with, as uint8array\n\n\n  notePrefix(prefix) {\n    this.query['note-prefix'] = prefix;\n    return this;\n  } // txtype to filter with, as string\n\n\n  txType(type) {\n    this.query['tx-type'] = type;\n    return this;\n  } // sigtype to filter with, as string\n\n\n  sigType(type) {\n    this.query['sig-type'] = type;\n    return this;\n  } // txid to filter with, as string\n\n\n  txid(txid) {\n    this.query.txid = txid;\n    return this;\n  } // round to filter with, as int\n\n\n  round(round) {\n    this.query.round = round;\n    return this;\n  } // min round to filter with, as int\n\n\n  minRound(round) {\n    this.query['min-round'] = round;\n    return this;\n  } // max round to filter with, as int\n\n\n  maxRound(round) {\n    this.query['max-round'] = round;\n    return this;\n  } // asset ID to filter with, as int\n\n\n  assetID(id) {\n    this.query['asset-id'] = id;\n    return this;\n  } // limit for filter, as int\n\n\n  limit(limit) {\n    this.query.limit = limit;\n    return this;\n  } // before-time to filter with, as rfc3339 string\n\n\n  beforeTime(before) {\n    this.query['before-time'] = before;\n    return this;\n  } // after-time to filter with, as rfc3339 string\n\n\n  afterTime(after) {\n    this.query['after-time'] = after;\n    return this;\n  } // filtered results should have an amount greater than this value, as int, representing microAlgos, unless an asset-id is provided, in which case units are in the asset's units\n\n\n  currencyGreaterThan(greater) {\n    this.query['currency-greater-than'] = greater;\n    return this;\n  } // filtered results should have an amount less than this value, as int, representing microAlgos, unless an asset-id is provided, in which case units are in the asset's units\n\n\n  currencyLessThan(lesser) {\n    this.query['currency-less-than'] = lesser;\n    return this;\n  } // combined with address, defines what address to filter on, as string\n\n\n  addressRole(role) {\n    this.query['address-role'] = role;\n    return this;\n  } // address to filter with, as string\n\n\n  address(address) {\n    this.query.address = address;\n    return this;\n  } // whether or not to consider the close-to field as a receiver when filtering transactions, as bool. set to true to ignore close-to\n\n\n  excludeCloseTo(exclude) {\n    this.query['exclude-close-to'] = exclude;\n    return this;\n  } // used for pagination\n\n\n  nextToken(nextToken) {\n    this.query.next = nextToken;\n    return this;\n  } // whether or not to include rekeying transactions\n\n\n  rekeyTo(rekeyTo) {\n    this.query['rekey-to'] = rekeyTo;\n    return this;\n  } // filter for this application\n\n\n  applicationID(applicationID) {\n    this.query['application-id'] = applicationID;\n    return this;\n  }\n\n}\n\nmodule.exports = {\n  SearchForTransactions\n};","map":{"version":3,"sources":["/home/x/reach/kick/github/node_modules/algosdk/src/client/v2/indexer/searchForTransactions.js"],"names":["JSONRequest","require","SearchForTransactions","_path","notePrefix","prefix","query","txType","type","sigType","txid","round","minRound","maxRound","assetID","id","limit","beforeTime","before","afterTime","after","currencyGreaterThan","greater","currencyLessThan","lesser","addressRole","role","address","excludeCloseTo","exclude","nextToken","next","rekeyTo","applicationID","module","exports"],"mappings":"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","sourcesContent":["const { JSONRequest } = require('../jsonrequest');\n\nclass SearchForTransactions extends JSONRequest {\n  // eslint-disable-next-line no-underscore-dangle,class-methods-use-this\n  _path() {\n    return '/v2/transactions';\n  }\n\n  // notePrefix to filter with, as uint8array\n  notePrefix(prefix) {\n    this.query['note-prefix'] = prefix;\n    return this;\n  }\n\n  // txtype to filter with, as string\n  txType(type) {\n    this.query['tx-type'] = type;\n    return this;\n  }\n\n  // sigtype to filter with, as string\n  sigType(type) {\n    this.query['sig-type'] = type;\n    return this;\n  }\n\n  // txid to filter with, as string\n  txid(txid) {\n    this.query.txid = txid;\n    return this;\n  }\n\n  // round to filter with, as int\n  round(round) {\n    this.query.round = round;\n    return this;\n  }\n\n  // min round to filter with, as int\n  minRound(round) {\n    this.query['min-round'] = round;\n    return this;\n  }\n\n  // max round to filter with, as int\n  maxRound(round) {\n    this.query['max-round'] = round;\n    return this;\n  }\n\n  // asset ID to filter with, as int\n  assetID(id) {\n    this.query['asset-id'] = id;\n    return this;\n  }\n\n  // limit for filter, as int\n  limit(limit) {\n    this.query.limit = limit;\n    return this;\n  }\n\n  // before-time to filter with, as rfc3339 string\n  beforeTime(before) {\n    this.query['before-time'] = before;\n    return this;\n  }\n\n  // after-time to filter with, as rfc3339 string\n  afterTime(after) {\n    this.query['after-time'] = after;\n    return this;\n  }\n\n  // filtered results should have an amount greater than this value, as int, representing microAlgos, unless an asset-id is provided, in which case units are in the asset's units\n  currencyGreaterThan(greater) {\n    this.query['currency-greater-than'] = greater;\n    return this;\n  }\n\n  // filtered results should have an amount less than this value, as int, representing microAlgos, unless an asset-id is provided, in which case units are in the asset's units\n  currencyLessThan(lesser) {\n    this.query['currency-less-than'] = lesser;\n    return this;\n  }\n\n  // combined with address, defines what address to filter on, as string\n  addressRole(role) {\n    this.query['address-role'] = role;\n    return this;\n  }\n\n  // address to filter with, as string\n  address(address) {\n    this.query.address = address;\n    return this;\n  }\n\n  // whether or not to consider the close-to field as a receiver when filtering transactions, as bool. set to true to ignore close-to\n  excludeCloseTo(exclude) {\n    this.query['exclude-close-to'] = exclude;\n    return this;\n  }\n\n  // used for pagination\n  nextToken(nextToken) {\n    this.query.next = nextToken;\n    return this;\n  }\n\n  // whether or not to include rekeying transactions\n  rekeyTo(rekeyTo) {\n    this.query['rekey-to'] = rekeyTo;\n    return this;\n  }\n\n  // filter for this application\n  applicationID(applicationID) {\n    this.query['application-id'] = applicationID;\n    return this;\n  }\n}\n\nmodule.exports = { SearchForTransactions };\n"]},"metadata":{},"sourceType":"script"}