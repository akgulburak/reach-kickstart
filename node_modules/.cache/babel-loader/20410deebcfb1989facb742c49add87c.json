{"ast":null,"code":"const {\n  JSONRequest\n} = require('../jsonrequest');\n\nclass SearchAccounts extends JSONRequest {\n  // eslint-disable-next-line no-underscore-dangle,class-methods-use-this\n  _path() {\n    return '/v2/accounts';\n  } // filtered results should have an amount greater than this value, as int, representing microAlgos, unless an asset-id is provided, in which case units are in the asset's units\n\n\n  currencyGreaterThan(greater) {\n    this.query['currency-greater-than'] = greater;\n    return this;\n  } // filtered results should have an amount less than this value, as int, representing microAlgos, unless an asset-id is provided, in which case units are in the asset's units\n\n\n  currencyLessThan(lesser) {\n    this.query['currency-less-than'] = lesser;\n    return this;\n  } // limit for filter, as int\n\n\n  limit(limit) {\n    this.query.limit = limit;\n    return this;\n  } // asset ID to filter with, as int\n\n\n  assetID(id) {\n    this.query['asset-id'] = id;\n    return this;\n  } // used for pagination\n\n\n  nextToken(nextToken) {\n    this.query.next = nextToken;\n    return this;\n  } // specific round to search\n\n\n  round(round) {\n    this.query.round = round;\n    return this;\n  } // include accounts that use this spending key\n\n\n  authAddr(authAddr) {\n    this.query['auth-addr'] = authAddr;\n    return this;\n  } // filter for this application\n\n\n  applicationID(applicationID) {\n    this.query['application-id'] = applicationID;\n    return this;\n  } // include all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates\n\n\n  includeAll(value = true) {\n    this.query['include-all'] = value;\n    return this;\n  }\n\n}\n\nmodule.exports = {\n  SearchAccounts\n};","map":{"version":3,"sources":["/home/x/reach/kick/github/node_modules/algosdk/src/client/v2/indexer/searchAccounts.js"],"names":["JSONRequest","require","SearchAccounts","_path","currencyGreaterThan","greater","query","currencyLessThan","lesser","limit","assetID","id","nextToken","next","round","authAddr","applicationID","includeAll","value","module","exports"],"mappings":"AAAA,MAAM;AAAEA,EAAAA;AAAF,IAAkBC,OAAO,CAAC,gBAAD,CAA/B;;AAEA,MAAMC,cAAN,SAA6BF,WAA7B,CAAyC;AACvC;AACAG,EAAAA,KAAK,GAAG;AACN,WAAO,cAAP;AACD,GAJsC,CAMvC;;;AACAC,EAAAA,mBAAmB,CAACC,OAAD,EAAU;AAC3B,SAAKC,KAAL,CAAW,uBAAX,IAAsCD,OAAtC;AACA,WAAO,IAAP;AACD,GAVsC,CAYvC;;;AACAE,EAAAA,gBAAgB,CAACC,MAAD,EAAS;AACvB,SAAKF,KAAL,CAAW,oBAAX,IAAmCE,MAAnC;AACA,WAAO,IAAP;AACD,GAhBsC,CAkBvC;;;AACAC,EAAAA,KAAK,CAACA,KAAD,EAAQ;AACX,SAAKH,KAAL,CAAWG,KAAX,GAAmBA,KAAnB;AACA,WAAO,IAAP;AACD,GAtBsC,CAwBvC;;;AACAC,EAAAA,OAAO,CAACC,EAAD,EAAK;AACV,SAAKL,KAAL,CAAW,UAAX,IAAyBK,EAAzB;AACA,WAAO,IAAP;AACD,GA5BsC,CA8BvC;;;AACAC,EAAAA,SAAS,CAACA,SAAD,EAAY;AACnB,SAAKN,KAAL,CAAWO,IAAX,GAAkBD,SAAlB;AACA,WAAO,IAAP;AACD,GAlCsC,CAoCvC;;;AACAE,EAAAA,KAAK,CAACA,KAAD,EAAQ;AACX,SAAKR,KAAL,CAAWQ,KAAX,GAAmBA,KAAnB;AACA,WAAO,IAAP;AACD,GAxCsC,CA0CvC;;;AACAC,EAAAA,QAAQ,CAACA,QAAD,EAAW;AACjB,SAAKT,KAAL,CAAW,WAAX,IAA0BS,QAA1B;AACA,WAAO,IAAP;AACD,GA9CsC,CAgDvC;;;AACAC,EAAAA,aAAa,CAACA,aAAD,EAAgB;AAC3B,SAAKV,KAAL,CAAW,gBAAX,IAA+BU,aAA/B;AACA,WAAO,IAAP;AACD,GApDsC,CAsDvC;;;AACAC,EAAAA,UAAU,CAACC,KAAK,GAAG,IAAT,EAAe;AACvB,SAAKZ,KAAL,CAAW,aAAX,IAA4BY,KAA5B;AACA,WAAO,IAAP;AACD;;AA1DsC;;AA6DzCC,MAAM,CAACC,OAAP,GAAiB;AAAElB,EAAAA;AAAF,CAAjB","sourcesContent":["const { JSONRequest } = require('../jsonrequest');\n\nclass SearchAccounts extends JSONRequest {\n  // eslint-disable-next-line no-underscore-dangle,class-methods-use-this\n  _path() {\n    return '/v2/accounts';\n  }\n\n  // filtered results should have an amount greater than this value, as int, representing microAlgos, unless an asset-id is provided, in which case units are in the asset's units\n  currencyGreaterThan(greater) {\n    this.query['currency-greater-than'] = greater;\n    return this;\n  }\n\n  // filtered results should have an amount less than this value, as int, representing microAlgos, unless an asset-id is provided, in which case units are in the asset's units\n  currencyLessThan(lesser) {\n    this.query['currency-less-than'] = lesser;\n    return this;\n  }\n\n  // limit for filter, as int\n  limit(limit) {\n    this.query.limit = limit;\n    return this;\n  }\n\n  // asset ID to filter with, as int\n  assetID(id) {\n    this.query['asset-id'] = id;\n    return this;\n  }\n\n  // used for pagination\n  nextToken(nextToken) {\n    this.query.next = nextToken;\n    return this;\n  }\n\n  // specific round to search\n  round(round) {\n    this.query.round = round;\n    return this;\n  }\n\n  // include accounts that use this spending key\n  authAddr(authAddr) {\n    this.query['auth-addr'] = authAddr;\n    return this;\n  }\n\n  // filter for this application\n  applicationID(applicationID) {\n    this.query['application-id'] = applicationID;\n    return this;\n  }\n\n  // include all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates\n  includeAll(value = true) {\n    this.query['include-all'] = value;\n    return this;\n  }\n}\n\nmodule.exports = { SearchAccounts };\n"]},"metadata":{},"sourceType":"script"}