{"ast":null,"code":"const encoding = require('../../../encoding/encoding');\n\nclass Block {\n  constructor(c, roundNumber) {\n    if (!Number.isInteger(roundNumber)) throw Error('roundNumber should be an integer');\n    this.c = c;\n    this.round = roundNumber;\n    this.query = {\n      format: 'msgpack'\n    };\n  }\n  /**\n   * block gets the block info for the given round. this call may block\n   * @param headers, optional\n   * @returns {Promise<*>}\n   */\n\n\n  async do(headers = {}) {\n    const res = await this.c.get(`/v2/blocks/${this.round}`, this.query, headers);\n\n    if (res.body && res.body.byteLength > 0) {\n      return encoding.decode(res.body);\n    }\n\n    return undefined;\n  }\n\n}\n\nmodule.exports = {\n  Block\n};","map":{"version":3,"sources":["/home/x/reach/kick/app/reach-react-template/node_modules/algosdk/src/client/v2/algod/block.js"],"names":["encoding","require","Block","constructor","c","roundNumber","Number","isInteger","Error","round","query","format","do","headers","res","get","body","byteLength","decode","undefined","module","exports"],"mappings":"AAAA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,4BAAD,CAAxB;;AAEA,MAAMC,KAAN,CAAY;AACVC,EAAAA,WAAW,CAACC,CAAD,EAAIC,WAAJ,EAAiB;AAC1B,QAAI,CAACC,MAAM,CAACC,SAAP,CAAiBF,WAAjB,CAAL,EACE,MAAMG,KAAK,CAAC,kCAAD,CAAX;AACF,SAAKJ,CAAL,GAASA,CAAT;AACA,SAAKK,KAAL,GAAaJ,WAAb;AACA,SAAKK,KAAL,GAAa;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAAb;AACD;AAED;AACF;AACA;AACA;AACA;;;AACU,QAAFC,EAAE,CAACC,OAAO,GAAG,EAAX,EAAe;AACrB,UAAMC,GAAG,GAAG,MAAM,KAAKV,CAAL,CAAOW,GAAP,CACf,cAAa,KAAKN,KAAM,EADT,EAEhB,KAAKC,KAFW,EAGhBG,OAHgB,CAAlB;;AAKA,QAAIC,GAAG,CAACE,IAAJ,IAAYF,GAAG,CAACE,IAAJ,CAASC,UAAT,GAAsB,CAAtC,EAAyC;AACvC,aAAOjB,QAAQ,CAACkB,MAAT,CAAgBJ,GAAG,CAACE,IAApB,CAAP;AACD;;AACD,WAAOG,SAAP;AACD;;AAxBS;;AA2BZC,MAAM,CAACC,OAAP,GAAiB;AAAEnB,EAAAA;AAAF,CAAjB","sourcesContent":["const encoding = require('../../../encoding/encoding');\n\nclass Block {\n  constructor(c, roundNumber) {\n    if (!Number.isInteger(roundNumber))\n      throw Error('roundNumber should be an integer');\n    this.c = c;\n    this.round = roundNumber;\n    this.query = { format: 'msgpack' };\n  }\n\n  /**\n   * block gets the block info for the given round. this call may block\n   * @param headers, optional\n   * @returns {Promise<*>}\n   */\n  async do(headers = {}) {\n    const res = await this.c.get(\n      `/v2/blocks/${this.round}`,\n      this.query,\n      headers\n    );\n    if (res.body && res.body.byteLength > 0) {\n      return encoding.decode(res.body);\n    }\n    return undefined;\n  }\n}\n\nmodule.exports = { Block };\n"]},"metadata":{},"sourceType":"script"}