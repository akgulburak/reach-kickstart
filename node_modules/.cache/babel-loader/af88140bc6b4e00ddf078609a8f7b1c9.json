{"ast":null,"code":"\"use strict\"; // ExtensionCodec to handle MessagePack extensions\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ExtensionCodec = void 0;\n\nconst ExtData_1 = require(\"./ExtData\");\n\nconst timestamp_1 = require(\"./timestamp\");\n\nclass ExtensionCodec {\n  constructor() {\n    // built-in extensions\n    this.builtInEncoders = [];\n    this.builtInDecoders = []; // custom extensions\n\n    this.encoders = [];\n    this.decoders = [];\n    this.register(timestamp_1.timestampExtension);\n  }\n\n  register({\n    type,\n    encode,\n    decode\n  }) {\n    if (type >= 0) {\n      // custom extensions\n      this.encoders[type] = encode;\n      this.decoders[type] = decode;\n    } else {\n      // built-in extensions\n      const index = 1 + type;\n      this.builtInEncoders[index] = encode;\n      this.builtInDecoders[index] = decode;\n    }\n  }\n\n  tryToEncode(object, context) {\n    // built-in extensions\n    for (let i = 0; i < this.builtInEncoders.length; i++) {\n      const encodeExt = this.builtInEncoders[i];\n\n      if (encodeExt != null) {\n        const data = encodeExt(object, context);\n\n        if (data != null) {\n          const type = -1 - i;\n          return new ExtData_1.ExtData(type, data);\n        }\n      }\n    } // custom extensions\n\n\n    for (let i = 0; i < this.encoders.length; i++) {\n      const encodeExt = this.encoders[i];\n\n      if (encodeExt != null) {\n        const data = encodeExt(object, context);\n\n        if (data != null) {\n          const type = i;\n          return new ExtData_1.ExtData(type, data);\n        }\n      }\n    }\n\n    if (object instanceof ExtData_1.ExtData) {\n      // to keep ExtData as is\n      return object;\n    }\n\n    return null;\n  }\n\n  decode(data, type, context) {\n    const decodeExt = type < 0 ? this.builtInDecoders[-1 - type] : this.decoders[type];\n\n    if (decodeExt) {\n      return decodeExt(data, type, context);\n    } else {\n      // decode() does not fail, returns ExtData instead.\n      return new ExtData_1.ExtData(type, data);\n    }\n  }\n\n}\n\nexports.ExtensionCodec = ExtensionCodec;\nExtensionCodec.defaultCodec = new ExtensionCodec();","map":{"version":3,"sources":["../src/ExtensionCodec.ts"],"names":[],"mappings":"cAAA;;;;;;;AAEA,MAAA,SAAA,GAAA,OAAA,CAAA,WAAA,CAAA;;AACA,MAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AAkBA,MAAa,cAAb,CAA2B;AAgBzB,EAAA,WAAA,GAAA;AARA;AACiB,SAAA,eAAA,GAA+E,EAA/E;AACA,SAAA,eAAA,GAA+E,EAA/E,CAMjB,CAJA;;AACiB,SAAA,QAAA,GAAwE,EAAxE;AACA,SAAA,QAAA,GAAwE,EAAxE;AAGf,SAAK,QAAL,CAAc,WAAA,CAAA,kBAAd;AACD;;AAEM,EAAA,QAAQ,CAAC;AACd,IAAA,IADc;AAEd,IAAA,MAFc;AAGd,IAAA;AAHc,GAAD,EAQd;AACC,QAAI,IAAI,IAAI,CAAZ,EAAe;AACb;AACA,WAAK,QAAL,CAAc,IAAd,IAAsB,MAAtB;AACA,WAAK,QAAL,CAAc,IAAd,IAAsB,MAAtB;AACD,KAJD,MAIO;AACL;AACA,YAAM,KAAK,GAAG,IAAI,IAAlB;AACA,WAAK,eAAL,CAAqB,KAArB,IAA8B,MAA9B;AACA,WAAK,eAAL,CAAqB,KAArB,IAA8B,MAA9B;AACD;AACF;;AAEM,EAAA,WAAW,CAAC,MAAD,EAAkB,OAAlB,EAAsC;AACtD;AACA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,eAAL,CAAqB,MAAzC,EAAiD,CAAC,EAAlD,EAAsD;AACpD,YAAM,SAAS,GAAG,KAAK,eAAL,CAAqB,CAArB,CAAlB;;AACA,UAAI,SAAS,IAAI,IAAjB,EAAuB;AACrB,cAAM,IAAI,GAAG,SAAS,CAAC,MAAD,EAAS,OAAT,CAAtB;;AACA,YAAI,IAAI,IAAI,IAAZ,EAAkB;AAChB,gBAAM,IAAI,GAAG,CAAC,CAAD,GAAK,CAAlB;AACA,iBAAO,IAAI,SAAA,CAAA,OAAJ,CAAY,IAAZ,EAAkB,IAAlB,CAAP;AACD;AACF;AACF,KAXqD,CAatD;;;AACA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,QAAL,CAAc,MAAlC,EAA0C,CAAC,EAA3C,EAA+C;AAC7C,YAAM,SAAS,GAAG,KAAK,QAAL,CAAc,CAAd,CAAlB;;AACA,UAAI,SAAS,IAAI,IAAjB,EAAuB;AACrB,cAAM,IAAI,GAAG,SAAS,CAAC,MAAD,EAAS,OAAT,CAAtB;;AACA,YAAI,IAAI,IAAI,IAAZ,EAAkB;AAChB,gBAAM,IAAI,GAAG,CAAb;AACA,iBAAO,IAAI,SAAA,CAAA,OAAJ,CAAY,IAAZ,EAAkB,IAAlB,CAAP;AACD;AACF;AACF;;AAED,QAAI,MAAM,YAAY,SAAA,CAAA,OAAtB,EAA+B;AAC7B;AACA,aAAO,MAAP;AACD;;AACD,WAAO,IAAP;AACD;;AAEM,EAAA,MAAM,CAAC,IAAD,EAAmB,IAAnB,EAAiC,OAAjC,EAAqD;AAChE,UAAM,SAAS,GAAG,IAAI,GAAG,CAAP,GAAW,KAAK,eAAL,CAAqB,CAAC,CAAD,GAAK,IAA1B,CAAX,GAA6C,KAAK,QAAL,CAAc,IAAd,CAA/D;;AACA,QAAI,SAAJ,EAAe;AACb,aAAO,SAAS,CAAC,IAAD,EAAO,IAAP,EAAa,OAAb,CAAhB;AACD,KAFD,MAEO;AACL;AACA,aAAO,IAAI,SAAA,CAAA,OAAJ,CAAY,IAAZ,EAAkB,IAAlB,CAAP;AACD;AACF;;AAjFwB;;AAA3B,OAAA,CAAA,cAAA,GAAA,cAAA;AACyB,cAAA,CAAA,YAAA,GAA8C,IAAI,cAAJ,EAA9C","sourceRoot":"","sourcesContent":["\"use strict\";\n// ExtensionCodec to handle MessagePack extensions\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ExtensionCodec = void 0;\nconst ExtData_1 = require(\"./ExtData\");\nconst timestamp_1 = require(\"./timestamp\");\nclass ExtensionCodec {\n    constructor() {\n        // built-in extensions\n        this.builtInEncoders = [];\n        this.builtInDecoders = [];\n        // custom extensions\n        this.encoders = [];\n        this.decoders = [];\n        this.register(timestamp_1.timestampExtension);\n    }\n    register({ type, encode, decode, }) {\n        if (type >= 0) {\n            // custom extensions\n            this.encoders[type] = encode;\n            this.decoders[type] = decode;\n        }\n        else {\n            // built-in extensions\n            const index = 1 + type;\n            this.builtInEncoders[index] = encode;\n            this.builtInDecoders[index] = decode;\n        }\n    }\n    tryToEncode(object, context) {\n        // built-in extensions\n        for (let i = 0; i < this.builtInEncoders.length; i++) {\n            const encodeExt = this.builtInEncoders[i];\n            if (encodeExt != null) {\n                const data = encodeExt(object, context);\n                if (data != null) {\n                    const type = -1 - i;\n                    return new ExtData_1.ExtData(type, data);\n                }\n            }\n        }\n        // custom extensions\n        for (let i = 0; i < this.encoders.length; i++) {\n            const encodeExt = this.encoders[i];\n            if (encodeExt != null) {\n                const data = encodeExt(object, context);\n                if (data != null) {\n                    const type = i;\n                    return new ExtData_1.ExtData(type, data);\n                }\n            }\n        }\n        if (object instanceof ExtData_1.ExtData) {\n            // to keep ExtData as is\n            return object;\n        }\n        return null;\n    }\n    decode(data, type, context) {\n        const decodeExt = type < 0 ? this.builtInDecoders[-1 - type] : this.decoders[type];\n        if (decodeExt) {\n            return decodeExt(data, type, context);\n        }\n        else {\n            // decode() does not fail, returns ExtData instead.\n            return new ExtData_1.ExtData(type, data);\n        }\n    }\n}\nexports.ExtensionCodec = ExtensionCodec;\nExtensionCodec.defaultCodec = new ExtensionCodec();\n//# sourceMappingURL=ExtensionCodec.js.map"]},"metadata":{},"sourceType":"script"}