{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.timestampExtension = exports.decodeTimestampExtension = exports.decodeTimestampToTimeSpec = exports.encodeTimestampExtension = exports.encodeDateToTimeSpec = exports.encodeTimeSpecToTimestamp = exports.EXT_TIMESTAMP = void 0; // https://github.com/msgpack/msgpack/blob/master/spec.md#timestamp-extension-type\n\nconst int_1 = require(\"./utils/int\");\n\nexports.EXT_TIMESTAMP = -1;\nconst TIMESTAMP32_MAX_SEC = 0x100000000 - 1; // 32-bit unsigned int\n\nconst TIMESTAMP64_MAX_SEC = 0x400000000 - 1; // 34-bit unsigned int\n\nfunction encodeTimeSpecToTimestamp({\n  sec,\n  nsec\n}) {\n  if (sec >= 0 && nsec >= 0 && sec <= TIMESTAMP64_MAX_SEC) {\n    // Here sec >= 0 && nsec >= 0\n    if (nsec === 0 && sec <= TIMESTAMP32_MAX_SEC) {\n      // timestamp 32 = { sec32 (unsigned) }\n      const rv = new Uint8Array(4);\n      const view = new DataView(rv.buffer);\n      view.setUint32(0, sec);\n      return rv;\n    } else {\n      // timestamp 64 = { nsec30 (unsigned), sec34 (unsigned) }\n      const secHigh = sec / 0x100000000;\n      const secLow = sec & 0xffffffff;\n      const rv = new Uint8Array(8);\n      const view = new DataView(rv.buffer); // nsec30 | secHigh2\n\n      view.setUint32(0, nsec << 2 | secHigh & 0x3); // secLow32\n\n      view.setUint32(4, secLow);\n      return rv;\n    }\n  } else {\n    // timestamp 96 = { nsec32 (unsigned), sec64 (signed) }\n    const rv = new Uint8Array(12);\n    const view = new DataView(rv.buffer);\n    view.setUint32(0, nsec);\n    int_1.setInt64(view, 4, sec);\n    return rv;\n  }\n}\n\nexports.encodeTimeSpecToTimestamp = encodeTimeSpecToTimestamp;\n\nfunction encodeDateToTimeSpec(date) {\n  const msec = date.getTime();\n  const sec = Math.floor(msec / 1e3);\n  const nsec = (msec - sec * 1e3) * 1e6; // Normalizes { sec, nsec } to ensure nsec is unsigned.\n\n  const nsecInSec = Math.floor(nsec / 1e9);\n  return {\n    sec: sec + nsecInSec,\n    nsec: nsec - nsecInSec * 1e9\n  };\n}\n\nexports.encodeDateToTimeSpec = encodeDateToTimeSpec;\n\nfunction encodeTimestampExtension(object) {\n  if (object instanceof Date) {\n    const timeSpec = encodeDateToTimeSpec(object);\n    return encodeTimeSpecToTimestamp(timeSpec);\n  } else {\n    return null;\n  }\n}\n\nexports.encodeTimestampExtension = encodeTimestampExtension;\n\nfunction decodeTimestampToTimeSpec(data) {\n  const view = new DataView(data.buffer, data.byteOffset, data.byteLength); // data may be 32, 64, or 96 bits\n\n  switch (data.byteLength) {\n    case 4:\n      {\n        // timestamp 32 = { sec32 }\n        const sec = view.getUint32(0);\n        const nsec = 0;\n        return {\n          sec,\n          nsec\n        };\n      }\n\n    case 8:\n      {\n        // timestamp 64 = { nsec30, sec34 }\n        const nsec30AndSecHigh2 = view.getUint32(0);\n        const secLow32 = view.getUint32(4);\n        const sec = (nsec30AndSecHigh2 & 0x3) * 0x100000000 + secLow32;\n        const nsec = nsec30AndSecHigh2 >>> 2;\n        return {\n          sec,\n          nsec\n        };\n      }\n\n    case 12:\n      {\n        // timestamp 96 = { nsec32 (unsigned), sec64 (signed) }\n        const sec = int_1.getInt64(view, 4);\n        const nsec = view.getUint32(0);\n        return {\n          sec,\n          nsec\n        };\n      }\n\n    default:\n      throw new Error(`Unrecognized data size for timestamp: ${data.length}`);\n  }\n}\n\nexports.decodeTimestampToTimeSpec = decodeTimestampToTimeSpec;\n\nfunction decodeTimestampExtension(data) {\n  const timeSpec = decodeTimestampToTimeSpec(data);\n  return new Date(timeSpec.sec * 1e3 + timeSpec.nsec / 1e6);\n}\n\nexports.decodeTimestampExtension = decodeTimestampExtension;\nexports.timestampExtension = {\n  type: exports.EXT_TIMESTAMP,\n  encode: encodeTimestampExtension,\n  decode: decodeTimestampExtension\n};","map":{"version":3,"sources":["../src/timestamp.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.timestampExtension = exports.decodeTimestampExtension = exports.decodeTimestampToTimeSpec = exports.encodeTimestampExtension = exports.encodeDateToTimeSpec = exports.encodeTimeSpecToTimestamp = exports.EXT_TIMESTAMP = void 0;\n// https://github.com/msgpack/msgpack/blob/master/spec.md#timestamp-extension-type\nconst int_1 = require(\"./utils/int\");\nexports.EXT_TIMESTAMP = -1;\nconst TIMESTAMP32_MAX_SEC = 0x100000000 - 1; // 32-bit unsigned int\nconst TIMESTAMP64_MAX_SEC = 0x400000000 - 1; // 34-bit unsigned int\nfunction encodeTimeSpecToTimestamp({ sec, nsec }) {\n    if (sec >= 0 && nsec >= 0 && sec <= TIMESTAMP64_MAX_SEC) {\n        // Here sec >= 0 && nsec >= 0\n        if (nsec === 0 && sec <= TIMESTAMP32_MAX_SEC) {\n            // timestamp 32 = { sec32 (unsigned) }\n            const rv = new Uint8Array(4);\n            const view = new DataView(rv.buffer);\n            view.setUint32(0, sec);\n            return rv;\n        }\n        else {\n            // timestamp 64 = { nsec30 (unsigned), sec34 (unsigned) }\n            const secHigh = sec / 0x100000000;\n            const secLow = sec & 0xffffffff;\n            const rv = new Uint8Array(8);\n            const view = new DataView(rv.buffer);\n            // nsec30 | secHigh2\n            view.setUint32(0, (nsec << 2) | (secHigh & 0x3));\n            // secLow32\n            view.setUint32(4, secLow);\n            return rv;\n        }\n    }\n    else {\n        // timestamp 96 = { nsec32 (unsigned), sec64 (signed) }\n        const rv = new Uint8Array(12);\n        const view = new DataView(rv.buffer);\n        view.setUint32(0, nsec);\n        int_1.setInt64(view, 4, sec);\n        return rv;\n    }\n}\nexports.encodeTimeSpecToTimestamp = encodeTimeSpecToTimestamp;\nfunction encodeDateToTimeSpec(date) {\n    const msec = date.getTime();\n    const sec = Math.floor(msec / 1e3);\n    const nsec = (msec - sec * 1e3) * 1e6;\n    // Normalizes { sec, nsec } to ensure nsec is unsigned.\n    const nsecInSec = Math.floor(nsec / 1e9);\n    return {\n        sec: sec + nsecInSec,\n        nsec: nsec - nsecInSec * 1e9,\n    };\n}\nexports.encodeDateToTimeSpec = encodeDateToTimeSpec;\nfunction encodeTimestampExtension(object) {\n    if (object instanceof Date) {\n        const timeSpec = encodeDateToTimeSpec(object);\n        return encodeTimeSpecToTimestamp(timeSpec);\n    }\n    else {\n        return null;\n    }\n}\nexports.encodeTimestampExtension = encodeTimestampExtension;\nfunction decodeTimestampToTimeSpec(data) {\n    const view = new DataView(data.buffer, data.byteOffset, data.byteLength);\n    // data may be 32, 64, or 96 bits\n    switch (data.byteLength) {\n        case 4: {\n            // timestamp 32 = { sec32 }\n            const sec = view.getUint32(0);\n            const nsec = 0;\n            return { sec, nsec };\n        }\n        case 8: {\n            // timestamp 64 = { nsec30, sec34 }\n            const nsec30AndSecHigh2 = view.getUint32(0);\n            const secLow32 = view.getUint32(4);\n            const sec = (nsec30AndSecHigh2 & 0x3) * 0x100000000 + secLow32;\n            const nsec = nsec30AndSecHigh2 >>> 2;\n            return { sec, nsec };\n        }\n        case 12: {\n            // timestamp 96 = { nsec32 (unsigned), sec64 (signed) }\n            const sec = int_1.getInt64(view, 4);\n            const nsec = view.getUint32(0);\n            return { sec, nsec };\n        }\n        default:\n            throw new Error(`Unrecognized data size for timestamp: ${data.length}`);\n    }\n}\nexports.decodeTimestampToTimeSpec = decodeTimestampToTimeSpec;\nfunction decodeTimestampExtension(data) {\n    const timeSpec = decodeTimestampToTimeSpec(data);\n    return new Date(timeSpec.sec * 1e3 + timeSpec.nsec / 1e6);\n}\nexports.decodeTimestampExtension = decodeTimestampExtension;\nexports.timestampExtension = {\n    type: exports.EXT_TIMESTAMP,\n    encode: encodeTimestampExtension,\n    decode: decodeTimestampExtension,\n};\n//# sourceMappingURL=timestamp.js.map"]},"metadata":{},"sourceType":"script"}